<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AiRomance</title>
  <icon>https://blog.whff521.xyz/images/101.ico</icon>
  <subtitle>爱裸漫三三</subtitle>
  <link href="https://blog.whff521.xyz/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://blog.whff521.xyz/"/>
  <updated>2024-06-17T15:58:04.824Z</updated>
  <id>https://blog.whff521.xyz/</id>
  
  <author>
    <name>AiRomance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Eloquent JavaScript 06 Exercises</title>
    <link href="https://blog.whff521.xyz/2024/06/17/Eloquent-JavaScript-06-Exercises/"/>
    <id>https://blog.whff521.xyz/2024/06/17/Eloquent-JavaScript-06-Exercises/</id>
    <published>2024-06-17T15:16:28.000Z</published>
    <updated>2024-06-17T15:58:04.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p><a href="https://eloquentjavascript.net/06_object.html">To the book page</a>  </p><h2 id="A-vector-type"><a href="#A-vector-type" class="headerlink" title="A vector type"></a>A vector type</h2><p>封装一个类，实现坐标的加减法，以及get属性的length返回坐标离原点的距离。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vec</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">plus</span>(<span class="params">other</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="variable language_">this</span>.<span class="property">x</span>+other.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>+other.<span class="property">y</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">minus</span>(<span class="params">other</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="variable language_">this</span>.<span class="property">x</span>-other.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>-other.<span class="property">y</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">length</span>()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable language_">this</span>.<span class="property">x</span>**<span class="number">2</span>+<span class="variable language_">this</span>.<span class="property">y</span>**<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">1</span>, <span class="number">2</span>).<span class="title function_">plus</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">2</span>, <span class="number">3</span>)));</span><br><span class="line"><span class="comment">// → Vec&#123;x: 3, y: 5&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">1</span>, <span class="number">2</span>).<span class="title function_">minus</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">2</span>, <span class="number">3</span>)));</span><br><span class="line"><span class="comment">// → Vec&#123;x: -1, y: -1&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">3</span>, <span class="number">4</span>).<span class="property">length</span>);</span><br><span class="line"><span class="comment">// → 5</span></span><br></pre></td></tr></table></figure><h2 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h2><p>封装一个Group类，实现相当于Set的功能。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span> &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = [];  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">value</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="title function_">has</span>(value))&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">push</span>(value);  </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">member</span> =&gt;</span> member!==value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">has</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">includes</span>(value);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">from</span>(<span class="params">iterable</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> group = <span class="keyword">new</span> <span class="title class_">Group</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> iterable)&#123;</span><br><span class="line">      group.<span class="title function_">add</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> group;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> group = <span class="title class_">Group</span>.<span class="title function_">from</span>([<span class="number">10</span>, <span class="number">20</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(group.<span class="title function_">has</span>(<span class="number">10</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(group.<span class="title function_">has</span>(<span class="number">30</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line">group.<span class="title function_">add</span>(<span class="number">10</span>);</span><br><span class="line">group.<span class="title function_">delete</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(group.<span class="title function_">has</span>(<span class="number">10</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br></pre></td></tr></table></figure><h2 id="Iterable-groups"><a href="#Iterable-groups" class="headerlink" title="Iterable groups"></a>Iterable groups</h2><p>让上面的数组类可迭代。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Your code here (and the code from the previous exercise)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span> &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = [];  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">value</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="title function_">has</span>(value))&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">push</span>(value);  </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">member</span> =&gt;</span> member!==value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">has</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">includes</span>(value);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">from</span>(<span class="params">iterable</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> group = <span class="keyword">new</span> <span class="title class_">Group</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> iterable)&#123;</span><br><span class="line">      group.<span class="title function_">add</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> group;</span><br><span class="line">  &#125;</span><br><span class="line">   [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">     <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">let</span> members = <span class="variable language_">this</span>.<span class="property">members</span>;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(index &lt; members.<span class="property">length</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;<span class="attr">value</span>:members[index++],<span class="attr">done</span>:<span class="literal">false</span>&#125;;</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="title class_">Group</span>.<span class="title function_">from</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>])) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → a</span></span><br><span class="line"><span class="comment">// → b</span></span><br><span class="line"><span class="comment">// → c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://eloquentjavascript.net/06_object.html&quot;&gt;To the book</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent JavaScript 05 Exercises</title>
    <link href="https://blog.whff521.xyz/2024/06/17/Eloquent-JavaScript-05-Exercises/"/>
    <id>https://blog.whff521.xyz/2024/06/17/Eloquent-JavaScript-05-Exercises/</id>
    <published>2024-06-17T06:43:43.000Z</published>
    <updated>2024-06-17T15:59:11.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>记录一下这本书的习题的答案，这是第五章的练习。</p><p><a href="https://eloquentjavascript.net/05_higher_order.html">To the book page</a>  </p><h2 id="Flattening"><a href="#Flattening" class="headerlink" title="Flattening"></a>Flattening</h2><p>将包含数组的数组展开，即只有一对中括号的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrays = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>]];</span><br><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="keyword">let</span> combineArrays = arrays.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator,currentArray</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator.<span class="title function_">concat</span>(currentArray);</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(combineArrays);</span><br><span class="line"><span class="comment">// → [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="Your-own-loop"><a href="#Your-own-loop" class="headerlink" title="Your own loop"></a>Your own loop</h2><p>如果不能满足条件（testAct）就不能继续循环。下一次循环要用新的值（updateAct），每次循环需要执行一定的操作（bodyAct）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">value, testAct, updateAct,bodyAct</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">testAct</span>(value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="title function_">bodyAct</span>(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loop</span>(<span class="title function_">updateAct</span>(value),testAct,updateAct,bodyAct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loop</span>(<span class="number">3</span>, <span class="function"><span class="params">n</span> =&gt;</span> n &gt; <span class="number">0</span>, <span class="function"><span class="params">n</span> =&gt;</span> n - <span class="number">1</span>, <span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="comment">// → 3</span></span><br><span class="line"><span class="comment">// → 2</span></span><br><span class="line"><span class="comment">// → 1</span></span><br></pre></td></tr></table></figure><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h2><p>判断数组中所有元素是否都满足一定的条件，和some函数相反。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">every</span>(<span class="params">array, test</span>) &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="keyword">for</span>(item <span class="keyword">of</span> array)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">test</span>(item))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//   return !array.some(element=&gt;!test(element));</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">every</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], <span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">10</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">every</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">16</span>], <span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">10</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">every</span>([], <span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">10</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure><h2 id="Dominant-writing-direction"><a href="#Dominant-writing-direction" class="headerlink" title="Dominant writing direction"></a>Dominant writing direction</h2><p>找出文字中最主要的读法方向。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dominantDirection</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">    <span class="keyword">let</span> counted = <span class="title function_">countBy</span>(text,<span class="function"><span class="params">char</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="title function_">characterScript</span>(char.<span class="title function_">codePointAt</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> script ? script.<span class="property">direction</span> : <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  &#125;).<span class="title function_">filter</span>(<span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> name!=<span class="string">&quot;none&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(counted.<span class="property">length</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;ltr&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> counted.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a.<span class="property">count</span>&gt;b.<span class="property">count</span>?<span class="attr">a</span>:b).<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dominantDirection</span>(<span class="string">&quot;Hello!&quot;</span>));</span><br><span class="line"><span class="comment">// → ltr</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dominantDirection</span>(<span class="string">&quot;Hey, مساء الخير&quot;</span>));</span><br><span class="line"><span class="comment">// → rtl</span></span><br></pre></td></tr></table></figure><p>这是<code>countBy</code>,作用是返回数组中满足要求的数量，groupName作为函数名称调用，返回属于当前item所属于的组名称，在这里有两个组别，分别是true组和false组，然后将所在组的数量加1:  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countBy</span>(<span class="params">items, groupName</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> counts = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> items) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="title function_">groupName</span>(item);</span><br><span class="line">    <span class="keyword">let</span> known = counts.<span class="title function_">find</span>(c = c.<span class="property">name</span> == name);</span><br><span class="line">    <span class="keyword">if</span> (!known) &#123;</span><br><span class="line">      counts.<span class="title function_">push</span>(&#123;name, <span class="attr">count</span>: <span class="number">1</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      known.<span class="property">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countBy</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="params">n</span> =&gt;</span> n &gt; <span class="number">2</span>));</span><br><span class="line"><span class="comment">// → [&#123;name: false, count: 2&#125;, &#123;name: true, count: 3&#125;]</span></span><br></pre></td></tr></table></figure><p>这是<code>characterScript</code>，作用是判断code属于哪一种语言。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">characterScript</span>(<span class="params">code</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> script <span class="keyword">of</span> <span class="variable constant_">SCRIPTS</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (script.<span class="property">ranges</span>.<span class="title function_">some</span>(<span class="function">(<span class="params">[<span class="keyword">from</span>, to]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> code &gt;= <span class="keyword">from</span> &amp;&amp; code &lt; to;</span><br><span class="line">    &#125;)) &#123;</span><br><span class="line">      <span class="keyword">return</span> script;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">characterScript</span>(<span class="number">121</span>));</span><br><span class="line"><span class="comment">// → &#123;name: &quot;Latin&quot;, …&#125;</span></span><br></pre></td></tr></table></figure><p><code>SCRIPTS</code>类型的格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Coptic&quot;</span>,</span><br><span class="line">  <span class="attr">ranges</span>: [[<span class="number">994</span>, <span class="number">1008</span>], [<span class="number">11392</span>, <span class="number">11508</span>], [<span class="number">11513</span>, <span class="number">11520</span>]],</span><br><span class="line">  <span class="attr">direction</span>: <span class="string">&quot;ltr&quot;</span>,</span><br><span class="line">  <span class="attr">year</span>: -<span class="number">200</span>,</span><br><span class="line">  <span class="attr">living</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">link</span>: <span class="string">&quot;https://en.wikipedia.org/wiki/Coptic_alphabet&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h1&gt;&lt;p&gt;记录一下这本书的习题的答案，这是第五章的练习。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>用Github Desktop简化你的推送流程</title>
    <link href="https://blog.whff521.xyz/2024/06/12/%E7%94%A8github-Desktop%E7%AE%80%E5%8C%96%E4%BD%A0%E7%9A%84%E6%8E%A8%E9%80%81%E6%B5%81%E7%A8%8B/"/>
    <id>https://blog.whff521.xyz/2024/06/12/%E7%94%A8github-Desktop%E7%AE%80%E5%8C%96%E4%BD%A0%E7%9A%84%E6%8E%A8%E9%80%81%E6%B5%81%E7%A8%8B/</id>
    <published>2024-06-12T08:53:03.000Z</published>
    <updated>2024-06-12T13:36:30.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用Github-Desktop简化你的推送流程"><a href="#用Github-Desktop简化你的推送流程" class="headerlink" title="用Github Desktop简化你的推送流程"></a>用Github Desktop简化你的推送流程</h1><p><a href="https://desktop.github.com/">Github Desktop官方网站</a></p><h2 id="1-第三方仓库克隆"><a href="#1-第三方仓库克隆" class="headerlink" title="1. 第三方仓库克隆"></a>1. 第三方仓库克隆</h2><h3 id="选择file-clone-repository"><a href="#选择file-clone-repository" class="headerlink" title="选择file-&gt;clone repository,"></a>选择file-&gt;clone repository,</h3><p><img src="/../images/githubDesktop/chooseclone.png" alt="chooseClone"></p><h3 id="通过URL克隆你的仓库"><a href="#通过URL克隆你的仓库" class="headerlink" title="通过URL克隆你的仓库"></a>通过URL克隆你的仓库</h3><p>选择URL，里面填你的第三方仓库的https克隆链接，注意要填写公网地址而不是内网地址。  </p><p><img src="/../images/githubDesktop/writeURL.png" alt="writeURL"></p><p><strong>注意选择你保存仓库的本地位置</strong>  </p><p>点击clone后应该会弹出让你输入用户名和密码，如果是gitlab，直接输入你登录gitlab的用户名和密码。  </p><p>到此为止应该是可以克隆仓库到本地了。之后的操作，和一般的git操作是一致的，不过是有了图形化的界面，不用输入繁琐的命令。</p><h2 id="2-add-和-commit"><a href="#2-add-和-commit" class="headerlink" title="2. add 和 commit"></a>2. add 和 commit</h2><p>直接到app界面，一旦仓库有文件更改，app界面会罗列出你更新文件的内容，需要你进行commit操作。  </p><p><img src="/../images/githubDesktop/commit.png" alt="commit"></p><h2 id="3-push"><a href="#3-push" class="headerlink" title="3. push"></a>3. push</h2><p>处理完所有的commit后就可以进行推送了，直接点击界面右边的push origin 即可。</p><p><img src="/../images/githubDesktop/push.png" alt="push"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;用Github-Desktop简化你的推送流程&quot;&gt;&lt;a href=&quot;#用Github-Desktop简化你的推送流程&quot; class=&quot;headerlink&quot; title=&quot;用Github Desktop简化你的推送流程&quot;&gt;&lt;/a&gt;用Github</summary>
        
      
    
    
    
    <category term="计算机相关" scheme="https://blog.whff521.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="git" scheme="https://blog.whff521.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Chess For Three</title>
    <link href="https://blog.whff521.xyz/2024/05/22/check-for-three/"/>
    <id>https://blog.whff521.xyz/2024/05/22/check-for-three/</id>
    <published>2024-05-22T09:14:42.000Z</published>
    <updated>2024-05-22T09:20:05.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chess-For-Three"><a href="#Chess-For-Three" class="headerlink" title="Chess For Three"></a>Chess For Three</h1><p>这是Codeforces Round 945 (Div. 2) 第一题。  </p><p><a href="https://codeforces.com/contest/1973/problem/A">题目链接</a>  </p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>三个人玩游戏，每局两个人玩。赢得人得2分，输的人得0分。平局每个人得1分。会给你三个人的最终得分，问最多平局多少局。</p><h2 id="重点记录"><a href="#重点记录" class="headerlink" title="重点记录"></a>重点记录</h2><p>这里题确实不难，但是有一个样例因为没有给怎么算的导致我一直以为样例给错了。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 4 5</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>3分4分5分，最大平局数是6。  </p><p>我最一开始想的是a和b平局3次，b还剩一局和c平局，这是4次。a和c平局3次，b和c平局2次，这是5次。<br>但是样例给的是6次。</p><p>6次的情况应该是<strong>c和a平局2次，c和b平局3次，a和b平局1次</strong>，这样就是6次。这真的是太amazing了。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>可以直接暴力枚举a和b，a和c，b和c平局次数，然后判断分数是否合法。除去平局的分数，剩下的分数应该<code>left%2==0</code>。  </p><p>但是还有结论， <code>min((p1+p2+p3)/2,p1+p2)</code>，这里保证<code>p1&lt;=p2&lt;=p3</code>。  </p><p>先考虑合不合法，三个数加一起如果是偶数就一定合法。  </p><p>其次，如果<code>p1+p2&lt;=p3</code>，那么情况应该是a和c平局p1次，b和c平局p2次。这就是最大的平局数。  </p><p>如果<code>p1+p2&gt;p3</code>，相当于<code>p1&gt;p3-p2</code>。a可以和c玩p3-p2次，相当于a剩余分数为<code>p1-(p3-p2)</code>，这个分数一定是偶数。a还可以和b和c分别玩<code>(p1-(p3-p2))/2</code>次。这里a和其他人的平局数就是p1。b和c还可以平局<code>p2-(p1-(p3-p2))/2)</code>次。加一起就是<code>(p1+p2+p3)/2</code>。</p><p>标程核心：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; (v[<span class="number">0</span>] + v[<span class="number">1</span>] + v[<span class="number">2</span>] - <span class="built_in">max</span>(<span class="number">0</span>, v[<span class="number">2</span>] - v[<span class="number">0</span>] - v[<span class="number">1</span>])) / <span class="number">2</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>暴力正解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> p1,p2,p3;</span><br><span class="line">        cin&gt;&gt;p1&gt;&gt;p2&gt;&gt;p3;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// i d12,j d13,k d23</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">30</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">30</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">30</span>;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(p1-i-j&gt;=<span class="number">0</span>&amp;&amp;(p1-i-j)%<span class="number">2</span>==<span class="number">0</span> &amp;&amp;</span><br><span class="line">                       p2-i-k&gt;=<span class="number">0</span>&amp;&amp;(p2-i-k)%<span class="number">2</span>==<span class="number">0</span> &amp;&amp;</span><br><span class="line">                       p3-j-k&gt;=<span class="number">0</span>&amp;&amp;(p3-j-k)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                        ans = <span class="built_in">max</span>(ans,i+j+k);    </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans!=<span class="number">-1</span>) cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Chess-For-Three&quot;&gt;&lt;a href=&quot;#Chess-For-Three&quot; class=&quot;headerlink&quot; title=&quot;Chess For Three&quot;&gt;&lt;/a&gt;Chess For Three&lt;/h1&gt;&lt;p&gt;这是Codeforces</summary>
        
      
    
    
    
    <category term="算法题" scheme="https://blog.whff521.xyz/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="Codeforces" scheme="https://blog.whff521.xyz/tags/Codeforces/"/>
    
    <category term="数学" scheme="https://blog.whff521.xyz/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Prison Escape</title>
    <link href="https://blog.whff521.xyz/2024/05/17/Prison-Escape/"/>
    <id>https://blog.whff521.xyz/2024/05/17/Prison-Escape/</id>
    <published>2024-05-17T08:18:09.000Z</published>
    <updated>2024-05-23T09:05:36.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prison-Escape"><a href="#Prison-Escape" class="headerlink" title="Prison Escape"></a>Prison Escape</h1><p>这是<code>codechef starter 134 div4</code>的第六题。<br><a href="https://www.codechef.com/problems/PRISON">题目链接</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>NxM的01矩阵，0代表罪犯，1代表守卫者。罪犯可以上下左右移动，计算罪犯最少需要经过几个守卫者才能逃出这个矩阵。我们要求出这些罪犯里边经过最少守卫者数量的最大值。<br>数据范围：<code>T 1000，N和M 3e5，NxM&lt;3e5</code>。</p><h2 id="赛时回顾"><a href="#赛时回顾" class="headerlink" title="赛时回顾"></a>赛时回顾</h2><p>一眼最短路，但是看见数据范围就没有去写代码。我觉得每个0点去执行最短路算法应该会超时。或者直接每个0进行bfs应该也会超时。</p><h2 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h2><p><strong>有个东西叫多源最短路</strong>。实际上我应该换位思考，不是去求0到边界的最短路，而是边界到0的最短路。多源最短路有两种方法，一是设置虚拟节点连接到所有源，二是直接把所有源节点压入队列中，不需要理会。</p><p>所以实际上这个题目是典型的<code>0-1BFS</code>问题。我们只需要将所有边界节点压入队列中，然后一点点向内更新距离即可。最后答案就是<code>d[i][j]</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mxlen = <span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> n,m;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        string a[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">d</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m,INT_MAX));</span><br><span class="line">        deque&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; dq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>||j==<span class="number">0</span>||i==n<span class="number">-1</span>||j==m<span class="number">-1</span>)&#123;</span><br><span class="line">                    d[i][j]=a[i][j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span>(d[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                        dq.<span class="built_in">push_front</span>(&#123;i,j&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> dq.<span class="built_in">push_back</span>(&#123;i,j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> dx[] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> dy[] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(!dq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> x = dq.<span class="built_in">front</span>().first;</span><br><span class="line">            <span class="type">int</span> y = dq.<span class="built_in">front</span>().second;</span><br><span class="line">            dq.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">                <span class="type">int</span> xx = x+dx[i];</span><br><span class="line">                <span class="type">int</span> yy = y+dy[i];</span><br><span class="line">                <span class="keyword">if</span>(xx&lt;<span class="number">0</span>||yy&lt;<span class="number">0</span>||xx&gt;=n||yy&gt;=m) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> weight = a[xx][yy]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(d[x][y]+weight&lt;d[xx][yy])&#123;</span><br><span class="line">                    d[xx][yy]=d[x][y]+weight;</span><br><span class="line">                    <span class="keyword">if</span>(weight==<span class="number">0</span>)&#123;</span><br><span class="line">                        dq.<span class="built_in">push_front</span>(&#123;xx,yy&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> dq.<span class="built_in">push_back</span>(&#123;xx,yy&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans,d[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Prison-Escape&quot;&gt;&lt;a href=&quot;#Prison-Escape&quot; class=&quot;headerlink&quot; title=&quot;Prison Escape&quot;&gt;&lt;/a&gt;Prison Escape&lt;/h1&gt;&lt;p&gt;这是&lt;code&gt;codechef starter</summary>
        
      
    
    
    
    <category term="算法题" scheme="https://blog.whff521.xyz/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="01BFS" scheme="https://blog.whff521.xyz/tags/01BFS/"/>
    
    <category term="多源最短路" scheme="https://blog.whff521.xyz/tags/%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
</feed>
