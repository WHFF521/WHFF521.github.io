<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AiRomance</title>
  <icon>https://blog.whff521.xyz/images/101.ico</icon>
  <subtitle>爱裸漫三三</subtitle>
  <link href="https://blog.whff521.xyz/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://blog.whff521.xyz/"/>
  <updated>2024-06-22T14:36:28.467Z</updated>
  <id>https://blog.whff521.xyz/</id>
  
  <author>
    <name>AiRomance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Eloquent JavaScript 09 Exercises</title>
    <link href="https://blog.whff521.xyz/2024/06/22/Eloquent-JavaScript-09-Exercises/"/>
    <id>https://blog.whff521.xyz/2024/06/22/Eloquent-JavaScript-09-Exercises/</id>
    <published>2024-06-22T13:39:01.000Z</published>
    <updated>2024-06-22T14:36:28.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://eloquentjavascript.net/09_regexp.html">To the book page</a>  </p><h2 id="Regexp-golf"><a href="#Regexp-golf" class="headerlink" title="Regexp golf"></a>Regexp golf</h2><p>注意这里如果写对的话，应该什么都不会输出。  </p><p>正则表达式中的<code>\b</code>是单词边界的标志，它用来匹配一个单词的边界。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill in the regular expressions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则表达式应该匹配“car”和“cat”，但不匹配其他字符串。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/ca[rt]/</span>,</span><br><span class="line">       [<span class="string">&quot;my car&quot;</span>, <span class="string">&quot;bad cats&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;camper&quot;</span>, <span class="string">&quot;high art&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配“pop”和“prop”，但不匹配其他字符串。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/pr?op/</span>,</span><br><span class="line">       [<span class="string">&quot;pop culture&quot;</span>, <span class="string">&quot;mad props&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;plop&quot;</span>, <span class="string">&quot;prrrop&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配“ferret”，“ferry”和“ferrari”，但不匹配其他字符串。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/ferr(et|y|ari)/</span>,</span><br><span class="line">       [<span class="string">&quot;ferret&quot;</span>, <span class="string">&quot;ferry&quot;</span>, <span class="string">&quot;ferrari&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;ferrum&quot;</span>, <span class="string">&quot;transfer A&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配以“ious”结尾的任何单词。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/\b\w*ious\b/</span>,</span><br><span class="line">       [<span class="string">&quot;how delicious&quot;</span>, <span class="string">&quot;spacious room&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;ruinous&quot;</span>, <span class="string">&quot;consciousness&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配空白字符后跟一个句号、逗号、冒号或分号。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/\s[.,;:]/</span>,</span><br><span class="line">       [<span class="string">&quot;bad punctuation .&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;escape the period&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配长度大于六个字母的单词。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/\b\w&#123;7,&#125;\b/</span>,</span><br><span class="line">       [<span class="string">&quot;Siebentausenddreihundertzweiundzwanzig&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;no&quot;</span>, <span class="string">&quot;three small words&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配不包含字母“e”或“E”的单词。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/\b[a-df-zA-DF-Z]+\b/</span>,</span><br><span class="line">       [<span class="string">&quot;red platypus&quot;</span>, <span class="string">&quot;wobbling nest&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;earth bed&quot;</span>, <span class="string">&quot;bedrøvet abe&quot;</span>, <span class="string">&quot;BEET&quot;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">verify</span>(<span class="params">regexp, yes, no</span>) &#123;</span><br><span class="line">  <span class="comment">// Ignore unfinished exercises</span></span><br><span class="line">  <span class="keyword">if</span> (regexp.<span class="property">source</span> == <span class="string">&quot;...&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> yes) <span class="keyword">if</span> (!regexp.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Failure to match &#x27;<span class="subst">$&#123;str&#125;</span>&#x27;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> no) <span class="keyword">if</span> (regexp.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Unexpected match for &#x27;<span class="subst">$&#123;str&#125;</span>&#x27;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quoting-style"><a href="#Quoting-style" class="headerlink" title="Quoting style"></a>Quoting style</h2><p>将句子中的单引号换成双引号，但是单词缩写不能变，比如“aren’t”  </p><p>这里调试了半天，因为我错误的将<code>|</code>写成中文的<code>｜</code>了。。。  </p><ul><li><code>(^|\W)</code>：匹配开头或非字母字符后面的单引号。</li><li><code>(\W|$)</code>：匹配单引号后面紧跟非字母字符或字符串结尾。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;&#x27;I&#x27;m the cook,&#x27; he said, &#x27;it&#x27;s my job.&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">// Change this call.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">replace</span>(<span class="regexp">/(^|\W)&#x27;|&#x27;(\W|$)/g</span>,<span class="string">&#x27;$1&quot;$2&#x27;</span>));</span><br><span class="line"><span class="comment">// → &quot;I&#x27;m the cook,&quot; he said, &quot;it&#x27;s my job.&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Numbers-again"><a href="#Numbers-again" class="headerlink" title="Numbers again"></a>Numbers again</h2><p>为了编写一个匹配JavaScript风格数字的正则表达式，我们需要支持以下特性：</p><ul><li>可选的正负号</li><li>可选的十进制点</li><li>指数表示法（e或E），以及可选的正负号</li></ul><p>以下是我们可以遵循的步骤：</p><ol><li><strong>可选的正负号</strong>：<code>[+-]?</code></li><li><strong>整数和小数部分</strong>：<ul><li>整数部分：<code>\d*</code></li><li>小数部分：<code>\.\d+</code></li></ul></li><li><strong>指数部分</strong>：<code>e[+-]?\d+</code></li></ol><p>将这些部分组合在一起，我们得到一个正则表达式来匹配JavaScript风格的数字：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="regexp">/^[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;+15&quot;</span>, <span class="string">&quot;1.55&quot;</span>, <span class="string">&quot;.5&quot;</span>, <span class="string">&quot;5.&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;1.3e2&quot;</span>, <span class="string">&quot;1E-4&quot;</span>, <span class="string">&quot;1e+12&quot;</span>]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!number.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Failed to match &#x27;<span class="subst">$&#123;str&#125;</span>&#x27;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> [<span class="string">&quot;1a&quot;</span>, <span class="string">&quot;+-1&quot;</span>, <span class="string">&quot;1.2.3&quot;</span>, <span class="string">&quot;1+1&quot;</span>, <span class="string">&quot;1e4.5&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;.5.&quot;</span>, <span class="string">&quot;1f5&quot;</span>, <span class="string">&quot;.&quot;</span>]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (number.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Incorrectly accepted &#x27;<span class="subst">$&#123;str&#125;</span>&#x27;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li><code>^[+-]?</code>：匹配开头的可选正负号。</li><li><code>(\d+(\.\d*)?|\.\d+)</code>：匹配整数或小数部分。<ul><li><code>\d+(\.\d*)?</code>：匹配整数部分，后面跟着可选的小数部分。例如，<code>123</code>或<code>123.456</code>。</li><li><code>|\.\d+</code>：或者匹配只有小数点和小数部分。例如，<code>.456</code>。</li></ul></li><li><code>([eE][+-]?\d+)?</code>：匹配可选的指数部分。<ul><li><code>[eE]</code>：匹配<code>e</code>或<code>E</code>。</li><li><code>[+-]?</code>：匹配可选的正负号。</li><li><code>\d+</code>：匹配一或多个数字。</li></ul></li><li><code>$</code>：匹配字符串的结尾。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>2024年Android项目实现高德导航</title>
    <link href="https://blog.whff521.xyz/2024/06/21/2024%E5%B9%B4Android%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%BE%B7%E5%AF%BC%E8%88%AA/"/>
    <id>https://blog.whff521.xyz/2024/06/21/2024%E5%B9%B4Android%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%BE%B7%E5%AF%BC%E8%88%AA/</id>
    <published>2024-06-21T06:47:00.000Z</published>
    <updated>2024-06-26T13:31:56.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用高德SDK实现导航功能"><a href="#使用高德SDK实现导航功能" class="headerlink" title="使用高德SDK实现导航功能"></a>使用高德SDK实现导航功能</h1><p><a href="https://blog.csdn.net/weixin_46974030/article/details/134059600">参考博客</a>  </p><p><a href="https://github.com/WHFF521/AMAP-Android-Navigation">Github仓库直达</a>  </p><p>这是今天企业实训的一个小作业，实际上我从昨天就开始尝试申请key然后下载官方Demo开始实验。本来是要做flutter项目，但是高德官方里flutter教程只有显示地图和定位功能，没有导航功能，导航功能官方只有Android的教程。今天也是用Android原生进行编写的。至于怎么整合到flutter项目里目前还不知道。。。</p><h2 id="1-官网下载SDK"><a href="#1-官网下载SDK" class="headerlink" title="1. 官网下载SDK"></a>1. 官网下载SDK</h2><p>我也尝试过直接gradle引入包的操作，但是直接引入的会缺少<code>AmapNaviParams</code>。官网也一直强调有个什么东西开源了所以提供的包里移除了一些东西（不知道到底是什么）。  </p><p><a href="https://lbs.amap.com/api/android-sdk/download">官网SDK下载地址</a>  </p><p>我下载的是导航合包：</p><p><img src="/../images/Android/gaodeSDK.png" alt="SDK">  </p><h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h2><p>直接Android Studio创建一个java，Groovy的项目即可。  </p><p>设置里需要设置生成所有Gradle Task：  </p><p><img src="/../images/Android/openALLTask.png" alt="set generate all tasks">  </p><p>这样你就可以靠点击这里直接获得你项目的SHA1的值，申请key的时候需要这个。</p><p><img src="/../images/Android/signing.png" alt="signing">  </p><p>点击上图位置你就可以在终端看见你的SHA1值。在我这里release和debug的SHA1的值是一样的。  </p><h2 id="3-导入你下载的SDK"><a href="#3-导入你下载的SDK" class="headerlink" title="3. 导入你下载的SDK"></a>3. 导入你下载的SDK</h2><p>在app的<code>build.gradle</code>的<code>dependencies</code>里添加一行<br><code>implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</code>  </p><p>在上方和<code>compileOptions</code>同级的位置添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        jniLibs.srcDirs = [&#x27;libs&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/../images/Android/SouceSet.png" alt="souceSet">  </p><p>同时下载的SDK如图放在app文件夹下的libs文件夹下。</p><p>同步一下即导入完成。</p><h2 id="添加权限和你的KEY"><a href="#添加权限和你的KEY" class="headerlink" title="添加权限和你的KEY"></a>添加权限和你的KEY</h2><p>这里需要在manifest文件里添加一些权限，你的key和一个服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--允许访问网络，必选权限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取粗略位置，若用GPS实现定位小蓝点功能则必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取设备和运营商信息，用于问题排查和网络定位，若无gps但仍需实现定位小蓝点功能则此权限必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取网络状态，用于网络定位，若无gps但仍需实现定位小蓝点功能则此权限必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取wifi网络信息，用于网络定位，若无gps但仍需实现定位小蓝点功能则此权限必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取wifi状态改变，用于网络定位，若无gps但仍需实现定位小蓝点功能则此权限必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许写入扩展存储，用于数据缓存，若无此权限则写到私有目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许读设备等信息，用于问题排查--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许访问网络，必选权限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许读设备等信息，用于问题排查--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取网络状态--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取wifi网络信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许写入扩展存储，用于搜索结果缓存，若无此权限则写到私有目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许读设备等信息，用于问题排查--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后application下添加你的key和一个服务，之后还要用到一个高德自己的activity，这里顺便一起声明了,这些和你的启动Activity是同级的：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;com.amap.api.v2.apikey&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;你的key&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meta-data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;com.amap.api.location.APSService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.amap.api.navi.AmapRouteActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@android:style/Theme.NoTitleBar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">&quot;orientation|keyboardHidden|screenSize|navigation&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="继续之前"><a href="#继续之前" class="headerlink" title="继续之前"></a>继续之前</h2><p>首先你的key应该按照官网已经申请成功了，这里我把我的项目传到github上。如果想要源码请直接跳转下载。</p><p><a href="https://github.com/WHFF521/AMAP-Android-Navigation">我的仓库</a>  </p><h2 id="展示图"><a href="#展示图" class="headerlink" title="展示图"></a>展示图</h2><div style="display: flex;gap: 10px;">  <img src="/images/Android/navi-mainpage.jpg" alt="description" width="300" height="600">  <img src="/images/Android/navigating.jpg" alt="description" width="300" height="600"></div><h2 id="相对于参考博客做的代码替换"><a href="#相对于参考博客做的代码替换" class="headerlink" title="相对于参考博客做的代码替换"></a>相对于参考博客做的代码替换</h2><p>由于有一些APi在最新的SDK中已经失效，这里重点写一下相对于参考博客代码中的不同：</p><p>MainActivity中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (aMap == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        MyLocationStyle myLocationStyle;</span><br><span class="line">        myLocationStyle = <span class="keyword">new</span> <span class="title class_">MyLocationStyle</span>();<span class="comment">//初始化定位蓝点样式类myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE);//连续定位、且将视角移动到地图中心点，定位点依照设备方向旋转，并且会跟随设备移动。（1秒1次定位）如果不设置myLocationType，默认也会执行此种模式。</span></span><br><span class="line">        myLocationStyle.interval(<span class="number">2000</span>); <span class="comment">//设置连续定位模式下的定位间隔，只在连续定位模式下生效，单次定位模式下不会生效。单位为毫秒。</span></span><br><span class="line">        aMap.setMyLocationStyle(myLocationStyle);<span class="comment">//设置定位蓝点的Style</span></span><br><span class="line"><span class="comment">//aMap.getUiSettings().setMyLocationButtonEnabled(true);设置默认定位按钮是否显示，非必需设置。</span></span><br><span class="line">        aMap.setMyLocationEnabled(<span class="literal">true</span>);<span class="comment">// 设置为true表示启动显示定位蓝点，false表示隐藏定位蓝点并不进行定位，默认是false。</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个函数中的MyLocationStyle需要进行替换。</p><p>由于参考博客中并没有完整的代码，你需要在MainActivity中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOCATION_PERMISSION_REQUEST_CODE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>作为这个code的声明和初始化。  </p><p>我在实际编写的时候，Android Studio不能自动import关于manifest的库，会导致申请权限的代码中爆红一片。你需要引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.Manifest;</span><br></pre></td></tr></table></figure><p>其他应该没有什么变化。</p><h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h2><p>这是这个project中的核心文件，其中按钮绑定的跳转函数那里是重点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.btnGotoNavi).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 无起终点启动导航</span></span><br><span class="line">                <span class="type">AmapNaviParams</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AmapNaviParams</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, AmapNaviType.DRIVER, AmapPageType.ROUTE);</span><br><span class="line">                AmapNaviPage.getInstance().showRouteActivity(getApplicationContext(), params, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这里直接跳转到高德包里的一个activity中，可以进行导航等行为，这个是调用<code>AmapRouteActivity</code>，之前已在manifest中声明。当然也可以进行有起终点启动导航。<a href="https://lbs.amap.com/api/android-navi-sdk/guide/navi-component/basic-functions">官网文档</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//起点</span></span><br><span class="line"><span class="type">Poi</span> <span class="variable">start</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Poi</span>(<span class="string">&quot;北京首都机场&quot;</span>, <span class="keyword">new</span> <span class="title class_">LatLng</span>(<span class="number">40.080525</span>,<span class="number">116.603039</span>), <span class="string">&quot;B000A28DAE&quot;</span>);</span><br><span class="line"><span class="comment">//途经点</span></span><br><span class="line">List&lt;Poi&gt; poiList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">poiList.add(<span class="keyword">new</span> <span class="title class_">Poi</span>(<span class="string">&quot;故宫&quot;</span>, <span class="keyword">new</span> <span class="title class_">LatLng</span>(<span class="number">39.918058</span>,<span class="number">116.397026</span>), <span class="string">&quot;B000A8UIN8&quot;</span>));</span><br><span class="line"><span class="comment">//终点</span></span><br><span class="line"><span class="type">Poi</span> <span class="variable">end</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Poi</span>(<span class="string">&quot;北京大学&quot;</span>, <span class="keyword">new</span> <span class="title class_">LatLng</span>(<span class="number">39.941823</span>,<span class="number">116.426319</span>), <span class="string">&quot;B000A816R6&quot;</span>);</span><br><span class="line"><span class="comment">// 组件参数配置</span></span><br><span class="line"><span class="type">AmapNaviParams</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AmapNaviParams</span>(start, poiList, end, AmapNaviType.DRIVER, AmapPageType.ROUTE);  </span><br><span class="line"><span class="comment">// 启动组件</span></span><br><span class="line">AmapNaviPage.getInstance().showRouteActivity(getApplicationContext(), params, <span class="literal">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="记录开发环境和调试手机"><a href="#记录开发环境和调试手机" class="headerlink" title="记录开发环境和调试手机"></a>记录开发环境和调试手机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Android Studio Jellyfish | 2023.3.1 Patch 1</span><br><span class="line">Build #AI-233.14808.21.2331.11842104, built on May 15, 2024</span><br><span class="line">Runtime version: 17.0.10+0-17.0.10b1087.21-11572160 aarch64</span><br><span class="line">VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.</span><br><span class="line">macOS 14.5</span><br><span class="line">GC: G1 Young Generation, G1 Old Generation</span><br><span class="line">Memory: 2048M</span><br><span class="line">Cores: 8</span><br><span class="line">Metal Rendering is ON</span><br><span class="line">Registry:</span><br><span class="line">  ide.experimental.ui=true</span><br><span class="line">Non-Bundled Plugins:</span><br><span class="line">  Dart (233.15271)</span><br><span class="line">  io.flutter (79.0.2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>手机是vivo iqoo，android11。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;使用高德SDK实现导航功能&quot;&gt;&lt;a href=&quot;#使用高德SDK实现导航功能&quot; class=&quot;headerlink&quot; title=&quot;使用高德SDK实现导航功能&quot;&gt;&lt;/a&gt;使用高德SDK实现导航功能&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Android" scheme="https://blog.whff521.xyz/categories/Android/"/>
    
    
    <category term="Android" scheme="https://blog.whff521.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent JavaScript 08 Exercises</title>
    <link href="https://blog.whff521.xyz/2024/06/19/Eloquent-JavaScript-08-Exercises/"/>
    <id>https://blog.whff521.xyz/2024/06/19/Eloquent-JavaScript-08-Exercises/</id>
    <published>2024-06-19T13:10:16.000Z</published>
    <updated>2024-06-19T13:32:44.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><p><a href="https://eloquentjavascript.net/08_error.html">To the book page</a>  </p><h2 id="Retry"><a href="#Retry" class="headerlink" title="Retry"></a>Retry</h2><p>大概率触发MultiplicatorUnitFailure错误，承接直到运行成功并返回结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiplicatorUnitFailure</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">primitiveMultiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MultiplicatorUnitFailure</span>(<span class="string">&quot;Klunk&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reliableMultiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ans = <span class="title function_">primitiveMultiply</span>(a,b);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">      <span class="keyword">if</span>(e <span class="keyword">instanceof</span> <span class="title class_">MultiplicatorUnitFailure</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reliableMultiply</span>(<span class="number">8</span>, <span class="number">8</span>));</span><br><span class="line"><span class="comment">// → 64</span></span><br></pre></td></tr></table></figure><h2 id="The-locked-box"><a href="#The-locked-box" class="headerlink" title="The locked box"></a>The locked box</h2><p>先开锁，不管之后干什么都要在函数执行完毕返回前锁上盒子，因为中间操作可能抛出异常导致后面函数不执行，用finally执行关闭函数即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> <span class="keyword">class</span> &#123;</span><br><span class="line">  locked = <span class="literal">true</span>;</span><br><span class="line">  #content = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">unlock</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">locked</span> = <span class="literal">false</span>; &#125;</span><br><span class="line">  <span class="title function_">lock</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">locked</span> = <span class="literal">true</span>;  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">content</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">locked</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Locked!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withBoxUnlocked</span>(<span class="params">body</span>) &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  box.<span class="title function_">unlock</span>();</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="title function_">body</span>();</span><br><span class="line">  &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    box.<span class="title function_">lock</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">withBoxUnlocked</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  box.<span class="property">content</span>.<span class="title function_">push</span>(<span class="string">&quot;gold piece&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">withBoxUnlocked</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Pirates on the horizon! Abort!&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error raised: &quot;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">locked</span>);</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://eloquentjavascript.net/08_error.html&quot;&gt;To the book</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent JavaScript 07 robot</title>
    <link href="https://blog.whff521.xyz/2024/06/19/Eloquent-JavaScript-07-robot/"/>
    <id>https://blog.whff521.xyz/2024/06/19/Eloquent-JavaScript-07-robot/</id>
    <published>2024-06-19T02:35:47.000Z</published>
    <updated>2024-06-19T03:19:07.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="robot"><a href="#robot" class="headerlink" title="robot"></a>robot</h1><p><a href="https://eloquentjavascript.net/07_robot.html">To the book page</a><br>代码解释由AI生成。  </p><h2 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h2><h3 id="数据结构和图的构建"><a href="#数据结构和图的构建" class="headerlink" title="数据结构和图的构建"></a>数据结构和图的构建</h3><p>首先定义了村庄中各个地点之间的道路：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> roads = [</span><br><span class="line">    <span class="string">&quot;Alice&#x27;s House-Bob&#x27;s House&quot;</span>,   <span class="string">&quot;Alice&#x27;s House-Cabin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Alice&#x27;s House-Post Office&quot;</span>,   <span class="string">&quot;Bob&#x27;s House-Town Hall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Daria&#x27;s House-Ernie&#x27;s House&quot;</span>, <span class="string">&quot;Daria&#x27;s House-Town Hall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Ernie&#x27;s House-Grete&#x27;s House&quot;</span>, <span class="string">&quot;Grete&#x27;s House-Farm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Grete&#x27;s House-Shop&quot;</span>,          <span class="string">&quot;Marketplace-Farm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Marketplace-Post Office&quot;</span>,     <span class="string">&quot;Marketplace-Shop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Marketplace-Town Hall&quot;</span>,       <span class="string">&quot;Shop-Town Hall&quot;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>接着，定义 <code>buildGraph</code> 函数来构建图：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildGraph</span>(<span class="params">edges</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> graph = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>); <span class="comment">// 创建一个空对象作为图</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addEdge</span>(<span class="params"><span class="keyword">from</span>, to</span>) &#123; <span class="comment">// 定义一个添加边的函数</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">from</span> <span class="keyword">in</span> graph) &#123;</span><br><span class="line">        graph[<span class="keyword">from</span>].<span class="title function_">push</span>(to); <span class="comment">// 如果节点已经存在，直接添加边</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        graph[<span class="keyword">from</span>] = [to]; <span class="comment">// 如果节点不存在，创建新数组并添加边</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [<span class="keyword">from</span>, to] <span class="keyword">of</span> edges.<span class="title function_">map</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>))) &#123;</span><br><span class="line">      <span class="title function_">addEdge</span>(<span class="keyword">from</span>, to); <span class="comment">// 添加双向边</span></span><br><span class="line">      <span class="title function_">addEdge</span>(to, <span class="keyword">from</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> graph; <span class="comment">// 返回构建好的图</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> roadGraph = <span class="title function_">buildGraph</span>(roads);</span><br></pre></td></tr></table></figure><h3 id="村庄状态类"><a href="#村庄状态类" class="headerlink" title="村庄状态类"></a>村庄状态类</h3><p><code>VillageState</code> 类表示村庄的状态，包括机器人的位置和包裹的位置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VillageState</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">place, parcels</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">place</span> = place; <span class="comment">// 机器人当前所在的位置</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">parcels</span> = parcels; <span class="comment">// 包裹列表，每个包裹有一个位置和目标地址</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="title function_">move</span>(<span class="params">destination</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!roadGraph[<span class="variable language_">this</span>.<span class="property">place</span>].<span class="title function_">includes</span>(destination)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// 如果目的地不在当前地点的邻居中，返回当前状态</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> parcels = <span class="variable language_">this</span>.<span class="property">parcels</span>.<span class="title function_">map</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (p.<span class="property">place</span> != <span class="variable language_">this</span>.<span class="property">place</span>) <span class="keyword">return</span> p; <span class="comment">// 如果包裹不在当前位置，不做改变</span></span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">place</span>: destination, <span class="attr">address</span>: p.<span class="property">address</span>&#125;; <span class="comment">// 否则将包裹移动到目的地</span></span><br><span class="line">        &#125;).<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">place</span> != p.<span class="property">address</span>); <span class="comment">// 过滤掉已送达的包裹</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VillageState</span>(destination, parcels); <span class="comment">// 返回新的村庄状态</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行机器人"><a href="#运行机器人" class="headerlink" title="运行机器人"></a>运行机器人</h3><p><code>runRobot</code> 函数模拟机器人运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runRobot</span>(<span class="params">state, robot, memory</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> turn = <span class="number">0</span>;; turn++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (state.<span class="property">parcels</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 如果所有包裹都已送达，结束循环</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> action = <span class="title function_">robot</span>(state, memory); <span class="comment">// 调用机器人函数，获取下一步动作</span></span><br><span class="line">      state = state.<span class="title function_">move</span>(action.<span class="property">direction</span>); <span class="comment">// 移动到下一步位置</span></span><br><span class="line">      memory = action.<span class="property">memory</span>; <span class="comment">// 更新机器人的记忆</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> turn; <span class="comment">// 返回所用的回合数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机机器人"><a href="#随机机器人" class="headerlink" title="随机机器人"></a>随机机器人</h3><p><code>randomRobot</code> 随机选择一个方向移动：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">randomPick</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> choice = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * array.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> array[choice]; <span class="comment">// 从数组中随机选择一个元素</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomRobot</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">direction</span>: <span class="title function_">randomPick</span>(roadGraph[state.<span class="property">place</span>])&#125;; <span class="comment">// 随机选择一个邻居方向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预定义路径机器人"><a href="#预定义路径机器人" class="headerlink" title="预定义路径机器人"></a>预定义路径机器人</h3><p><code>routeRobot</code> 按照预定义的路径移动：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mailRoute = [</span><br><span class="line">    <span class="string">&quot;Alice&#x27;s House&quot;</span>, <span class="string">&quot;Cabin&quot;</span>, <span class="string">&quot;Alice&#x27;s House&quot;</span>, <span class="string">&quot;Bob&#x27;s House&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Town Hall&quot;</span>, <span class="string">&quot;Daria&#x27;s House&quot;</span>, <span class="string">&quot;Ernie&#x27;s House&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Grete&#x27;s House&quot;</span>, <span class="string">&quot;Shop&quot;</span>, <span class="string">&quot;Grete&#x27;s House&quot;</span>, <span class="string">&quot;Farm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Marketplace&quot;</span>, <span class="string">&quot;Post Office&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">routeRobot</span>(<span class="params">state, memory</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (memory.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      memory = mailRoute; <span class="comment">// 如果记忆为空，初始化为预定义路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">direction</span>: memory[<span class="number">0</span>], <span class="attr">memory</span>: memory.<span class="title function_">slice</span>(<span class="number">1</span>)&#125;; <span class="comment">// 按照路径顺序移动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目标导向机器人"><a href="#目标导向机器人" class="headerlink" title="目标导向机器人"></a>目标导向机器人</h3><p><code>goalOrientedRobot</code> 根据包裹的位置和目标地址找到最佳路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findRoute</span>(<span class="params">graph, <span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> work = [&#123;<span class="attr">at</span>: <span class="keyword">from</span>, <span class="attr">route</span>: []&#125;];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; work.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;at, route&#125; = work[i];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> place <span class="keyword">of</span> graph[at]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (place == to) <span class="keyword">return</span> route.<span class="title function_">concat</span>(place); <span class="comment">// 找到目标地点，返回路径</span></span><br><span class="line">        <span class="keyword">if</span> (!work.<span class="title function_">some</span>(<span class="function"><span class="params">w</span> =&gt;</span> w.<span class="property">at</span> == place)) &#123;</span><br><span class="line">          work.<span class="title function_">push</span>(&#123;<span class="attr">at</span>: place, <span class="attr">route</span>: route.<span class="title function_">concat</span>(place)&#125;); <span class="comment">// 将新的位置加入工作队列</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">goalOrientedRobot</span>(<span class="params">&#123;place, parcels&#125;, route</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> parcel = parcels[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (parcel.<span class="property">place</span> != place) &#123;</span><br><span class="line">        route = <span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">place</span>); <span class="comment">// 找到包裹位置的路径</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        route = <span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">address</span>); <span class="comment">// 找到包裹目标地址的路径</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">direction</span>: route[<span class="number">0</span>], <span class="attr">memory</span>: route.<span class="title function_">slice</span>(<span class="number">1</span>)&#125;; <span class="comment">// 返回下一步方向和剩余路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效率机器人"><a href="#效率机器人" class="headerlink" title="效率机器人"></a>效率机器人</h3><p><code>efficientRobot</code> 根据所有包裹找到最短路径，以提高效率：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">efficientRobot</span>(<span class="params">&#123;place, parcels&#125;, route</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> routes = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> parcel <span class="keyword">of</span> parcels) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parcel.<span class="property">place</span> != place) &#123;</span><br><span class="line">            routes.<span class="title function_">push</span>(<span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">place</span>)); <span class="comment">// 找到包裹位置的路径</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            routes.<span class="title function_">push</span>(<span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">address</span>)); <span class="comment">// 找到包裹目标地址的路径</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        route = routes.<span class="title function_">reduce</span>(<span class="function">(<span class="params">shortest, current</span>) =&gt;</span> </span><br><span class="line">        shortest.<span class="property">length</span> &lt; current.<span class="property">length</span> ? shortest : current <span class="comment">// 选择最短路径</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">direction</span>: route[<span class="number">0</span>], <span class="attr">memory</span>: route.<span class="title function_">slice</span>(<span class="number">1</span>)&#125;; <span class="comment">// 返回下一步方向和剩余路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="机器人比较"><a href="#机器人比较" class="headerlink" title="机器人比较"></a>机器人比较</h3><p><code>compareRobots</code> 用于比较两个机器人的性能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compareRobots</span>(<span class="params">robot1, memory1, robot2, memory2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> totalTurns1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> totalTurns2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> state = <span class="title class_">VillageState</span>.<span class="title function_">random</span>(); <span class="comment">// 随机生成初始状态</span></span><br><span class="line">      totalTurns1 += <span class="title function_">runRobot</span>(state, robot1, memory1); <span class="comment">// 运行第一个机器人</span></span><br><span class="line">      totalTurns2 += <span class="title function_">runRobot</span>(state, robot2, memory2); <span class="comment">// 运行第二个机器人</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Robot 1 average turns: <span class="subst">$&#123;totalTurns1 / <span class="number">100</span>&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Robot 2 average turns: <span class="subst">$&#123;totalTurns2 / <span class="number">100</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，比较目标导向机器人和效率机器人的表现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">compareRobots</span>(goalOrientedRobot, [], efficientRobot, []);</span><br></pre></td></tr></table></figure><p>这段代码会运行两个机器人各100次，比较它们完成任务所需的平均回合数。</p><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><h3 id="Measuring-a-robot"><a href="#Measuring-a-robot" class="headerlink" title="Measuring a robot"></a>Measuring a robot</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行机器人并计算所需回合数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runRobotCount</span>(<span class="params">state, robot, memory</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> turn = <span class="number">0</span>;; turn++) &#123; <span class="comment">// 从0开始记录回合数</span></span><br><span class="line">    <span class="keyword">if</span> (state.<span class="property">parcels</span>.<span class="property">length</span> == <span class="number">0</span>) &#123; <span class="comment">// 如果所有包裹都已送达</span></span><br><span class="line">      <span class="keyword">return</span> turn; <span class="comment">// 返回总回合数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> action = <span class="title function_">robot</span>(state, memory); <span class="comment">// 获取机器人下一步的动作</span></span><br><span class="line">    state = state.<span class="title function_">move</span>(action.<span class="property">direction</span>); <span class="comment">// 根据机器人的指示移动</span></span><br><span class="line">    memory = action.<span class="property">memory</span>; <span class="comment">// 更新机器人的记忆</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较两个机器人的表现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compareRobots</span>(<span class="params">robot1, memory1, robot2, memory2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> totalTurns1 = <span class="number">0</span>, totalTurns2 = <span class="number">0</span>; <span class="comment">// 初始化两个机器人所用的总回合数</span></span><br><span class="line">  <span class="keyword">let</span> tasks = <span class="number">100</span>; <span class="comment">// 设置任务数量为100</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tasks; i++) &#123; <span class="comment">// 循环运行100次</span></span><br><span class="line">    <span class="keyword">let</span> state = <span class="title class_">VillageState</span>.<span class="title function_">random</span>(); <span class="comment">// 随机生成初始状态</span></span><br><span class="line">    totalTurns1 += <span class="title function_">runRobotCount</span>(state, robot1, memory1); <span class="comment">// 运行第一个机器人并累计回合数</span></span><br><span class="line">    totalTurns2 += <span class="title function_">runRobotCount</span>(state, robot2, memory2); <span class="comment">// 运行第二个机器人并累计回合数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出每个机器人完成任务所需的平均回合数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Robot 1 averaged <span class="subst">$&#123;totalTurns1 / tasks&#125;</span> turns per task`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Robot 2 averaged <span class="subst">$&#123;totalTurns2 / tasks&#125;</span> turns per task`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较预定义路径机器人和目标导向机器人的表现</span></span><br><span class="line"><span class="title function_">compareRobots</span>(routeRobot, [], goalOrientedRobot, []);</span><br></pre></td></tr></table></figure><h3 id="Robot-efficiency"><a href="#Robot-efficiency" class="headerlink" title="Robot efficiency"></a>Robot efficiency</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到从起点到多个目标中最短的路线</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findShortestRoute</span>(<span class="params">graph, <span class="keyword">from</span>, goals</span>) &#123;</span><br><span class="line">  <span class="comment">// 对每个目标调用 findRoute 函数，返回所有路径</span></span><br><span class="line">  <span class="keyword">let</span> routes = goals.<span class="title function_">map</span>(<span class="function"><span class="params">goal</span> =&gt;</span> <span class="title function_">findRoute</span>(graph, <span class="keyword">from</span>, goal));</span><br><span class="line">  <span class="comment">// 通过 reduce 方法找到最短的路径</span></span><br><span class="line">  <span class="keyword">return</span> routes.<span class="title function_">reduce</span>(<span class="function">(<span class="params">shortest, current</span>) =&gt;</span> </span><br><span class="line">    shortest.<span class="property">length</span> &lt; current.<span class="property">length</span> ? shortest : current</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高效机器人，选择最优路径来传递包裹</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">efficientRobot</span>(<span class="params">&#123;place, parcels&#125;, route</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (route.<span class="property">length</span> == <span class="number">0</span>) &#123; <span class="comment">// 如果当前没有预定的路径</span></span><br><span class="line">    <span class="keyword">let</span> routes = []; <span class="comment">// 存储所有可能的路径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> parcel <span class="keyword">of</span> parcels) &#123; <span class="comment">// 遍历每个包裹</span></span><br><span class="line">      <span class="keyword">if</span> (parcel.<span class="property">place</span> != place) &#123;</span><br><span class="line">        <span class="comment">// 如果包裹还没被捡起，找到去包裹位置的路径</span></span><br><span class="line">        routes.<span class="title function_">push</span>(<span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">place</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果包裹已捡起，找到去目标地址的路径</span></span><br><span class="line">        routes.<span class="title function_">push</span>(<span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">address</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选择所有路径中最短的一条</span></span><br><span class="line">    route = routes.<span class="title function_">reduce</span>(<span class="function">(<span class="params">shortest, current</span>) =&gt;</span> </span><br><span class="line">      shortest.<span class="property">length</span> &lt; current.<span class="property">length</span> ? shortest : current</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回机器人下一步的方向和更新后的记忆</span></span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">direction</span>: route[<span class="number">0</span>], <span class="attr">memory</span>: route.<span class="title function_">slice</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runRobotAnimation</span>(<span class="title class_">VillageState</span>.<span class="title function_">random</span>(), efficientRobot, []);</span><br></pre></td></tr></table></figure><h3 id="Persistent-group"><a href="#Persistent-group" class="headerlink" title="Persistent group"></a>Persistent group</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PGroup</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">members</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = members; <span class="comment">// 初始化成员列表</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加新成员</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">has</span>(value)) <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// 如果成员已经存在，返回当前对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PGroup</span>(<span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">concat</span>(value)); <span class="comment">// 否则，创建新对象并添加新成员</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除成员</span></span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">has</span>(value)) <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// 如果成员不存在，返回当前对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PGroup</span>(<span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">m</span> =&gt;</span> m !== value)); <span class="comment">// 否则，创建新对象并删除指定成员</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查成员是否存在</span></span><br><span class="line">  <span class="title function_">has</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">includes</span>(value); <span class="comment">// 返回成员是否在列表中</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个静态属性，表示一个空的 PGroup 实例</span></span><br><span class="line">  <span class="keyword">static</span> empty = <span class="keyword">new</span> <span class="title class_">PGroup</span>([]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试实现</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">PGroup</span>.<span class="property">empty</span>.<span class="title function_">add</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// 向空组添加 &#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">let</span> ab = a.<span class="title function_">add</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">// 向包含 &#x27;a&#x27; 的组添加 &#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">let</span> b = ab.<span class="title function_">delete</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// 从包含 &#x27;a&#x27; 和 &#x27;b&#x27; 的组删除 &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">has</span>(<span class="string">&quot;b&quot;</span>)); <span class="comment">// → true  检查 &#x27;b&#x27; 是否存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">has</span>(<span class="string">&quot;b&quot;</span>)); <span class="comment">// → false 检查 &#x27;b&#x27; 是否存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">has</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// → false 检查 &#x27;a&#x27; 是否存在</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;robot&quot;&gt;&lt;a href=&quot;#robot&quot; class=&quot;headerlink&quot; title=&quot;robot&quot;&gt;&lt;/a&gt;robot&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://eloquentjavascript.net/07_robot.html&quot;&gt;To</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent JavaScript 06 Exercises</title>
    <link href="https://blog.whff521.xyz/2024/06/17/Eloquent-JavaScript-06-Exercises/"/>
    <id>https://blog.whff521.xyz/2024/06/17/Eloquent-JavaScript-06-Exercises/</id>
    <published>2024-06-17T15:16:28.000Z</published>
    <updated>2024-06-17T15:58:04.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p><a href="https://eloquentjavascript.net/06_object.html">To the book page</a>  </p><h2 id="A-vector-type"><a href="#A-vector-type" class="headerlink" title="A vector type"></a>A vector type</h2><p>封装一个类，实现坐标的加减法，以及get属性的length返回坐标离原点的距离。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vec</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">plus</span>(<span class="params">other</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="variable language_">this</span>.<span class="property">x</span>+other.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>+other.<span class="property">y</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">minus</span>(<span class="params">other</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="variable language_">this</span>.<span class="property">x</span>-other.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>-other.<span class="property">y</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">length</span>()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable language_">this</span>.<span class="property">x</span>**<span class="number">2</span>+<span class="variable language_">this</span>.<span class="property">y</span>**<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">1</span>, <span class="number">2</span>).<span class="title function_">plus</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">2</span>, <span class="number">3</span>)));</span><br><span class="line"><span class="comment">// → Vec&#123;x: 3, y: 5&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">1</span>, <span class="number">2</span>).<span class="title function_">minus</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">2</span>, <span class="number">3</span>)));</span><br><span class="line"><span class="comment">// → Vec&#123;x: -1, y: -1&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">3</span>, <span class="number">4</span>).<span class="property">length</span>);</span><br><span class="line"><span class="comment">// → 5</span></span><br></pre></td></tr></table></figure><h2 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h2><p>封装一个Group类，实现相当于Set的功能。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span> &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = [];  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">value</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="title function_">has</span>(value))&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">push</span>(value);  </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">member</span> =&gt;</span> member!==value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">has</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">includes</span>(value);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">from</span>(<span class="params">iterable</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> group = <span class="keyword">new</span> <span class="title class_">Group</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> iterable)&#123;</span><br><span class="line">      group.<span class="title function_">add</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> group;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> group = <span class="title class_">Group</span>.<span class="title function_">from</span>([<span class="number">10</span>, <span class="number">20</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(group.<span class="title function_">has</span>(<span class="number">10</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(group.<span class="title function_">has</span>(<span class="number">30</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line">group.<span class="title function_">add</span>(<span class="number">10</span>);</span><br><span class="line">group.<span class="title function_">delete</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(group.<span class="title function_">has</span>(<span class="number">10</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br></pre></td></tr></table></figure><h2 id="Iterable-groups"><a href="#Iterable-groups" class="headerlink" title="Iterable groups"></a>Iterable groups</h2><p>让上面的数组类可迭代。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Your code here (and the code from the previous exercise)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span> &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = [];  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">value</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="title function_">has</span>(value))&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">push</span>(value);  </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">member</span> =&gt;</span> member!==value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">has</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">includes</span>(value);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">from</span>(<span class="params">iterable</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> group = <span class="keyword">new</span> <span class="title class_">Group</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> iterable)&#123;</span><br><span class="line">      group.<span class="title function_">add</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> group;</span><br><span class="line">  &#125;</span><br><span class="line">   [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">     <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">let</span> members = <span class="variable language_">this</span>.<span class="property">members</span>;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(index &lt; members.<span class="property">length</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;<span class="attr">value</span>:members[index++],<span class="attr">done</span>:<span class="literal">false</span>&#125;;</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="title class_">Group</span>.<span class="title function_">from</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>])) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → a</span></span><br><span class="line"><span class="comment">// → b</span></span><br><span class="line"><span class="comment">// → c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://eloquentjavascript.net/06_object.html&quot;&gt;To the book</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
</feed>
