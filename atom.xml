<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AiRomance</title>
  <icon>https://blog.whff521.xyz/images/101.ico</icon>
  <subtitle>爱裸漫三三</subtitle>
  <link href="https://blog.whff521.xyz/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://blog.whff521.xyz/"/>
  <updated>2024-10-30T15:07:17.374Z</updated>
  <id>https://blog.whff521.xyz/</id>
  
  <author>
    <name>AiRomance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>并查集</title>
    <link href="https://blog.whff521.xyz/2024/10/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>https://blog.whff521.xyz/2024/10/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2024-10-30T14:25:58.000Z</published>
    <updated>2024-10-30T15:07:17.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p><strong>并查集</strong>（Disjoint Set Union, DSU）是一种数据结构，用于处理<strong>不相交集合</strong>（disjoint sets）的合并（union）和查询（find）操作。并查集特别适用于动态连通性问题，例如判断两个元素是否在同一个集合中或合并两个集合。广泛应用在图论算法中，比如 Kruskal 最小生成树算法。</p><h3 id="并查集的概念"><a href="#并查集的概念" class="headerlink" title="并查集的概念"></a>并查集的概念</h3><p>并查集主要支持两个操作：</p><ol><li><strong>查找（Find）</strong>：确定元素所属的集合。通常返回集合的“代表元素”。</li><li><strong>合并（Union）</strong>：将两个集合合并成一个集合。</li></ol><p>并查集使用<strong>树结构</strong>来表示集合，每个集合中的元素都指向一个根节点，根节点代表该集合。为优化效率，通常使用以下两种技术：</p><ul><li><strong>路径压缩（Path Compression）</strong>：在查找操作中，将树的高度降低，使得查找的时间复杂度接近常数。</li><li><strong>按秩合并（Union by Rank）</strong>：在合并操作中，将较小的树合并到较大的树上，避免树变得过于深。</li></ul><h3 id="并查集的性质"><a href="#并查集的性质" class="headerlink" title="并查集的性质"></a>并查集的性质</h3><ol><li><strong>时间复杂度</strong>：使用路径压缩和按秩合并的并查集可以将单次操作的平均时间复杂度优化到几乎为常数，接近 $O(\alpha(n))$ ，其中 $(\alpha)$ 是阿克曼函数的逆，非常接近常数。</li><li><strong>空间复杂度</strong>：并查集使用 (O(n)) 的空间，其中 (n) 为元素个数。</li></ol><h3 id="并查集的-C-实现"><a href="#并查集的-C-实现" class="headerlink" title="并查集的 C++ 实现"></a>并查集的 C++ 实现</h3><p>以下是并查集的标准实现代码，包含路径压缩和按秩合并优化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DisjointSet</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;  <span class="comment">// 存储每个节点的父节点</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; rank;    <span class="comment">// 存储树的高度（秩）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 初始化并查集</span></span><br><span class="line">    <span class="built_in">DisjointSet</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        parent.<span class="built_in">resize</span>(n);</span><br><span class="line">        rank.<span class="built_in">resize</span>(n, <span class="number">0</span>);  <span class="comment">// 初始秩为 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;  <span class="comment">// 每个节点的父节点初始化为自己</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找操作，带路径压缩</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) &#123;</span><br><span class="line">            parent[x] = <span class="built_in">find</span>(parent[x]);  <span class="comment">// 递归查找并路径压缩</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并操作，按秩合并</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unionSets</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rootX = <span class="built_in">find</span>(x);</span><br><span class="line">        <span class="type">int</span> rootY = <span class="built_in">find</span>(y);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rootX != rootY) &#123;</span><br><span class="line">            <span class="comment">// 将秩低的树合并到秩高的树上</span></span><br><span class="line">            <span class="keyword">if</span> (rank[rootX] &gt; rank[rootY]) &#123;</span><br><span class="line">                parent[rootY] = rootX;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[rootX] &lt; rank[rootY]) &#123;</span><br><span class="line">                parent[rootX] = rootY;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent[rootY] = rootX;</span><br><span class="line">                rank[rootX]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查两个元素是否在同一个集合中</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isConnected</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">DisjointSet <span class="title">ds</span><span class="params">(<span class="number">10</span>)</span></span>;  <span class="comment">// 创建包含10个元素的并查集</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并一些集合</span></span><br><span class="line">    ds.<span class="built_in">unionSets</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    ds.<span class="built_in">unionSets</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    ds.<span class="built_in">unionSets</span>(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    ds.<span class="built_in">unionSets</span>(<span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询集合连接情况</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Is 1 connected to 3? &quot;</span> &lt;&lt; (ds.<span class="built_in">isConnected</span>(<span class="number">1</span>, <span class="number">3</span>) ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Is 1 connected to 4? &quot;</span> &lt;&lt; (ds.<span class="built_in">isConnected</span>(<span class="number">1</span>, <span class="number">4</span>) ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并更多集合</span></span><br><span class="line">    ds.<span class="built_in">unionSets</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Is 1 connected to 5 after union? &quot;</span> &lt;&lt; (ds.<span class="built_in">isConnected</span>(<span class="number">1</span>, <span class="number">5</span>) ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><p><strong>初始化</strong>：</p><ul><li><code>parent</code> 数组存储每个节点的父节点，初始时每个节点的父节点是自己，表示每个元素独立的集合。</li><li><code>rank</code> 数组存储每个集合的秩，初始为 <code>0</code>。</li></ul></li><li><p><strong>查找操作 <code>find</code></strong>：</p><ul><li>通过递归查找，找到元素所属集合的根节点，并进行路径压缩，将路径上的所有节点直接连接到根节点。</li><li>路径压缩可以减少后续查找操作的时间复杂度。</li></ul></li><li><p><strong>合并操作 <code>unionSets</code></strong>：</p><ul><li>先找到两个元素所属集合的根节点，通过秩大小决定合并方向。</li><li>将低秩的集合合并到高秩集合上，以保持树的高度较低；如果秩相同，将任意一个根连接到另一个根，同时增加连接根的秩。</li></ul></li><li><p><strong>连接检查 <code>isConnected</code></strong>：</p><ul><li>检查两个元素是否属于同一集合，如果根节点相同则属于同一集合。</li></ul></li></ol><h3 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h3><p>假设输入是如上代码中的操作，输出将如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Is 1 connected to 3? Yes</span><br><span class="line">Is 1 connected to 4? No</span><br><span class="line">Is 1 connected to 5 after union? Yes</span><br></pre></td></tr></table></figure><p>通过路径压缩和按秩合并优化后的并查集，能够高效地支持合并和查找操作。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;并查集&lt;/strong&gt;（Disjoint Set Union,</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://blog.whff521.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="并查集" scheme="https://blog.whff521.xyz/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="https://blog.whff521.xyz/2024/10/30/%E6%A0%91/"/>
    <id>https://blog.whff521.xyz/2024/10/30/%E6%A0%91/</id>
    <published>2024-10-30T09:00:01.000Z</published>
    <updated>2024-10-30T14:23:54.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>在数据结构中，<strong>树</strong>（Tree）是一种分层的非线性数据结构，它由节点（node）和边（edge）组成，并且具有以下性质：</p><h2 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h2><ol><li><strong>节点和边</strong>：树包含一组节点，通过边连接，节点之间呈现出层级关系。</li><li><strong>根节点</strong>：树的起始节点称为根节点（root），通常位于树的顶端。</li><li><strong>父节点和子节点</strong>：每个节点可以连接其他节点，称为子节点（children）；连接它们的节点称为父节点（parent）。</li><li><strong>叶子节点</strong>：没有子节点的节点称为叶子节点（leaf）。</li><li><strong>层级</strong>：树的每一层从根节点开始，按层级关系排列。</li><li><strong>路径</strong>：节点之间的路径由节点和边组成，从根节点到某个特定节点的路径是节点之间的唯一路径。</li></ol><h2 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h2><ol><li><strong>唯一根节点</strong>：树中只有一个根节点，没有父节点。</li><li><strong>节点数量关系</strong>：有 ( n ) 个节点的树，边的数量为 ( n - 1 )。</li><li><strong>层次性</strong>：树具有层次结构，自上而下逐级分层。</li><li><strong>无回路性</strong>：树中不存在回路，任何两个节点之间只有唯一一条路径。</li><li><strong>连通性</strong>：树是一个连通的无向图，从根节点可以到达所有节点。</li></ol><h2 id="特殊类型的树"><a href="#特殊类型的树" class="headerlink" title="特殊类型的树"></a>特殊类型的树</h2><ul><li><strong>二叉树</strong>：每个节点最多只有两个子节点的树。</li><li><strong>完全二叉树</strong>：除最后一层外，所有层的节点数都达到最大值，且最后一层节点从左到右连续排列。</li><li><strong>平衡二叉树</strong>：任意节点的左右子树高度差不超过一定值（如 AVL 树）。</li><li><strong>二叉搜索树（BST）</strong>：左子节点的值小于根节点，右子节点的值大于根节点，便于快速查找。</li></ul><p>好的，这里是考试大纲所涉及的二叉树和树的基本概念、性质和C++的实现示例：</p><h2 id="二叉树的概念、性质和实现"><a href="#二叉树的概念、性质和实现" class="headerlink" title="二叉树的概念、性质和实现"></a>二叉树的概念、性质和实现</h2><p><strong>二叉树</strong>是每个节点最多有两个子节点的树结构。每个节点的子节点通常被称为左子节点和右子节点。</p><p><strong>性质</strong>：</p><ol><li>二叉树的第 (i) 层最多有 (2^{i-1}) 个节点。</li><li>高度为 (h) 的二叉树最多有 (2^h - 1) 个节点。</li><li>完全二叉树和满二叉树是特殊的二叉树。</li></ol><p><strong>实现</strong>（链式存储）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入节点示例</span></span><br><span class="line"><span class="function">TreeNode* <span class="title">insert</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">    <span class="keyword">if</span> (val &lt; root-&gt;val) root-&gt;left = <span class="built_in">insert</span>(root-&gt;left, val);</span><br><span class="line">    <span class="keyword">else</span> root-&gt;right = <span class="built_in">insert</span>(root-&gt;right, val);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二叉树的顺序存储结构和链式存储结构"><a href="#二叉树的顺序存储结构和链式存储结构" class="headerlink" title="二叉树的顺序存储结构和链式存储结构"></a>二叉树的顺序存储结构和链式存储结构</h2><p><strong>顺序存储结构</strong>：顺序存储通常使用数组存储完全二叉树。第 (i) 个节点的左子节点在 (2i+1)，右子节点在 (2i+2)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> binaryTree[<span class="number">100</span>];  <span class="comment">// 顺序存储二叉树的数组表示</span></span><br></pre></td></tr></table></figure></p><p><strong>链式存储结构</strong>：链式存储用指针实现更灵活，适用于非完全二叉树。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h2><p><strong>前序遍历</strong>、<strong>中序遍历</strong>、<strong>后序遍历</strong>和<strong>层序遍历</strong>是常见的二叉树遍历方式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序遍历 (根 -&gt; 左 -&gt; 右)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        cout &lt;&lt; root-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历 (左 -&gt; 根 -&gt; 右)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left);</span><br><span class="line">        cout &lt;&lt; root-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历 (左 -&gt; 右 -&gt; 根)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postorder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        <span class="built_in">postorder</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">postorder</span>(root-&gt;right);</span><br><span class="line">        cout &lt;&lt; root-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树和森林的存储结构、遍历"><a href="#树和森林的存储结构、遍历" class="headerlink" title="树和森林的存储结构、遍历"></a>树和森林的存储结构、遍历</h2><p><strong>树的存储</strong>：一般用链式结构存储树（多叉树），每个节点指向多个子节点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    vector&lt;TreeNode*&gt; children;  <span class="comment">// 每个节点可以有多个子节点</span></span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>森林的概念</strong>：森林是一组互不相交的树的集合。常用递归将森林表示为一棵树，每棵树的根节点作为链式存储的下一节点。</p><p><strong>遍历森林</strong>：可以通过先序、后序等遍历方式实现，每个子树递归遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">traverseForest</span><span class="params">(<span class="type">const</span> vector&lt;TreeNode*&gt;&amp; forest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode* tree : forest) &#123;</span><br><span class="line">        <span class="built_in">preorder</span>(tree);  <span class="comment">// 遍历每棵树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆与优先队列"><a href="#堆与优先队列" class="headerlink" title="堆与优先队列"></a>堆与优先队列</h2><p><strong>堆</strong>是一种特殊的二叉树，是完全二叉树的一种。堆有两种常见的类型：<strong>最大堆</strong>和<strong>最小堆</strong>。</p><ul><li><strong>最大堆</strong>：每个父节点的值都大于等于其子节点的值，根节点是堆中最大的元素。</li><li><strong>最小堆</strong>：每个父节点的值都小于等于其子节点的值，根节点是堆中最小的元素。</li></ul><h3 id="堆的性质"><a href="#堆的性质" class="headerlink" title="堆的性质"></a>堆的性质</h3><ol><li><strong>完全二叉树</strong>：堆使用完全二叉树的结构，因此适合用数组表示。</li><li><strong>节点关系</strong>：在堆的数组表示中，对于第 <code>i</code> 个节点：<ul><li>父节点位置为 <code>(i-1)/2</code>。</li><li>左子节点位置为 <code>2i+1</code>。</li><li>右子节点位置为 <code>2i+2</code>。</li></ul></li></ol><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p><strong>优先队列</strong>是一种基于堆的数据结构，可以快速访问和删除优先级最高（或最低）的元素。在 C++ 中，标准库提供了 <code>priority_queue</code>，其默认实现为最大堆。</p><h4 id="最大堆"><a href="#最大堆" class="headerlink" title="最大堆"></a>最大堆</h4><p>以下是一个最大堆的简单实现，包括插入和删除最大值的操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxHeap</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; heap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">heapifyUp</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> parent = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (heap[index] &gt; heap[parent]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(heap[index], heap[parent]);</span><br><span class="line">                index = parent;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">heapifyDown</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = heap.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * index + <span class="number">1</span> &lt; size) &#123;</span><br><span class="line">            <span class="type">int</span> leftChild = <span class="number">2</span> * index + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> rightChild = <span class="number">2</span> * index + <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> largerChild = leftChild;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rightChild &lt; size &amp;&amp; heap[rightChild] &gt; heap[leftChild]) &#123;</span><br><span class="line">                largerChild = rightChild;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (heap[index] &lt; heap[largerChild]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(heap[index], heap[largerChild]);</span><br><span class="line">                index = largerChild;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        heap.<span class="built_in">push_back</span>(val);</span><br><span class="line">        <span class="built_in">heapifyUp</span>(heap.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">extractMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heap.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> maxVal = heap[<span class="number">0</span>];</span><br><span class="line">        heap[<span class="number">0</span>] = heap.<span class="built_in">back</span>();</span><br><span class="line">        heap.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="built_in">heapifyDown</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> maxVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heap.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MaxHeap heap;</span><br><span class="line">    heap.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    heap.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    heap.<span class="built_in">insert</span>(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Extracted Max: &quot;</span> &lt;&lt; heap.<span class="built_in">extractMax</span>() &lt;&lt; endl;  <span class="comment">// 输出 20</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Extracted Max: &quot;</span> &lt;&lt; heap.<span class="built_in">extractMax</span>() &lt;&lt; endl;  <span class="comment">// 输出 15</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Extracted Max: &quot;</span> &lt;&lt; heap.<span class="built_in">extractMax</span>() &lt;&lt; endl;  <span class="comment">// 输出 10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优先队列的实现（C-标准库）"><a href="#优先队列的实现（C-标准库）" class="headerlink" title="优先队列的实现（C++ 标准库）"></a>优先队列的实现（C++ 标准库）</h4><p>C++ STL 提供了 <code>priority_queue</code>，默认是最大堆，但可以通过传递自定义比较器来实现最小堆。</p><p>好的，以下是一个直接实现的<strong>优先队列</strong>，不依赖 C++ 标准模板库（STL）。我们将使用<strong>最大堆</strong>的方式来实现优先队列，可以快速地获取最大值并进行插入和删除操作。最小堆的实现方式类似，只需调整比较逻辑。</p><h4 id="基于最大堆的优先队列实现"><a href="#基于最大堆的优先队列实现" class="headerlink" title="基于最大堆的优先队列实现"></a>基于最大堆的优先队列实现</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PriorityQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; heap; <span class="comment">// 使用数组来表示堆</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上浮操作，用于插入元素后调整堆</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">heapifyUp</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> parent = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (heap[index] &gt; heap[parent]) &#123; <span class="comment">// 如果当前节点大于父节点，交换位置</span></span><br><span class="line">                <span class="built_in">swap</span>(heap[index], heap[parent]);</span><br><span class="line">                index = parent; <span class="comment">// 更新当前节点为父节点位置</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下沉操作，用于删除元素后调整堆</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">heapifyDown</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = heap.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * index + <span class="number">1</span> &lt; size) &#123; <span class="comment">// 只需检查左子节点存在的情况</span></span><br><span class="line">            <span class="type">int</span> leftChild = <span class="number">2</span> * index + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> rightChild = <span class="number">2</span> * index + <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> largerChild = leftChild;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找到较大的子节点</span></span><br><span class="line">            <span class="keyword">if</span> (rightChild &lt; size &amp;&amp; heap[rightChild] &gt; heap[leftChild]) &#123;</span><br><span class="line">                largerChild = rightChild;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果当前节点小于较大的子节点，交换</span></span><br><span class="line">            <span class="keyword">if</span> (heap[index] &lt; heap[largerChild]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(heap[index], heap[largerChild]);</span><br><span class="line">                index = largerChild; <span class="comment">// 更新当前节点为交换后的子节点位置</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        heap.<span class="built_in">push_back</span>(val);  <span class="comment">// 添加到堆的末尾</span></span><br><span class="line">        <span class="built_in">heapifyUp</span>(heap.<span class="built_in">size</span>() - <span class="number">1</span>); <span class="comment">// 调整堆</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最大元素</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heap.<span class="built_in">empty</span>()) <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;PriorityQueue is empty&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> heap[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除最大元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heap.<span class="built_in">empty</span>()) <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;PriorityQueue is empty&quot;</span>);</span><br><span class="line">        heap[<span class="number">0</span>] = heap.<span class="built_in">back</span>();  <span class="comment">// 将最后一个元素移到堆顶</span></span><br><span class="line">        heap.<span class="built_in">pop_back</span>();  <span class="comment">// 删除最后一个元素</span></span><br><span class="line">        <span class="built_in">heapifyDown</span>(<span class="number">0</span>); <span class="comment">// 调整堆</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查队列是否为空</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heap.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PriorityQueue pq;</span><br><span class="line"></span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Top Element: &quot;</span> &lt;&lt; pq.<span class="built_in">top</span>() &lt;&lt; endl;  <span class="comment">// 输出 20</span></span><br><span class="line">    pq.<span class="built_in">pop</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Top Element after pop: &quot;</span> &lt;&lt; pq.<span class="built_in">top</span>() &lt;&lt; endl;  <span class="comment">// 输出 15</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释</p><ol><li><p><strong><code>push</code> 方法</strong>：将新元素插入堆的末尾，之后调用 <code>heapifyUp</code> 进行上浮调整，保证堆的最大性质。</p></li><li><p><strong><code>top</code> 方法</strong>：返回堆顶元素，即优先级最高的元素（最大值）。</p></li><li><p><strong><code>pop</code> 方法</strong>：删除堆顶元素，将堆的最后一个元素移到堆顶，并调用 <code>heapifyDown</code> 进行下沉调整，保证堆的最大性质。</p></li><li><p><strong><code>heapifyUp</code> 和 <code>heapifyDown</code> 方法</strong>：维护堆的性质，分别用于元素插入和删除后的调整操作。</p></li></ol><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><p><strong>二叉排序树</strong>（Binary Search Tree, BST）是一种特殊的二叉树，用于快速查找、插入和删除操作。BST 在很多应用中用于构建集合和字典。</p><h3 id="二叉排序树的概念"><a href="#二叉排序树的概念" class="headerlink" title="二叉排序树的概念"></a>二叉排序树的概念</h3><ul><li><strong>二叉排序树</strong>是一种有序的二叉树。对于 BST 中的每个节点 <code>N</code>，满足以下性质：<ol><li><strong>左子树</strong>所有节点的值小于 <code>N</code> 节点的值。</li><li><strong>右子树</strong>所有节点的值大于 <code>N</code> 节点的值。</li><li>左右子树也是二叉排序树。</li></ol></li></ul><h3 id="二叉排序树的性质"><a href="#二叉排序树的性质" class="headerlink" title="二叉排序树的性质"></a>二叉排序树的性质</h3><ol><li><strong>查找、插入和删除操作</strong>的时间复杂度平均为 <code>O(log n)</code>，最坏情况下为 <code>O(n)</code>，当 BST 退化为链表（即每个节点只有一个子节点）时会达到最坏情况。</li><li><strong>中序遍历</strong>可以得到一个升序的序列。</li><li>二叉排序树不允许有重复的节点。</li></ol><h3 id="二叉排序树的简洁-C-实现"><a href="#二叉排序树的简洁-C-实现" class="headerlink" title="二叉排序树的简洁 C++ 实现"></a>二叉排序树的简洁 C++ 实现</h3><p>以下是一个简单的 C++ 实现，包括插入、查找和删除操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 插入节点</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">insert</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);  <span class="comment">// 空节点，创建新节点</span></span><br><span class="line">        <span class="keyword">if</span> (val &lt; root-&gt;val)</span><br><span class="line">            root-&gt;left = <span class="built_in">insert</span>(root-&gt;left, val);  <span class="comment">// 插入左子树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; root-&gt;val)</span><br><span class="line">            root-&gt;right = <span class="built_in">insert</span>(root-&gt;right, val); <span class="comment">// 插入右子树</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找节点</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 空节点表示未找到</span></span><br><span class="line">        <span class="keyword">if</span> (val == root-&gt;val) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (val &lt; root-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">search</span>(root-&gt;left, val);  <span class="comment">// 在左子树中查找</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">search</span>(root-&gt;right, val); <span class="comment">// 在右子树中查找</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除节点</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">remove</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (val &lt; root-&gt;val)</span><br><span class="line">            root-&gt;left = <span class="built_in">remove</span>(root-&gt;left, val);  <span class="comment">// 删除左子树节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; root-&gt;val)</span><br><span class="line">            root-&gt;right = <span class="built_in">remove</span>(root-&gt;right, val); <span class="comment">// 删除右子树节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 找到要删除的节点</span></span><br><span class="line">            <span class="keyword">if</span> (!root-&gt;left) &#123;</span><br><span class="line">                TreeNode* rightChild = root-&gt;right;</span><br><span class="line">                <span class="keyword">delete</span> root;</span><br><span class="line">                <span class="keyword">return</span> rightChild;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!root-&gt;right) &#123;</span><br><span class="line">                TreeNode* leftChild = root-&gt;left;</span><br><span class="line">                <span class="keyword">delete</span> root;</span><br><span class="line">                <span class="keyword">return</span> leftChild;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 有两个子节点</span></span><br><span class="line">                TreeNode* minNode = <span class="built_in">getMin</span>(root-&gt;right);</span><br><span class="line">                root-&gt;val = minNode-&gt;val;  <span class="comment">// 用右子树中的最小节点替换当前节点</span></span><br><span class="line">                root-&gt;right = <span class="built_in">remove</span>(root-&gt;right, minNode-&gt;val); <span class="comment">// 删除右子树中的最小节点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最小节点</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">getMin</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (root-&gt;left) root = root-&gt;left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历（输出树中节点的值）</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            <span class="built_in">inorder</span>(root-&gt;left);</span><br><span class="line">            cout &lt;&lt; root-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">inorder</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BinarySearchTree bst;</span><br><span class="line">    TreeNode* root = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入节点</span></span><br><span class="line">    root = bst.<span class="built_in">insert</span>(root, <span class="number">50</span>);</span><br><span class="line">    bst.<span class="built_in">insert</span>(root, <span class="number">30</span>);</span><br><span class="line">    bst.<span class="built_in">insert</span>(root, <span class="number">20</span>);</span><br><span class="line">    bst.<span class="built_in">insert</span>(root, <span class="number">40</span>);</span><br><span class="line">    bst.<span class="built_in">insert</span>(root, <span class="number">70</span>);</span><br><span class="line">    bst.<span class="built_in">insert</span>(root, <span class="number">60</span>);</span><br><span class="line">    bst.<span class="built_in">insert</span>(root, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历（输出有序序列）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Inorder traversal: &quot;</span>;</span><br><span class="line">    bst.<span class="built_in">inorder</span>(root);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找节点</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Search for 40: &quot;</span> &lt;&lt; (bst.<span class="built_in">search</span>(root, <span class="number">40</span>) ? <span class="string">&quot;Found&quot;</span> : <span class="string">&quot;Not found&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除节点</span></span><br><span class="line">    root = bst.<span class="built_in">remove</span>(root, <span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Inorder traversal after deleting 20: &quot;</span>;</span><br><span class="line">    bst.<span class="built_in">inorder</span>(root);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释</p><ol><li><strong>插入节点</strong>：递归地找到正确的插入位置，将节点添加到左子树或右子树。</li><li><strong>查找节点</strong>：根据值在左子树或右子树中递归查找。</li><li><strong>删除节点</strong>：<ul><li>如果要删除的节点没有子节点，直接删除。</li><li>如果只有一个子节点，用子节点替换当前节点。</li><li>如果有两个子节点，用右子树中最小的节点替换当前节点，然后删除替换节点。</li></ul></li><li><strong>中序遍历</strong>：按照左子树 -&gt; 根节点 -&gt; 右子树的顺序遍历节点，输出排序后的值。</li></ol><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p><strong>平衡二叉树</strong>（Balanced Binary Tree）是一种改进的二叉搜索树，它保证树的高度保持平衡，从而避免最坏情况下退化为链表。常见的平衡二叉树包括 <strong>AVL树</strong> 和 <strong>红黑树</strong>。这里以 <strong>AVL树</strong> 为例，来介绍平衡二叉树的概念、性质以及实现。</p><h3 id="平衡二叉树的概念和性质"><a href="#平衡二叉树的概念和性质" class="headerlink" title="平衡二叉树的概念和性质"></a>平衡二叉树的概念和性质</h3><ol><li><p><strong>平衡因子</strong>：每个节点的左子树和右子树的高度差不超过1，称为平衡二叉树。具体来说，对于 AVL 树，任一节点的平衡因子（左子树高度减去右子树高度的差）只能是 -1、0 或 1。</p></li><li><p><strong>自平衡</strong>：在插入或删除节点后，AVL 树会通过旋转操作（如单旋转、双旋转）来恢复平衡。</p></li><li><p><strong>查找、插入和删除操作的时间复杂度</strong>为 (O(\log n))，这是因为 AVL 树总是保持平衡，树的高度始终为 (O(\log n))。</p></li></ol><h3 id="AVL-树的旋转操作"><a href="#AVL-树的旋转操作" class="headerlink" title="AVL 树的旋转操作"></a>AVL 树的旋转操作</h3><ul><li><strong>左旋</strong>：右子树高度大于左子树时，将右子节点旋转为根节点。</li><li><strong>右旋</strong>：左子树高度大于右子树时，将左子节点旋转为根节点。</li><li><strong>双旋转</strong>：当插入节点破坏平衡因子后，先进行一次左旋或右旋，再进行一次右旋或左旋。</li></ul><h3 id="AVL-树的简洁-C-实现"><a href="#AVL-树的简洁-C-实现" class="headerlink" title="AVL 树的简洁 C++ 实现"></a>AVL 树的简洁 C++ 实现</h3><p>以下是一个包含插入操作的简单 AVL 树实现代码。插入操作后会进行平衡调整。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>), <span class="built_in">height</span>(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AVLTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取节点高度</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">(TreeNode* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node ? node-&gt;height : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新节点高度</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getBalance</span><span class="params">(TreeNode* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node ? <span class="built_in">getHeight</span>(node-&gt;left) - <span class="built_in">getHeight</span>(node-&gt;right) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右旋</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">rightRotate</span><span class="params">(TreeNode* y)</span> </span>&#123;</span><br><span class="line">        TreeNode* x = y-&gt;left;</span><br><span class="line">        TreeNode* T2 = x-&gt;right;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 旋转</span></span><br><span class="line">        x-&gt;right = y;</span><br><span class="line">        y-&gt;left = T2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新高度</span></span><br><span class="line">        y-&gt;height = <span class="built_in">max</span>(<span class="built_in">getHeight</span>(y-&gt;left), <span class="built_in">getHeight</span>(y-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        x-&gt;height = <span class="built_in">max</span>(<span class="built_in">getHeight</span>(x-&gt;left), <span class="built_in">getHeight</span>(x-&gt;right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左旋</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">leftRotate</span><span class="params">(TreeNode* x)</span> </span>&#123;</span><br><span class="line">        TreeNode* y = x-&gt;right;</span><br><span class="line">        TreeNode* T2 = y-&gt;left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 旋转</span></span><br><span class="line">        y-&gt;left = x;</span><br><span class="line">        x-&gt;right = T2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新高度</span></span><br><span class="line">        x-&gt;height = <span class="built_in">max</span>(<span class="built_in">getHeight</span>(x-&gt;left), <span class="built_in">getHeight</span>(x-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        y-&gt;height = <span class="built_in">max</span>(<span class="built_in">getHeight</span>(y-&gt;left), <span class="built_in">getHeight</span>(y-&gt;right)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入节点并保持平衡</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">insert</span><span class="params">(TreeNode* node, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入到左子树或右子树</span></span><br><span class="line">        <span class="keyword">if</span> (val &lt; node-&gt;val) node-&gt;left = <span class="built_in">insert</span>(node-&gt;left, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; node-&gt;val) node-&gt;right = <span class="built_in">insert</span>(node-&gt;right, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> node; <span class="comment">// 不允许插入重复值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新当前节点高度</span></span><br><span class="line">        node-&gt;height = <span class="number">1</span> + <span class="built_in">max</span>(<span class="built_in">getHeight</span>(node-&gt;left), <span class="built_in">getHeight</span>(node-&gt;right));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查平衡因子并旋转</span></span><br><span class="line">        <span class="type">int</span> balance = <span class="built_in">getBalance</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左左情况</span></span><br><span class="line">        <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; val &lt; node-&gt;left-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">rightRotate</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右右情况</span></span><br><span class="line">        <span class="keyword">if</span> (balance &lt; <span class="number">-1</span> &amp;&amp; val &gt; node-&gt;right-&gt;val)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">leftRotate</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左右情况</span></span><br><span class="line">        <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; val &gt; node-&gt;left-&gt;val) &#123;</span><br><span class="line">            node-&gt;left = <span class="built_in">leftRotate</span>(node-&gt;left);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">rightRotate</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右左情况</span></span><br><span class="line">        <span class="keyword">if</span> (balance &lt; <span class="number">-1</span> &amp;&amp; val &lt; node-&gt;right-&gt;val) &#123;</span><br><span class="line">            node-&gt;right = <span class="built_in">rightRotate</span>(node-&gt;right);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">leftRotate</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历输出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            <span class="built_in">inorder</span>(root-&gt;left);</span><br><span class="line">            cout &lt;&lt; root-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">inorder</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AVLTree avl;</span><br><span class="line">    TreeNode* root = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入节点</span></span><br><span class="line">    root = avl.<span class="built_in">insert</span>(root, <span class="number">10</span>);</span><br><span class="line">    root = avl.<span class="built_in">insert</span>(root, <span class="number">20</span>);</span><br><span class="line">    root = avl.<span class="built_in">insert</span>(root, <span class="number">30</span>);</span><br><span class="line">    root = avl.<span class="built_in">insert</span>(root, <span class="number">40</span>);</span><br><span class="line">    root = avl.<span class="built_in">insert</span>(root, <span class="number">50</span>);</span><br><span class="line">    root = avl.<span class="built_in">insert</span>(root, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出中序遍历</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Inorder traversal of AVL tree: &quot;</span>;</span><br><span class="line">    avl.<span class="built_in">inorder</span>(root);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释</p><ol><li><strong>getHeight 和 getBalance</strong>：用于计算节点的高度和平衡因子。</li><li><strong>右旋和左旋操作</strong>：用于在失衡时恢复平衡。</li><li><strong>insert 操作</strong>：按二叉搜索树的规则插入新节点，并在每次插入后检查平衡性并进行必要的旋转操作。</li><li><strong>inorder 遍历</strong>：用于输出 AVL 树中节点的值，验证树结构的正确性。</li></ol><h2 id="哈夫曼-Huffman-树和哈夫曼编码"><a href="#哈夫曼-Huffman-树和哈夫曼编码" class="headerlink" title="哈夫曼(Huffman)树和哈夫曼编码"></a>哈夫曼(Huffman)树和哈夫曼编码</h2><p><strong>哈夫曼树</strong>（Huffman Tree）和<strong>哈夫曼编码</strong>（Huffman Coding）是数据压缩领域的重要概念。它们通过使用变长编码表对频率较高的数据分配较短的编码，从而有效地减少数据的存储空间。</p><h3 id="哈夫曼树的概念"><a href="#哈夫曼树的概念" class="headerlink" title="哈夫曼树的概念"></a>哈夫曼树的概念</h3><ul><li><strong>哈夫曼树</strong>是一种带权路径长度最短的二叉树，用于实现最优前缀编码。通常用于无损数据压缩。</li><li>在哈夫曼树中，频率较高的字符会被分配较短的编码，而频率较低的字符会被分配较长的编码，从而使整体编码长度最小化。</li></ul><h3 id="哈夫曼编码的概念"><a href="#哈夫曼编码的概念" class="headerlink" title="哈夫曼编码的概念"></a>哈夫曼编码的概念</h3><ul><li><strong>哈夫曼编码</strong>是一种基于哈夫曼树的前缀编码。每个字符用一串二进制数字表示，且不同字符的编码无公共前缀（前缀编码），避免了编码歧义。</li><li>在构建哈夫曼树后，从根到每个叶节点的路径形成该节点的编码，左子树为 <code>0</code>，右子树为 <code>1</code>。</li></ul><h3 id="哈夫曼树的性质"><a href="#哈夫曼树的性质" class="headerlink" title="哈夫曼树的性质"></a>哈夫曼树的性质</h3><ol><li><strong>最优编码</strong>：哈夫曼编码是无损压缩的最优编码方式之一，可有效减少存储空间。</li><li><strong>前缀编码</strong>：无公共前缀，避免编码歧义。</li><li><strong>构造复杂度</strong>：哈夫曼树构建过程的时间复杂度为 (O(n \log n))，其中 (n) 是字符的种类数。</li></ol><p><strong>无公共前缀</strong>的意思是，在一个编码系统中，任何一个字符的编码都不是另一个字符编码的开头部分（前缀）。在这种情况下，解码时不会有歧义，因为每个编码是唯一且独立的。</p><p>在哈夫曼编码中，这种“无公共前缀”性质被称为<strong>前缀码</strong>（Prefix Code）。具体来说：</p><ul><li>例如，如果字符 A 的编码是 <code>0</code>，字符 B 的编码是 <code>10</code>，字符 C 的编码是 <code>110</code>，字符 D 的编码是 <code>111</code>，那么这些编码没有公共前缀，因为：<ul><li><code>0</code> 不会是其他编码（<code>10</code>, <code>110</code>, <code>111</code>）的前缀。</li><li><code>10</code> 也不会是 <code>110</code> 或 <code>111</code> 的前缀。</li></ul></li></ul><p>这样可以确保<strong>唯一解码</strong>，即每当我们解码时，遇到编码 <code>0</code> 时立即知道是 A，遇到 <code>10</code> 时就是 B，以此类推。</p><h3 id="哈夫曼树和哈夫曼编码的C-实现"><a href="#哈夫曼树和哈夫曼编码的C-实现" class="headerlink" title="哈夫曼树和哈夫曼编码的C++实现"></a>哈夫曼树和哈夫曼编码的C++实现</h3><p>以下是一个简洁的C++实现，使用最小堆来构建哈夫曼树，并生成哈夫曼编码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义哈夫曼树的节点结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HuffmanNode</span> &#123;</span><br><span class="line">    <span class="type">char</span> ch;              <span class="comment">// 字符</span></span><br><span class="line">    <span class="type">int</span> freq;             <span class="comment">// 字符频率</span></span><br><span class="line">    HuffmanNode* left;    <span class="comment">// 左子节点</span></span><br><span class="line">    HuffmanNode* right;   <span class="comment">// 右子节点</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">HuffmanNode</span>(<span class="type">char</span> c, <span class="type">int</span> f) : <span class="built_in">ch</span>(c), <span class="built_in">freq</span>(f), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较函数，用于优先队列（最小堆）</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Compare</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(HuffmanNode* a, HuffmanNode* b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-&gt;freq &gt; b-&gt;freq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成哈夫曼编码</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateCodes</span><span class="params">(HuffmanNode* root, string code, unordered_map&lt;<span class="type">char</span>, string&gt;&amp; huffmanCode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 到达叶节点，保存字符及其对应编码</span></span><br><span class="line">    <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">        huffmanCode[root-&gt;ch] = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">generateCodes</span>(root-&gt;left, code + <span class="string">&quot;0&quot;</span>, huffmanCode);</span><br><span class="line">    <span class="built_in">generateCodes</span>(root-&gt;right, code + <span class="string">&quot;1&quot;</span>, huffmanCode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放哈夫曼树内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">freeTree</span><span class="params">(HuffmanNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">freeTree</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">freeTree</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建哈夫曼树并生成编码</span></span><br><span class="line"><span class="function">unordered_map&lt;<span class="type">char</span>, string&gt; <span class="title">buildHuffmanTree</span><span class="params">(<span class="type">const</span> unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt;&amp; freq)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用最小堆来构建哈夫曼树</span></span><br><span class="line">    priority_queue&lt;HuffmanNode*, vector&lt;HuffmanNode*&gt;, Compare&gt; minHeap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化每个字符的节点并加入优先队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; pair : freq) &#123;</span><br><span class="line">        minHeap.<span class="built_in">push</span>(<span class="keyword">new</span> <span class="built_in">HuffmanNode</span>(pair.first, pair.second));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并节点，构建哈夫曼树</span></span><br><span class="line">    <span class="keyword">while</span> (minHeap.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        HuffmanNode* left = minHeap.<span class="built_in">top</span>(); minHeap.<span class="built_in">pop</span>();</span><br><span class="line">        HuffmanNode* right = minHeap.<span class="built_in">top</span>(); minHeap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新的内部节点，频率为左右子节点频率之和</span></span><br><span class="line">        HuffmanNode* sum = <span class="keyword">new</span> <span class="built_in">HuffmanNode</span>(<span class="string">&#x27;\0&#x27;</span>, left-&gt;freq + right-&gt;freq);</span><br><span class="line">        sum-&gt;left = left;</span><br><span class="line">        sum-&gt;right = right;</span><br><span class="line">        minHeap.<span class="built_in">push</span>(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成哈夫曼编码</span></span><br><span class="line">    HuffmanNode* root = minHeap.<span class="built_in">top</span>();</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, string&gt; huffmanCode;</span><br><span class="line">    <span class="built_in">generateCodes</span>(root, <span class="string">&quot;&quot;</span>, huffmanCode);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">freeTree</span>(root);  <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">return</span> huffmanCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义字符频率</span></span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; freq = &#123;</span><br><span class="line">        &#123;<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>&#125;, &#123;<span class="string">&#x27;b&#x27;</span>, <span class="number">9</span>&#125;, &#123;<span class="string">&#x27;c&#x27;</span>, <span class="number">12</span>&#125;, &#123;<span class="string">&#x27;d&#x27;</span>, <span class="number">13</span>&#125;, &#123;<span class="string">&#x27;e&#x27;</span>, <span class="number">16</span>&#125;, &#123;<span class="string">&#x27;f&#x27;</span>, <span class="number">45</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建哈夫曼树并生成编码</span></span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, string&gt; huffmanCode = <span class="built_in">buildHuffmanTree</span>(freq);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出编码</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Huffman Codes:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; pair : huffmanCode) &#123;</span><br><span class="line">        cout &lt;&lt; pair.first &lt;&lt; <span class="string">&quot; : &quot;</span> &lt;&lt; pair.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><strong>HuffmanNode</strong>：定义哈夫曼树的节点结构体，包含字符、频率及左右子节点。</li><li><strong>Compare 函数对象</strong>：用于最小堆比较，以频率为基础构建最小堆。</li><li><strong>buildHuffmanTree</strong>：构建哈夫曼树，通过合并最小频率的节点，最终形成一棵树。</li><li><strong>generateCodes</strong>：递归生成编码，通过树的路径生成每个字符的二进制编码。</li><li><strong>main 函数</strong>：定义字符频率，调用 <code>buildHuffmanTree</code> 构建哈夫曼树并生成编码，最后输出编码结果。</li></ol><h3 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h3><p>假设频率表为 <code>&#123;&#39;a&#39;: 5, &#39;b&#39;: 9, &#39;c&#39;: 12, &#39;d&#39;: 13, &#39;e&#39;: 16, &#39;f&#39;: 45&#125;</code>，输出结果可能如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Huffman Codes:</span><br><span class="line">a : 1100</span><br><span class="line">b : 1101</span><br><span class="line">c : 100</span><br><span class="line">d : 101</span><br><span class="line">e : 111</span><br><span class="line">f : 0</span><br></pre></td></tr></table></figure></p><p>代码说明</p><p>通过哈夫曼编码，字符 ‘f’ 频率最高，编码最短，而频率较低的字符 ‘a’ 和 ‘b’ 编码更长，从而达到压缩效果。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://blog.whff521.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="树" scheme="https://blog.whff521.xyz/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>哈希表</title>
    <link href="https://blog.whff521.xyz/2024/10/30/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <id>https://blog.whff521.xyz/2024/10/30/%E5%93%88%E5%B8%8C%E8%A1%A8/</id>
    <published>2024-10-30T07:46:43.000Z</published>
    <updated>2024-10-30T07:53:16.055Z</updated>
    
    <content type="html"><![CDATA[<p>哈希表（Hash Table）是一种用于存储键值对的数据结构，可以通过哈希函数快速地根据键找到对应的值。哈希表的查找、插入和删除操作在平均情况下具有 <code>O(1)</code> 的时间复杂度，非常高效。</p><h2 id="1-哈希表的基本概念"><a href="#1-哈希表的基本概念" class="headerlink" title="1. 哈希表的基本概念"></a>1. 哈希表的基本概念</h2><p>哈希表的核心思想是将键通过一个<strong>哈希函数</strong>（Hash Function）映射到一个哈希表的索引位置上。若两个键映射到同一位置（即出现<strong>哈希冲突</strong>），则需要解决冲突以保证数据存储的正确性。</p><h3 id="哈希表的术语"><a href="#哈希表的术语" class="headerlink" title="哈希表的术语"></a>哈希表的术语</h3><ul><li><strong>哈希函数</strong>：将键映射到表中某个位置的函数。</li><li><strong>哈希冲突</strong>：两个不同的键被映射到同一个位置。</li><li><strong>装载因子</strong>：表中已填充元素的数量与哈希表大小的比值。较高的装载因子会增加冲突发生的可能性。</li></ul><h2 id="2-哈希表的实现方式"><a href="#2-哈希表的实现方式" class="headerlink" title="2. 哈希表的实现方式"></a>2. 哈希表的实现方式</h2><p>哈希表的常用实现方式主要有两种：</p><ol><li><strong>开放寻址法</strong>：在发生冲突时，通过寻找其他空闲位置来存储元素。常见的开放寻址方法包括线性探测、二次探测和双重哈希。</li><li><strong>链地址法（拉链法）</strong>：在每个哈希表位置存储一个链表，在发生冲突时将新元素插入到链表中。</li></ol><h2 id="3-哈希表的-C-实现"><a href="#3-哈希表的-C-实现" class="headerlink" title="3. 哈希表的 C++ 实现"></a>3. 哈希表的 C++ 实现</h2><h3 id="使用链地址法（拉链法）的-C-实现"><a href="#使用链地址法（拉链法）的-C-实现" class="headerlink" title="使用链地址法（拉链法）的 C++ 实现"></a>使用链地址法（拉链法）的 C++ 实现</h3><p>我们可以使用一个数组加链表的结构来实现哈希表。每个数组元素是一个链表，用于解决哈希冲突。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;list&lt;<span class="type">int</span>&gt;&gt; table;  <span class="comment">// 哈希表的数组，每个位置是一个链表</span></span><br><span class="line">    <span class="type">int</span> size;                 <span class="comment">// 哈希表的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希函数：简单取模法</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hashFunction</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key % size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HashTable</span>(<span class="type">int</span> s) : <span class="built_in">size</span>(s) &#123;</span><br><span class="line">        table.<span class="built_in">resize</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入操作</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunction</span>(key);</span><br><span class="line">        table[index].<span class="built_in">push_back</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除操作</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunction</span>(key);</span><br><span class="line">        table[index].<span class="built_in">remove</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找操作</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunction</span>(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; element : table[index]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element == key) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示哈希表</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Index &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; element : table[i]) &#123;</span><br><span class="line">                cout &lt;&lt; element &lt;&lt; <span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NULL&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">HashTable <span class="title">hashTable</span><span class="params">(<span class="number">7</span>)</span></span>; <span class="comment">// 创建大小为 7 的哈希表</span></span><br><span class="line">    hashTable.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    hashTable.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    hashTable.<span class="built_in">insert</span>(<span class="number">15</span>);</span><br><span class="line">    hashTable.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">    hashTable.<span class="built_in">insert</span>(<span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hash Table:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    hashTable.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Searching for 15: &quot;</span> &lt;&lt; (hashTable.<span class="built_in">search</span>(<span class="number">15</span>) ? <span class="string">&quot;Found&quot;</span> : <span class="string">&quot;Not Found&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    hashTable.<span class="built_in">remove</span>(<span class="number">15</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After removing 15:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    hashTable.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><ul><li><strong>哈希函数</strong>：这里我们用简单的取模方法，将键值对映射到表中的某个位置。<code>hashFunction(int key)</code> 通过 <code>key % size</code> 计算索引。</li><li><strong>插入操作</strong>：将元素插入到哈希表中指定索引的链表中。</li><li><strong>删除操作</strong>：从哈希表中指定索引的链表中删除目标元素。</li><li><strong>查找操作</strong>：检查目标元素是否在哈希表的某个位置的链表中。</li></ul><h3 id="开放寻址法的几种探测方法"><a href="#开放寻址法的几种探测方法" class="headerlink" title="开放寻址法的几种探测方法"></a>开放寻址法的几种探测方法</h3><ol><li><strong>线性探测</strong>（Linear Probing）：冲突时按固定步长（通常为 1）查找下一个空位。</li><li><strong>二次探测</strong>（Quadratic Probing）：冲突时按二次方步长查找下一个空位，步长逐渐增加以避免簇现象。</li><li><strong>双重哈希</strong>（Double Hashing）：使用两个哈希函数，当冲突发生时，通过第二个哈希函数计算步长。</li></ol><p>下面我们以<strong>线性探测法</strong>为例，展示开放寻址法的实现。</p><h3 id="使用开放寻址法的哈希表-C-实现"><a href="#使用开放寻址法的哈希表-C-实现" class="headerlink" title="使用开放寻址法的哈希表 C++ 实现"></a>使用开放寻址法的哈希表 C++ 实现</h3><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><ul><li>使用一个数组保存元素，初始值为 -1 或 <code>nullptr</code> 表示该位置空闲。</li><li>插入元素时，如果计算出的索引位置被占用，则按探测策略查找下一个位置。</li><li>删除元素时，采用标记（例如 <code>-2</code>）表示“删除状态”，这样在查找时不会打断探测链。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAddressHashTable</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; table; <span class="comment">// 哈希表数组</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哈希函数：简单取模</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hashFunction</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key % size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">OpenAddressHashTable</span>(<span class="type">int</span> s) : <span class="built_in">size</span>(s) &#123;</span><br><span class="line">        table.<span class="built_in">resize</span>(size, <span class="number">-1</span>); <span class="comment">// -1 表示空闲位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入操作</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunction</span>(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线性探测</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> probeIndex = (index + i) % size;  <span class="comment">// 线性探测</span></span><br><span class="line">            <span class="keyword">if</span> (table[probeIndex] == <span class="number">-1</span> || table[probeIndex] == <span class="number">-2</span>) &#123; <span class="comment">// 找到空闲或已删除位置</span></span><br><span class="line">                table[probeIndex] = key;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 哈希表已满</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除操作</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunction</span>(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线性探测</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> probeIndex = (index + i) % size;</span><br><span class="line">            <span class="keyword">if</span> (table[probeIndex] == key) &#123;  <span class="comment">// 找到目标元素</span></span><br><span class="line">                table[probeIndex] = <span class="number">-2</span>; <span class="comment">// -2 标记删除状态</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (table[probeIndex] == <span class="number">-1</span>) &#123;  <span class="comment">// 没找到且遇到空闲位置，停止查找</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找操作</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunction</span>(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线性探测</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> probeIndex = (index + i) % size;</span><br><span class="line">            <span class="keyword">if</span> (table[probeIndex] == key) <span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">// 找到目标元素</span></span><br><span class="line">            <span class="keyword">if</span> (table[probeIndex] == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// 找到空闲位置，停止查找</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示哈希表</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[i] &gt;= <span class="number">0</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Index &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; table[i] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (table[i] == <span class="number">-2</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Index &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: [Deleted]&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Index &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: [Empty]&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">OpenAddressHashTable <span class="title">hashTable</span><span class="params">(<span class="number">7</span>)</span></span>; <span class="comment">// 创建大小为 7 的哈希表</span></span><br><span class="line"></span><br><span class="line">    hashTable.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">    hashTable.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">    hashTable.<span class="built_in">insert</span>(<span class="number">15</span>);</span><br><span class="line">    hashTable.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">    hashTable.<span class="built_in">insert</span>(<span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hash Table:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    hashTable.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Searching for 15: &quot;</span> &lt;&lt; (hashTable.<span class="built_in">search</span>(<span class="number">15</span>) ? <span class="string">&quot;Found&quot;</span> : <span class="string">&quot;Not Found&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    hashTable.<span class="built_in">remove</span>(<span class="number">15</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After removing 15:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    hashTable.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><ul><li><strong>哈希函数</strong>：使用 <code>key % size</code> 计算元素的初始索引位置。</li><li><strong>线性探测</strong>：在发生冲突时，通过逐次递增索引来查找下一个空闲位置，直到找到空位或返回失败。</li><li><strong>删除标记</strong>：删除元素时，将该位置标记为 <code>-2</code>（表示已删除），防止探测链的中断。<code>-1</code> 表示空闲位置。</li><li><strong>查找与删除</strong>：查找元素时遇到 <code>-1</code> 即可停止查找，遇到 <code>-2</code> 则继续探测链。</li></ul><h3 id="其他探测方法简述"><a href="#其他探测方法简述" class="headerlink" title="其他探测方法简述"></a>其他探测方法简述</h3><ol><li><strong>二次探测</strong>：冲突时探测间隔为 $( i^2 )$ （如 <code>index + i^2</code>）。这样可以避免线性探测中的“主簇”问题，但可能引入新的探测区域。</li><li><strong>双重哈希</strong>：冲突时通过第二个哈希函数计算步长，跳跃性地寻找位置，减少了探测链的聚集现象。</li></ol><p>开放寻址法通常比链地址法更节省空间，但当装载因子过高时，开放寻址法的性能下降更明显。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;哈希表（Hash Table）是一种用于存储键值对的数据结构，可以通过哈希函数快速地根据键找到对应的值。哈希表的查找、插入和删除操作在平均情况下具有 &lt;code&gt;O(1)&lt;/code&gt; 的时间复杂度，非常高效。&lt;/p&gt;
&lt;h2 id=&quot;1-哈希表的基本概念&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://blog.whff521.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="哈希表" scheme="https://blog.whff521.xyz/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>栈与队列</title>
    <link href="https://blog.whff521.xyz/2024/10/30/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    <id>https://blog.whff521.xyz/2024/10/30/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</id>
    <published>2024-10-30T02:17:05.000Z</published>
    <updated>2024-10-30T02:32:41.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-栈的基本概念与操作"><a href="#1-栈的基本概念与操作" class="headerlink" title="1. 栈的基本概念与操作"></a>1. 栈的基本概念与操作</h2><p>栈（Stack）是一种<strong>后进先出</strong>（LIFO, Last In First Out）的数据结构，最后插入的元素最先被删除。</p><h3 id="栈的基本操作"><a href="#栈的基本操作" class="headerlink" title="栈的基本操作"></a>栈的基本操作</h3><ol><li><strong>初始化</strong>：创建一个空栈。</li><li><strong>入栈（Push）</strong>：将一个元素压入栈顶。</li><li><strong>出栈（Pop）</strong>：从栈顶删除一个元素。</li><li><strong>取栈顶元素（Top）</strong>：获取栈顶元素的值，但不删除它。</li><li><strong>判断是否为空</strong>：检查栈是否为空。</li></ol><h2 id="2-队列的基本概念与操作"><a href="#2-队列的基本概念与操作" class="headerlink" title="2. 队列的基本概念与操作"></a>2. 队列的基本概念与操作</h2><p>队列（Queue）是一种<strong>先进先出</strong>（FIFO, First In First Out）的数据结构，最先插入的元素最先被删除。</p><h3 id="队列的基本操作"><a href="#队列的基本操作" class="headerlink" title="队列的基本操作"></a>队列的基本操作</h3><ol><li><strong>初始化</strong>：创建一个空队列。</li><li><strong>入队（Enqueue）</strong>：将一个元素加入到队尾。</li><li><strong>出队（Dequeue）</strong>：从队头删除一个元素。</li><li><strong>取队头元素（Front）</strong>：获取队头元素的值，但不删除它。</li><li><strong>判断是否为空</strong>：检查队列是否为空。</li></ol><h2 id="3-栈的顺序存储结构"><a href="#3-栈的顺序存储结构" class="headerlink" title="3. 栈的顺序存储结构"></a>3. 栈的顺序存储结构</h2><p>栈的顺序存储结构通常使用数组实现，栈顶指针 <code>top</code> 用于指向栈顶元素。</p><h3 id="栈的顺序存储结构的-C-实现"><a href="#栈的顺序存储结构的-C-实现" class="headerlink" title="栈的顺序存储结构的 C++ 实现"></a>栈的顺序存储结构的 C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> data[MAX_SIZE];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stack</span>() : <span class="built_in">top</span>(<span class="number">-1</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top &gt;= MAX_SIZE - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 栈满</span></span><br><span class="line">        data[++top] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 栈空</span></span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (top == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 栈空</span></span><br><span class="line">        <span class="keyword">return</span> data[top];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= top; ++i) std::cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-队列的顺序存储结构"><a href="#4-队列的顺序存储结构" class="headerlink" title="4. 队列的顺序存储结构"></a>4. 队列的顺序存储结构</h2><p>队列的顺序存储结构可以用循环数组实现，使用 <code>front</code> 和 <code>rear</code> 两个指针分别指向队头和队尾。</p><h3 id="队列的顺序存储结构的-C-实现"><a href="#队列的顺序存储结构的-C-实现" class="headerlink" title="队列的顺序存储结构的 C++ 实现"></a>队列的顺序存储结构的 C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> data[MAX_SIZE];</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Queue</span>() : <span class="built_in">front</span>(<span class="number">0</span>), <span class="built_in">rear</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">enqueue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((rear + <span class="number">1</span>) % MAX_SIZE == front) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 队列满</span></span><br><span class="line">        data[rear] = value;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front == rear) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 队列空</span></span><br><span class="line">        front = (front + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front == rear) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 队列空</span></span><br><span class="line">        <span class="keyword">return</span> data[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = front;</span><br><span class="line">        <span class="keyword">while</span> (i != rear) &#123;</span><br><span class="line">            std::cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            i = (i + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-栈的链式存储结构"><a href="#5-栈的链式存储结构" class="headerlink" title="5. 栈的链式存储结构"></a>5. 栈的链式存储结构</h2><p>栈的链式存储结构使用链表实现，每次入栈和出栈都在链表的头部操作。</p><h3 id="栈的链式存储结构的-C-实现"><a href="#栈的链式存储结构的-C-实现" class="headerlink" title="栈的链式存储结构的 C++ 实现"></a>栈的链式存储结构的 C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node* next;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> val) : <span class="built_in">data</span>(val), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node* top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkedStack</span>() : <span class="built_in">top</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(value);</span><br><span class="line">        newNode-&gt;next = top;</span><br><span class="line">        top = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!top) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 栈空</span></span><br><span class="line">        Node* temp = top;</span><br><span class="line">        top = top-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top ? top-&gt;data : <span class="number">-1</span>;  <span class="comment">// 栈空返回 -1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node* curr = top;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            std::cout &lt;&lt; curr-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-队列的链式存储结构"><a href="#6-队列的链式存储结构" class="headerlink" title="6. 队列的链式存储结构"></a>6. 队列的链式存储结构</h2><p>队列的链式存储结构使用链表实现，链表的头部作为队头，尾部作为队尾。</p><h3 id="队列的链式存储结构的-C-实现"><a href="#队列的链式存储结构的-C-实现" class="headerlink" title="队列的链式存储结构的 C++ 实现"></a>队列的链式存储结构的 C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">QNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    QNode* next;</span><br><span class="line">    <span class="built_in">QNode</span>(<span class="type">int</span> val) : <span class="built_in">data</span>(val), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QNode *front, *rear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkedQueue</span>() : <span class="built_in">front</span>(<span class="literal">nullptr</span>), <span class="built_in">rear</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">enqueue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        QNode* newNode = <span class="keyword">new</span> <span class="built_in">QNode</span>(value);</span><br><span class="line">        <span class="keyword">if</span> (!rear) &#123;</span><br><span class="line">            front = rear = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rear-&gt;next = newNode;</span><br><span class="line">            rear = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!front) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 队列空</span></span><br><span class="line">        QNode* temp = front;</span><br><span class="line">        front = front-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (!front) rear = <span class="literal">nullptr</span>;  <span class="comment">// 队列变空</span></span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front ? front-&gt;data : <span class="number">-1</span>;  <span class="comment">// 队列空返回 -1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QNode* curr = front;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            std::cout &lt;&lt; curr-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>栈</strong>：遵循 LIFO 原则，典型操作包括入栈和出栈。</li><li><strong>队列</strong>：遵循 FIFO 原则，典型操作包括入队和出队。</li><li><strong>顺序存储</strong>：使用数组实现，适合容量固定的情况，操作简单。</li><li><strong>链式存储</strong>：使用链表实现，适合动态长度的情况，节省空间。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1-栈的基本概念与操作&quot;&gt;&lt;a href=&quot;#1-栈的基本概念与操作&quot; class=&quot;headerlink&quot; title=&quot;1. 栈的基本概念与操作&quot;&gt;&lt;/a&gt;1.</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://blog.whff521.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="栈与队列" scheme="https://blog.whff521.xyz/tags/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="https://blog.whff521.xyz/2024/10/30/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>https://blog.whff521.xyz/2024/10/30/%E7%BA%BF%E6%80%A7%E8%A1%A8/</id>
    <published>2024-10-30T02:04:39.000Z</published>
    <updated>2024-10-30T02:13:42.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性表是一种数据结构，表示由<strong>同一类型的元素按顺序排列</strong>的有限集合。线性表中的元素有顺序关系，可以通过顺序号访问。它是最常用的结构之一，常用于实现数据的顺序存储和查找操作。</p><h2 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h2><p>一个线性表 $( L )$ 可以定义为一个具有相同类型的元素集合，其中第一个元素为 $( a_1 )$，第二个元素为 $( a_2 )$，依次排列，直到第 $( n )$ 个元素 $( a_n )$。线性表的长度是元素的个数，当长度为 0 时，称其为空表。</p><p>在数学上可以表示为：<br>$[ L = { a_1, a_2, \dots, a_n } ]$</p><h2 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h2><p>线性表的基本操作主要包括以下几个：</p><ol><li><p><strong>初始化</strong>（Initialization）</p><ul><li>创建一个空的线性表。</li></ul></li><li><p><strong>插入</strong>（Insert）</p><ul><li>将一个新元素插入到线性表的指定位置。插入时，需要将插入位置后的所有元素向后移动。</li></ul></li><li><p><strong>删除</strong>（Delete）</p><ul><li>删除线性表中的指定位置的元素。删除时，需要将删除位置后的所有元素向前移动。</li></ul></li><li><p><strong>查找</strong>（Find/Search）</p><ul><li>根据元素的值查找其在表中的位置，或根据位置查找对应的元素值。</li></ul></li><li><p><strong>更新</strong>（Update）</p><ul><li>修改线性表中指定位置的元素值。</li></ul></li><li><p><strong>遍历</strong>（Traverse）</p><ul><li>顺序访问线性表中的每一个元素，通常用于打印或处理每个元素。</li></ul></li><li><p><strong>获取长度</strong>（Length）</p><ul><li>获取线性表中元素的个数。</li></ul></li></ol><h2 id="线性表的实现方式"><a href="#线性表的实现方式" class="headerlink" title="线性表的实现方式"></a>线性表的实现方式</h2><p>线性表的实现通常有两种存储结构：</p><ul><li><strong>顺序存储结构</strong>：使用数组存储元素，适合顺序访问，但插入和删除操作的效率较低。</li><li><strong>链式存储结构</strong>：使用链表存储元素，适合频繁的插入和删除操作，常见的链表类型包括单链表、循环链表和双向链表。</li></ul><h3 id="1-顺序表的实现"><a href="#1-顺序表的实现" class="headerlink" title="1. 顺序表的实现"></a>1. 顺序表的实现</h3><p>顺序表使用数组实现，其特点是可以直接通过索引访问元素，效率高，但插入和删除需要移动元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> data[MAX_SIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SeqList</span>() : <span class="built_in">length</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; length || length &gt;= MAX_SIZE) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = length; i &gt; pos; --i) data[i] = data[i - <span class="number">1</span>];</span><br><span class="line">        data[pos] = value;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt; length - <span class="number">1</span>; ++i) data[i] = data[i + <span class="number">1</span>];</span><br><span class="line">        length--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">            <span class="keyword">if</span> (data[i] == value) <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) std::cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-单链表的实现"><a href="#2-单链表的实现" class="headerlink" title="2. 单链表的实现"></a>2. 单链表的实现</h3><p>单链表由节点构成，适合频繁的插入和删除操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node* next;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> val) : <span class="built_in">data</span>(val), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node* head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SinglyLinkedList</span>() : <span class="built_in">head</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(value);</span><br><span class="line">        newNode-&gt;next = head;</span><br><span class="line">        head = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        Node *prev = <span class="literal">nullptr</span>, *curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr &amp;&amp; curr-&gt;data != value) &#123;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!curr) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (prev) prev-&gt;next = curr-&gt;next;</span><br><span class="line">        <span class="keyword">else</span> head = curr-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> curr;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node* <span class="title">find</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        Node* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;data == value) <span class="keyword">return</span> curr;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            std::cout &lt;&lt; curr-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-循环链表的实现"><a href="#3-循环链表的实现" class="headerlink" title="3. 循环链表的实现"></a>3. 循环链表的实现</h3><p>循环链表的最后一个节点指向第一个节点，形成一个循环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    CNode* next;</span><br><span class="line">    <span class="built_in">CNode</span>(<span class="type">int</span> val) : <span class="built_in">data</span>(val), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircularLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CNode* tail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CircularLinkedList</span>() : <span class="built_in">tail</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        CNode* newNode = <span class="keyword">new</span> <span class="built_in">CNode</span>(value);</span><br><span class="line">        <span class="keyword">if</span> (!tail) &#123;</span><br><span class="line">            tail = newNode;</span><br><span class="line">            tail-&gt;next = tail;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newNode-&gt;next = tail-&gt;next;</span><br><span class="line">            tail-&gt;next = newNode;</span><br><span class="line">            tail = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tail) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        CNode *curr = tail-&gt;next, *prev = tail;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;data == value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curr == tail) tail = (tail-&gt;next == tail) ? <span class="literal">nullptr</span> : prev;</span><br><span class="line">                prev-&gt;next = curr-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> curr;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">while</span> (curr != tail-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">CNode* <span class="title">find</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tail) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        CNode* curr = tail-&gt;next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;data == value) <span class="keyword">return</span> curr;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">while</span> (curr != tail-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tail) <span class="keyword">return</span>;</span><br><span class="line">        CNode* curr = tail-&gt;next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            std::cout &lt;&lt; curr-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">while</span> (curr != tail-&gt;next);</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-双向链表的实现"><a href="#4-双向链表的实现" class="headerlink" title="4. 双向链表的实现"></a>4. 双向链表的实现</h3><p>双向链表每个节点有前驱和后继指针，方便双向遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    DNode* prev;</span><br><span class="line">    DNode* next;</span><br><span class="line">    <span class="built_in">DNode</span>(<span class="type">int</span> val) : <span class="built_in">data</span>(val), <span class="built_in">prev</span>(<span class="literal">nullptr</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoublyLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    DNode* head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DoublyLinkedList</span>() : <span class="built_in">head</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        DNode* newNode = <span class="keyword">new</span> <span class="built_in">DNode</span>(value);</span><br><span class="line">        newNode-&gt;next = head;</span><br><span class="line">        <span class="keyword">if</span> (head) head-&gt;prev = newNode;</span><br><span class="line">        head = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        DNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr &amp;&amp; curr-&gt;data != value) curr = curr-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (!curr) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (curr-&gt;prev) curr-&gt;prev-&gt;next = curr-&gt;next;</span><br><span class="line">        <span class="keyword">else</span> head = curr-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (curr-&gt;next) curr-&gt;next-&gt;prev = curr-&gt;prev;</span><br><span class="line">        <span class="keyword">delete</span> curr;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">DNode* <span class="title">find</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        DNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;data == value) <span class="keyword">return</span> curr;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            std::cout &lt;&lt; curr-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这些代码分别实现了顺序表、单链表、循环链表和双向链表的数据结构及其基本操作，适合考试和项目中的线性表应用。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://blog.whff521.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="线性表" scheme="https://blog.whff521.xyz/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
</feed>
