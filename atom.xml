<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AiRomance</title>
  <icon>https://blog.whff521.xyz/images/101.ico</icon>
  <subtitle>爱裸漫三三</subtitle>
  <link href="https://blog.whff521.xyz/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://blog.whff521.xyz/"/>
  <updated>2025-01-26T15:54:00.981Z</updated>
  <id>https://blog.whff521.xyz/</id>
  
  <author>
    <name>AiRomance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>曾经最想去的地方是现在最讨厌的地方</title>
    <link href="https://blog.whff521.xyz/2025/01/26/%E6%9B%BE%E7%BB%8F%E6%9C%80%E6%83%B3%E5%8E%BB%E7%9A%84%E5%9C%B0%E6%96%B9%E6%98%AF%E7%8E%B0%E5%9C%A8%E6%9C%80%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>https://blog.whff521.xyz/2025/01/26/%E6%9B%BE%E7%BB%8F%E6%9C%80%E6%83%B3%E5%8E%BB%E7%9A%84%E5%9C%B0%E6%96%B9%E6%98%AF%E7%8E%B0%E5%9C%A8%E6%9C%80%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%9C%B0%E6%96%B9/</id>
    <published>2025-01-26T15:19:58.000Z</published>
    <updated>2025-01-26T15:54:00.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="曾经最想去的地方是现在最讨厌的地方"><a href="#曾经最想去的地方是现在最讨厌的地方" class="headerlink" title="曾经最想去的地方是现在最讨厌的地方"></a>曾经最想去的地方是现在最讨厌的地方</h1><p>最近在看《灿烂的风和海》，是在澳门拍摄的电视剧。其中Casey姐对8岁的韦世杰说：“小时候最想去的地方但是因为各种原因没有去成，长大后那些地方就变成最讨厌去的地方。因为会一直暗示自己没有去是因为自己不喜欢，不想去。久而久之连自己都相信了。”</p><p>我非常懂Casey姐说的话，有些地方小时候没有去成，有些东西小时候没有得到。即使长大了，有能力去了，有能力获得了，却极力避免去，避免获得。甚至不想再看一眼。这并不是自相矛盾，而是人类自身自我保护的潜意识。</p><p>小时候最想要的玩具，明明当初那么想要，但是父母没有给买。长大了，你会体谅父母的不容易，感叹小时候的幼稚。好不容易已经忘记了，不在意了，但是在商场里那个玩具就是再一次跑到你的视线里，那一瞬间，记忆的闸门终于抵挡不住记忆的洪流，你看见了当初哭泣的指着这个玩具求父母买给我的自己。大多数人可能就会撇开视线走掉吧。</p><p>我们不得不承认这就是心灵上的伤疤，谁都不想揭开这个伤疤，因为我们的心会痛，即使知道当初是多么的幼稚，但是当初撕心裂肺的心情撕开的伤疤永远得不到治疗，只要一提起还是会刺痛。</p><p>为什么伤口没有愈合呢？时间为什么解决不了这件事情呢？我觉得是因为你自己没有放过自己。在别人眼里可能就是芝麻大的小事，因为他们并不在乎。但是在当初我们自己眼里，这就是天大的事情，因为我们在乎。</p><p>我很欣赏一句诗：“欲买桂花同载酒，终不似，少年游。”想要买上桂花和美酒一同泛舟，但终究不像少年出游时拥有那种意气了。我们应该尽量避免这种情况的发生。如果我们成天感叹过去的遗憾，一定会忽略当下的美好，只会造成更大的遗憾。</p><p>我们要随时清楚地知道自己想要什么东西。学会饶恕自己，放过自己。小时候没钱学的钢琴长大后也是可以学的，小时候没去的郊游长大后也是可以去的，虽然“终不似少年游”，虽然以前的朋友已经不在身边，但是这片风景一直没有变，它连同小时候的自己一直都在等着你，你要自己踏足此地，和小时候的自己和解，证明自己值得。</p>]]></content>
    
    
    <summary type="html">“欲买桂花同载酒，终不似，少年游。”</summary>
    
    
    
    <category term="杂谈" scheme="https://blog.whff521.xyz/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="思考" scheme="https://blog.whff521.xyz/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg提取视频音频</title>
    <link href="https://blog.whff521.xyz/2025/01/21/FFmpeg%E6%8F%90%E5%8F%96%E8%A7%86%E9%A2%91%E9%9F%B3%E9%A2%91/"/>
    <id>https://blog.whff521.xyz/2025/01/21/FFmpeg%E6%8F%90%E5%8F%96%E8%A7%86%E9%A2%91%E9%9F%B3%E9%A2%91/</id>
    <published>2025-01-21T15:05:16.000Z</published>
    <updated>2025-01-21T15:49:42.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FFmpeg提取视频音频"><a href="#FFmpeg提取视频音频" class="headerlink" title="FFmpeg提取视频音频"></a>FFmpeg提取视频音频</h1><h2 id="背景故事"><a href="#背景故事" class="headerlink" title="背景故事"></a>背景故事</h2><p>最近在补夏目友人帐的第七季，前几季都是初中时候看的了得有快十年没看了，所以周更的时候没有跟着追。现在有时间了都下载下来一集一集看。</p><p>我发现夏目的语速非常慢，而且发音很标准，毕竟声优是神谷浩史，很有辨识度。重要的是里边用到的词汇也都非常基础，有很多日常生活中的常用词。最近我也在学新版的标日初级上下册，所以对一些基础词汇非常的敏感。</p><p>今天在去超市的路上本来想听一听播客，但是有很多还没有更新，有的更新也是不太想听，感觉营养较低。前几个月我是有搜寻一些日语播客的，想要练一练听力，但是完全听不懂就放弃了。</p><p>所以我联想到了我刚看的两集夏目，这个番非常适合练习听力，而且看过一遍字幕不用担心完全听不懂的现象，而且有有趣的对话和悠扬的背景音乐。</p><p><img src="https://images.whff521.top/vlcsnap-2025-01-21-23h20m21s316.png" alt="xiamu"></p><p><strong>如果能把视频的音频提取出来传到手机上听就好了。</strong></p><p>所以就有了这篇博客。</p><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><h3 id="安装-FFmpeg"><a href="#安装-FFmpeg" class="headerlink" title="安装 FFmpeg"></a>安装 FFmpeg</h3><ol><li>下载并安装 FFmpeg：<a href="https://ffmpeg.org/download.html">FFmpeg 官网</a></li><li>配置环境变量（Windows 用户需要手动添加到 PATH，MacOS直接homebrew下载即可）。</li></ol><h3 id="提取音频命令"><a href="#提取音频命令" class="headerlink" title="提取音频命令"></a>提取音频命令</h3><p>假设你的文件是 <code>input.mp4</code>，目标音频文件格式是 MP3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -q:a 0 -map a output.mp3</span><br></pre></td></tr></table></figure><ul><li><code>-q:a 0</code> 表示使用最高质量。</li><li><code>-map a</code> 表示仅提取音频流。</li></ul><h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><p>不想重复造轮子，我自己的方法是直接电脑上传到apple music资料库，等上传后手机就可以听了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;FFmpeg提取视频音频&quot;&gt;&lt;a href=&quot;#FFmpeg提取视频音频&quot; class=&quot;headerlink&quot; title=&quot;FFmpeg提取视频音频&quot;&gt;&lt;/a&gt;FFmpeg提取视频音频&lt;/h1&gt;&lt;h2 id=&quot;背景故事&quot;&gt;&lt;a href=&quot;#背景故事&quot;</summary>
        
      
    
    
    
    <category term="计算机相关" scheme="https://blog.whff521.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="FFmpeg" scheme="https://blog.whff521.xyz/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>南游记</title>
    <link href="https://blog.whff521.xyz/2025/01/19/%E5%8D%97%E6%B8%B8%E8%AE%B0/"/>
    <id>https://blog.whff521.xyz/2025/01/19/%E5%8D%97%E6%B8%B8%E8%AE%B0/</id>
    <published>2025-01-19T15:13:18.000Z</published>
    <updated>2025-01-19T15:45:25.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="南游记"><a href="#南游记" class="headerlink" title="南游记"></a>南游记</h1><h2 id="规模"><a href="#规模" class="headerlink" title="规模"></a>规模</h2><p>我本来以为这次聚会只有6，7个人的规模，等我到了之后没想到竟然有12人之多。偌大的客厅在人群面前也显现出有些狭小。大多是好久没有见过的高中同学，最长的甚至长达四年，除了某个人胖了好多意以外，其他人外貌基本没有太大的变化。</p><p>第二天的时候人数减到十人，正好配上两辆车，直接扩大了可以游玩的区域范围。</p><h2 id="夜爬"><a href="#夜爬" class="headerlink" title="夜爬"></a>夜爬</h2><p>同市区内就有某山公园，玩了一下午狼人杀，吃过晚饭之后就来夜爬。山不是很高，但是公园面积很大。由于夜晚没有太阳，绕来绕去甚至迷失了一段时间的方向。冬天的半夜气温较冷，虽说穿着羽绒服但是很冻耳朵。半夜的公园里似乎就没看见过其他市民，整个公园都是我们的地盘一样。</p><p>站在山顶的高台上俯瞰市区，照了一会儿合影就慢慢下去了。对于我来说并不是很累，但是有些人似乎有些恐高所以走的比较慢。</p><h2 id="大海"><a href="#大海" class="headerlink" title="大海"></a>大海</h2><p>第二天下午直接开车去看大海。高速路开的也算是很顺畅（我是坐车的）。除了去的时候下高速转弯的时候突然警报后备箱开了，和回来的时候开暖风有一股糊味之外也没什么意外的事情。</p><p>一开始本来是按照导航走的，但是由于聊天太欢导致忘了变右转向道，所以两个车分开了一段时间，不过这次意外似乎是个正确的选择，虽然走错了道路，但是我们后来因为走的道路车少超过了另外一辆车提前到达去高速路的主路上。</p><p>只有岸边水坑里结了一点冰，岸边不知道是不是剧组有一群人立着摄像机在拍摄。</p><p>虽说没有什么游乐项目，只是为了看大海而看大海，但是这是一段很快乐的时光。在路上的聊天，两辆车的位置共享和语音通话，车载音响的歌唱，和朋友们吹着海风大声欢笑才是最重要的事情。</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>也没有走多远，只是因为我一直在向南边走而将此游记命名为“南游记”。两天两夜，甚至没有花多少钱，却享受了十分快乐的时光。</p><p>是的，这是值得纪念的时光。</p>]]></content>
    
    
    <summary type="html">假期和朋友们聚会的时光</summary>
    
    
    
    <category term="杂谈" scheme="https://blog.whff521.xyz/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="旅行" scheme="https://blog.whff521.xyz/tags/%E6%97%85%E8%A1%8C/"/>
    
    <category term="朋友" scheme="https://blog.whff521.xyz/tags/%E6%9C%8B%E5%8F%8B/"/>
    
  </entry>
  
  <entry>
    <title>switch连接openwrt路由器NAT穿越失败问题</title>
    <link href="https://blog.whff521.xyz/2025/01/05/switch%E8%BF%9E%E6%8E%A5openwrt%E8%B7%AF%E7%94%B1%E5%99%A8NAT%E7%A9%BF%E8%B6%8A%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.whff521.xyz/2025/01/05/switch%E8%BF%9E%E6%8E%A5openwrt%E8%B7%AF%E7%94%B1%E5%99%A8NAT%E7%A9%BF%E8%B6%8A%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</id>
    <published>2025-01-05T00:20:06.000Z</published>
    <updated>2025-01-05T01:04:35.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="switch连接openwrt路由器NAT穿越失败问题"><a href="#switch连接openwrt路由器NAT穿越失败问题" class="headerlink" title="switch连接openwrt路由器NAT穿越失败问题"></a>switch连接openwrt路由器NAT穿越失败问题</h1><p>首先说结论，解决问题的办法是<code>ShadowSocksR Plus+</code>需要代理的端口要改成“所有端口”。</p><h2 id="问题的来源"><a href="#问题的来源" class="headerlink" title="问题的来源"></a>问题的来源</h2><p>我需要路由器给我的switch（任天堂游戏机）做代理，我家里的老路由器NAT类型是B，虽然能匹配到马车8，但是感觉延迟很大，而且大乱斗的竞猜观也看不了。正好我有一个刷过openwrt（QWRT）的路由器。</p><h2 id="试错"><a href="#试错" class="headerlink" title="试错"></a>试错</h2><p>我第一个想法是有线桥接。lan to lan 这样接起来，然后让主路由器分配ip，副路由器只负责当交换机。</p><p>但是不知道为什么网上的桥接教程我都不能成功实现。他们教的把副路由器lan口ip改成主路由器lan口ip统一网段的这一步，每当我改完ip然后路由器就失联了，也没有网。</p><p>好在我直接拔电源再插回去，路由器的系统会重置为出厂化设置。研究了几个小时之后我发现路由器并不是失联了，而是我没有正确的访问。我不知道原因是什么，我电脑网线连接路由器之所以找不到路由器配置网址，好像是因为改lan口ip后新的网络ip并没有分配给电脑，然后电脑和路由器panel在不同的网段里，所以不能访问。</p><p>解决办法就是在电脑控制面板里找到适配器设置（Control Panel-&gt;All Control Panel Items-&gt;Network and Sharing Center-&gt;Change adapter settings），将以太网属性里的ipv4设置为手动ip，设置为和更改panel的ip的同一网段的不同ip上。</p><p><img src="https://images.whff521.top/69968835425934D848C83A3278D54FF2.png" alt="ipv4"></p><p>如图，假设主路由器Default Gateway是192.168.3.1，这个如果不知道就用电脑连接主路由器，然后Terminal里输入<code>ipconfig /all</code>查看。然后路由器lan设置为192.168.3.2,只需要上图一样配置，将自己电脑ip改为同一网段的不同ip即可。然后再输入192.168.3.2就能够再次访问到路由器panel。</p><p>这里解释一下为什么192.168.1.1和192.168.3.1是不同网段，主要是因为家庭路由器的子网掩码是255.255.255.0。这里涉及到计网的知识。这个子网掩码应该按照二进制的思维思考，前面都是111111…后面是0,然后第三个字段的3和1仍然还是不同网段，但是第四个字段对应的0属于同一网段。</p><h2 id="可能是正解"><a href="#可能是正解" class="headerlink" title="可能是正解"></a>可能是正解</h2><p>重置路由器后，网线插在wan口上，wan口协议设置为DHCP服务端即可。这样副路由器就应该有网了。</p><p>当然这样的做法使得主副路由器会在不同的网段中，共享打印机那种场景应该会出问题，但是我并没有这种场景。</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>我为什么排除了vpn的问题而是一心觉得是因为不同网段的问题。第一因为这个路由器在学校的时候运作十分正常，第二chatgpt告诉我可能是因为双重NAT导致的。显然我的决策是有误的。</p><p>因为开梯子和不开梯子NAT类型都是B，而且开梯子后反而完不了马车8了让我心急如焚。我不知道为什么<code>ShadowSocksR Plus+</code>的代理端口为什么被改成了“不代理p2p流量”，这一个设置让我折腾了快一天的时间：</p><p><img src="https://images.whff521.top/Screenshot%202025-01-05%20at%2008.58.42.png" alt="search history"></p><p>这是部分搜索截图。</p><p>最后看到NAT类型变成A，然后狠狠打了几把NS Sports，还是很开心的。</p>]]></content>
    
    
    <summary type="html">因为一个简单的设置导致度过了痛苦的几个小时的解决问题的时间</summary>
    
    
    
    <category term="计算机相关" scheme="https://blog.whff521.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="openwrt" scheme="https://blog.whff521.xyz/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>springboot中jwt的使用</title>
    <link href="https://blog.whff521.xyz/2024/12/29/springboot%E4%B8%ADjwt%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.whff521.xyz/2024/12/29/springboot%E4%B8%ADjwt%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-12-29T00:17:54.000Z</published>
    <updated>2024-12-29T01:19:52.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot中jwt的使用"><a href="#Spring-Boot中jwt的使用" class="headerlink" title="Spring Boot中jwt的使用"></a>Spring Boot中jwt的使用</h1><p>记录一下现在我是怎么实现jwt的。为什么说是现在呢？说实话这是我第三次在Spring Boot里添加JWT，但是每次添加的方式和代码因为查阅的资料不同，实现的方式也不太一样。当然jwt终究是jwt，大同小异。</p><p>我用的版本比较新，所以很多方法都被标注了过期，我也没有去深入研究最新的代码究竟应该怎么实现。</p><p>Spring Boot版本是3.3.5， jjwt用的0.12.6。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>用的是<code>jjwt</code>实现jwt，<code>spring-security</code>实现拦截。</p><p>在pom.xml里添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JwtUtil-文件"><a href="#JwtUtil-文件" class="headerlink" title="JwtUtil 文件"></a>JwtUtil 文件</h2><p>这是为了实现<code>jwt</code>而创建的工具类，建议放在项目文件夹的<code>utils</code>文件夹里，和<code>controller</code>文件夹同级。代码中的<code>jwt.secret</code>,<code>jwt.expiration</code>是写在<code>application.properties</code>里的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jwt.secret=XXXXXXXXXXXXX</span><br><span class="line">jwt.expiration=604800000</span><br></pre></td></tr></table></figure><p>这里的<code>jwt.secret</code>必须满足一定的要求：HS256 算法要求签名密钥的大小至少为 256 位（即 32 字节）。并且写在文件里的是用Base64加密过的。Base64 编码的目的是让二进制密钥在传输和存储时更加安全和兼容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.airomance.easytravelroute.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.security.Keys;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> expirationTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SecretKey <span class="title function_">getSecretKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] decodedKey = Base64.getDecoder().decode(secretKey);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(decodedKey, <span class="number">0</span>, decodedKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setSubject(username)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expirationTime))</span><br><span class="line">                .signWith(getSecretKey())</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从JWT中获取用户名</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">extractUsername</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> extractClaim(token, Claims::getSubject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从JWT中获取任何信息</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; T <span class="title function_">extractClaim</span><span class="params">(String token, ClaimsResolver&lt;T&gt; claimsResolver)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> extractAllClaims(token);</span><br><span class="line">        <span class="keyword">return</span> claimsResolver.resolve(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从JWT中提取所有声明</span></span><br><span class="line">    <span class="keyword">private</span> Claims <span class="title function_">extractAllClaims</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(getSecretKey())</span><br><span class="line">                .build()</span><br><span class="line">                .parseSignedClaims(token)</span><br><span class="line">                .getPayload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证JWT</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token, String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (username.equals(extractUsername(token)) &amp;&amp; !isTokenExpired(token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查JWT是否过期</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> extractExpiration(token).before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提取JWT过期时间</span></span><br><span class="line">    <span class="keyword">private</span> Date <span class="title function_">extractExpiration</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> extractClaim(token, Claims::getExpiration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">ClaimsResolver</span>&lt;T&gt; &#123;</span><br><span class="line">        T <span class="title function_">resolve</span><span class="params">(Claims claims)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JwtAuthenticationFilter-文件"><a href="#JwtAuthenticationFilter-文件" class="headerlink" title="JwtAuthenticationFilter 文件"></a>JwtAuthenticationFilter 文件</h2><p>JWT 认证过滤器 (JwtAuthenticationFilter)，用于在每次 HTTP 请求时检查 JWT（JSON Web Token）是否有效，并在验证成功后设置用户身份认证信息。它是基于 Spring Security 的 OncePerRequestFilter 类，用于确保每个请求只被过滤一次。</p><ul><li>检查请求中的 JWT Token。</li><li>验证 Token 的有效性和格式。</li><li>如果 Token 有效，将用户信息设置到 Spring Security 的上下文中。</li><li>如果请求在白名单路径中，则跳过 JWT 检查。</li><li>如果 Token 无效或缺失，返回 HTTP 401 Unauthorized 错误。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.airomance.easytravelroute.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.airomance.easytravelroute.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(JwtAuthenticationFilter.class.getName());</span><br><span class="line">    <span class="comment">// 白名单路径列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] WHITE_LIST_PATHS = &#123;<span class="string">&quot;/users/loginByEmail&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtAuthenticationFilter</span><span class="params">(JwtUtil jwtUtil)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtUtil = jwtUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果请求是白名单路径，跳过 JWT 校验</span></span><br><span class="line">        <span class="keyword">if</span> (isWhiteListed(request)) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);  <span class="comment">// 直接继续请求链，不做认证</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getJwtFromRequest(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 token 不为空且有效，进行身份认证</span></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (jwtUtil.validateToken(token, jwtUtil.extractUsername(token))) &#123;</span><br><span class="line">                    <span class="comment">// 如果 JWT 有效，设置身份认证</span></span><br><span class="line">                    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span></span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(jwtUtil.extractUsername(token), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Token 无效，返回 401 错误</span></span><br><span class="line">                    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">                    response.getWriter().write(<span class="string">&quot;Invalid or expired JWT token&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JwtException e) &#123;</span><br><span class="line">                <span class="comment">// 捕获解析异常，返回 401 错误</span></span><br><span class="line">                logger.log(Level.SEVERE, <span class="string">&quot;Your error message here&quot;</span>, e);</span><br><span class="line">                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;Invalid JWT token format&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Token 缺失，返回 401 错误</span></span><br><span class="line">            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;JWT token is missing&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继续过滤链</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从请求头部获取JWT Token</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getJwtFromRequest</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bearerToken</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (bearerToken != <span class="literal">null</span> &amp;&amp; bearerToken.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> bearerToken.substring(<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断请求路径是否在白名单中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isWhiteListed</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="keyword">for</span> (String path : WHITE_LIST_PATHS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (requestURI.equals(path)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SecurityConfig文件"><a href="#SecurityConfig文件" class="headerlink" title="SecurityConfig文件"></a>SecurityConfig文件</h2><p>Spring Security 的配置类，用于定义应用的安全策略，包括认证机制、过滤器链、密码加密方式等。它通过 SecurityFilterChain 自定义安全规则，并使用 JwtAuthenticationFilter 来实现基于 JWT 的认证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.airomance.easytravelroute.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.airomance.easytravelroute.filter.JwtAuthenticationFilter;</span><br><span class="line"><span class="keyword">import</span> com.airomance.easytravelroute.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityConfig</span><span class="params">(JwtUtil jwtUtil)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtUtil = jwtUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 添加自定义的 JwtAuthenticationFilter</span></span><br><span class="line">        http.addFilterBefore(<span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(jwtUtil), UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">                .authorizeRequests(authorizeRequests -&gt; authorizeRequests</span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/users/loginByEmail&quot;</span>).permitAll() <span class="comment">// 登录和注册不需要认证</span></span><br><span class="line">                        .anyRequest().authenticated() <span class="comment">// 其他请求需要认证</span></span><br><span class="line">                )</span><br><span class="line">                .csrf(csrf -&gt; csrf.disable()); <span class="comment">// 禁用 CSRF</span></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缺点和不足"><a href="#缺点和不足" class="headerlink" title="缺点和不足"></a>缺点和不足</h2><p>现在可以看到白名单需要在两个文件里都写一遍，原因是我想要在需要token的时候如果没有tokne的请求返回”JWT token is missing”，但是我发现<code>JwtAuthenticationFilter</code>如果不加入白名单判断，就会把所有没有token的都拦截了。</p><p>而且没有暂时没有加入角色控制，因为相关接口还没有写。</p>]]></content>
    
    
    <summary type="html">在项目中引入jwt</summary>
    
    
    
    <category term="毕业设计" scheme="https://blog.whff521.xyz/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="毕业设计" scheme="https://blog.whff521.xyz/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="jwt" scheme="https://blog.whff521.xyz/tags/jwt/"/>
    
  </entry>
  
</feed>
