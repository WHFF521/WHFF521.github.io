<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AiRomance</title>
  <icon>https://blog.whff521.xyz/images/101.ico</icon>
  <subtitle>爱裸漫三三</subtitle>
  <link href="https://blog.whff521.xyz/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://blog.whff521.xyz/"/>
  <updated>2024-12-19T10:32:33.937Z</updated>
  <id>https://blog.whff521.xyz/</id>
  
  <author>
    <name>AiRomance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于自主学习</title>
    <link href="https://blog.whff521.xyz/2024/12/19/%E5%85%B3%E4%BA%8E%E8%87%AA%E4%B8%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.whff521.xyz/2024/12/19/%E5%85%B3%E4%BA%8E%E8%87%AA%E4%B8%BB%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-12-19T10:30:32.000Z</published>
    <updated>2024-12-19T10:32:33.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于自主学习"><a href="#关于自主学习" class="headerlink" title="关于自主学习"></a>关于自主学习</h1><p>最近也是因为在考研，休闲时间会看《觉醒年代》，今天看到一个英语作文在讲激励式教育。</p><p>激励式教育并不可取，因为如果激励消失后，孩子很难再有动力去学习。</p><p>学习究竟是为了什么，这个问题着实需要自己认真思考一下。</p><p>小学到大学的学习可能都只是仅仅想要升学到更好的学校。所以只需要按部就班的学习，做对试卷上的题目就能一天天混日子。从来没有想过学习本身到底是什么。学习本身绝不仅仅是背许多课文，学许多英语单词，考很高的分数。</p><p>为什么要学习？直到高考后选择专业时可能才是某些人第一次问自己想要干什么的时间。自己的理想和梦想的设立，决定和影响着我们人生未来的发展。但是长达九年的义务教育，是否给自己树立了正确的人生观价值观世界观呢？我自己当然是想成为一名程序员，因为电脑工作者很酷，很帅，能够解决很多有趣的问题，实现很多便利的功能。</p><p>那么实现自己的梦想就是需要学习。到了大学之后就不全是老师带着学生死磕课本的学习模式了，自主学习会逐渐成为大学生学习的常态。你想要成为前端工程师，那就去自学html，js，css，vue，react等，想要当后端工程师就要努力钻研spring boot，java，radis等。</p><p>但实际上这种自主学习的目的也并不单纯。比如想要成为程序员是因为薪资高，那么努力学习的目的可能就转变成了为了以后的薪资。那么和激励式教育又有何不同呢？不过是一个是父母给你东西一个是老板给你钱罢了。</p><p>《觉醒年代》中第一次世界大战结束后，一句话传遍中国，那就是“真理战胜强权”。我觉得，追求真理的学习才是真正的自主学习。这是一种纯粹的，学术上的以及实践上的，科学地认识事物发展规律的过程。求知的欲望从物质的满足转化为精神上的满足。何为真理？真理即是正确的，满足事物发展规律的理论，能够服务于大众，服务于社会的。真理可以根据实际情况而拓展和延伸，应用于万事万物。</p><p>那我们之前的学习还是否有意义？我不管什么真理，假理，我学习就是为了钱，为了自己未来的生活，这行不行？这当然行，大行特行。如果否认了这种学习，就是否认了真理。人们常说失败乃成功之母，真理的发现和归纳也是从无数次失败的实践中得来的。只要是前进性的学习，就不能停歇。巨人的肩膀从来不是一个人的肩膀，而是千千万万的民众用千千万万的实践搭建出来的。</p><p>举个例子，如果一开始的学习是为了一份好工作，那么在学习的过程中你会对这份“好工作”有很多新的认识。哦，原来是这样解决问题的；哦，原来还可以这样用吗。学了很长一段时间之后，你可能觉得自己已经很好的掌握了这种知识，也能够胜任这份“好工作了”。很大概率你确实可以获得这份工作，那之后呢？你想过没有，学习的这个过程远远没有停止。在工作上你会遇到各种各样的问题，往往还是书本上，网络上没有教给你的问题。起初你可能会花费很长时间去解决奇怪的问题，但是随着时间的推移你会越来越熟练，这是因为什么？这正是我讲的“真理”在起作用。在实践中你越来越接近“真理”，所以你越来越懂得用“真理”解决问题。所以你解决问题的速度越来越快，因为这些问题都是同一类“真理”的衍生问题。</p><p>但是还有一类问题是无法解决的。就是框架的物理限制。对于程序员来说，运用的所有功能往往取决于框架提供了什么功能。如果框架没有提供这个功能，而问题的解决需要这个功能，最好的解决办法就是你去实现这个功能。通常来讲这就是开源项目成员比较多的提供贡献的理由。功能的实现肯定不是凭空想象，或许是借鉴于其他框架，或许是借鉴于生活。从用轮子到造轮子的这一过程，离不开自主学习。</p><p>目的仅仅是追求真理吗？追求到真理之后还有学会宣传真理。造了轮子没人用，那意义就微乎其微了。但是究竟该怎么宣传我尚不得知，也正是我以后学习应该注意到的点吧。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;关于自主学习&quot;&gt;&lt;a href=&quot;#关于自主学习&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://blog.whff521.xyz/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="杂谈" scheme="https://blog.whff521.xyz/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>第36次CCF CSP计算机软件能力认证记录</title>
    <link href="https://blog.whff521.xyz/2024/12/14/%E7%AC%AC36%E6%AC%A1CCF-CSP%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6%E8%83%BD%E5%8A%9B%E8%AE%A4%E8%AF%81%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.whff521.xyz/2024/12/14/%E7%AC%AC36%E6%AC%A1CCF-CSP%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E4%BB%B6%E8%83%BD%E5%8A%9B%E8%AE%A4%E8%AF%81%E8%AE%B0%E5%BD%95/</id>
    <published>2024-12-14T03:45:40.000Z</published>
    <updated>2024-12-14T07:20:26.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第36次CCF-CSP计算机软件能力认证记录"><a href="#第36次CCF-CSP计算机软件能力认证记录" class="headerlink" title="第36次CCF CSP计算机软件能力认证记录"></a>第36次CCF CSP计算机软件能力认证记录</h1><p>本次应该是我最后一次参加CSP了，明年就毕业了。遗憾的是这次也仅仅只是拿了300分。需要走的路还很远很远。</p><p><img src="https://images.whff521.top/csp300.png" alt="csp300"></p><p>今天去官网看见能把代码下载下来了，就记录一下。</p><p>然而这并不是完整的题解，只是我自身心路历程的记录。如果想看完整的题解的话我推荐<a href="https://www.cnblogs.com/luckyblock/p/18596275">这篇博客</a></p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>简单模拟签到题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mxlen = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">types</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;f&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">if</span>(c==<span class="string">&#x27;b&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(c==<span class="string">&#x27;l&#x27;</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">if</span>(c==<span class="string">&#x27;r&#x27;</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">walk</span><span class="params">(<span class="type">int</span> startx,<span class="type">int</span> starty,string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> tempx = startx+dx[<span class="built_in">types</span>(s[i])];</span><br><span class="line">        <span class="type">int</span> tempy = starty+dy[<span class="built_in">types</span>(s[i])];</span><br><span class="line">        <span class="keyword">if</span>(tempx&lt;=<span class="number">0</span>||tempx&gt;n||tempy&lt;=<span class="number">0</span>||tempy&gt;n) <span class="keyword">continue</span>;</span><br><span class="line">        startx = tempx;</span><br><span class="line">        starty = tempy;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;startx&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;starty&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string temp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;temp;</span><br><span class="line">        <span class="built_in">walk</span>(x,y,temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="built_in">work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>没有想出来正解，暴力算出来每个位置b变成0时需要的最少w。看别人的做法应该是用求和公式写不等式然后用前缀和做。出题人的仁慈，暴力有80分。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mxlen = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[mxlen],b[mxlen];</span><br><span class="line"><span class="type">int</span> needE[mxlen];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">work</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> originE = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i!=x) temp+=b[i];</span><br><span class="line">       temp-=a[i];</span><br><span class="line">        <span class="keyword">if</span>(temp&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            originE+=-temp;</span><br><span class="line">            temp = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> originE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">work</span>(i)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>模拟Cache，（学过计组的有福了）。但是最后应该是因为直接用二维数组暴力维护最近使用的内存所以TLE了一个点，只拿了90分。赛后想起来如果用deque声明数组做把排序操作时间复杂度降下来应该就能过了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mxlen = <span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> n,N;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">bool</span> changed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node v[mxlen][mxlen];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            v[i][j].id=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wirte</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;id&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;id&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">findInCache</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=(id/n)%N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i][j].id==<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(v[i][j].id==id) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loadCache</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i=(id/n)%N;</span><br><span class="line">    node qw;</span><br><span class="line">    qw.id = id;qw.changed=<span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i][j].id==<span class="number">-1</span>)&#123;</span><br><span class="line">            v[i][j].id=qw.id;</span><br><span class="line">            v[i][j].changed = qw.changed;</span><br><span class="line">            ok=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ok) &#123;<span class="built_in">read</span>(id);;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(v[i][n<span class="number">-1</span>].changed) <span class="built_in">wirte</span>(v[i][n<span class="number">-1</span>].id);</span><br><span class="line">    v[i][n<span class="number">-1</span>].id = qw.id;</span><br><span class="line">    v[i][n<span class="number">-1</span>].changed = qw.changed;</span><br><span class="line">    <span class="built_in">read</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wirteCache</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=(id/n)%N;</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i][j].id==id)&#123;</span><br><span class="line">            pos = j;</span><br><span class="line">            v[i][j].changed = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node temp;</span><br><span class="line">    temp.id = v[i][pos].id;</span><br><span class="line">    temp.changed = v[i][pos].changed;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=pos;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">        v[i][j].id = v[i][j<span class="number">-1</span>].id;</span><br><span class="line">        v[i][j].changed = v[i][j<span class="number">-1</span>].changed;</span><br><span class="line">    &#125;</span><br><span class="line">    v[i][<span class="number">0</span>].id = temp.id;</span><br><span class="line">    v[i][<span class="number">0</span>].changed = temp.changed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">readInCache</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=(id/n)%N;</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i][j].id==id)&#123;</span><br><span class="line">            pos = j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    node temp;</span><br><span class="line">    temp.id = v[i][pos].id;</span><br><span class="line">    temp.changed = v[i][pos].changed;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=pos;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">        v[i][j].id = v[i][j<span class="number">-1</span>].id;</span><br><span class="line">        v[i][j].changed = v[i][j<span class="number">-1</span>].changed;</span><br><span class="line">    &#125;</span><br><span class="line">    v[i][<span class="number">0</span>].id = temp.id;</span><br><span class="line">    v[i][<span class="number">0</span>].changed = temp.changed;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> type,a;</span><br><span class="line">        cin&gt;&gt;type&gt;&gt;a;</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">findInCache</span>(a))&#123;</span><br><span class="line">                <span class="built_in">readInCache</span>(a);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">loadCache</span>(a);</span><br><span class="line">                <span class="built_in">readInCache</span>(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">findInCache</span>(a))&#123;</span><br><span class="line">                <span class="built_in">wirteCache</span>(a);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">loadCache</span>(a);</span><br><span class="line">                <span class="built_in">wirteCache</span>(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;N;</span><br><span class="line">        <span class="built_in">work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><p>这道题更是没有思路。正解应该是DP。赛场上只想到了把所有能到的点用边长为1的边连接，然后dijkstra求最短路，只拿了30分。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mxlen = <span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[mxlen],k[mxlen];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    ll v,w,next;</span><br><span class="line">&#125;G[mxlen];</span><br><span class="line">ll head[mxlen],cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll u,ll v,ll w)</span></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    G[cnt].w=w;</span><br><span class="line">    G[cnt].v=v;</span><br><span class="line">    G[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    ll d,u;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; t)<span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> d&gt;t.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int pre[mxlen],last[mxlen],other[mxlen],len[mxlen],l;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void add(int x,int y,int z)&#123;</span></span><br><span class="line"><span class="comment">//     l++;</span></span><br><span class="line"><span class="comment">//     pre[l] = last[x];</span></span><br><span class="line"><span class="comment">//     last[x] = l;</span></span><br><span class="line"><span class="comment">//     other[l] = y;</span></span><br><span class="line"><span class="comment">//     len[l] = z;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">ll dis[mxlen];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>((node)&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        node temp = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ll u =temp.u;</span><br><span class="line">        ll d = temp.d;</span><br><span class="line">        <span class="keyword">if</span>(d!=dis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=G[i].next)&#123;</span><br><span class="line">            ll v=G[i].v,w=G[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[u]+w&lt;dis[v])&#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">                q.<span class="built_in">push</span>((node)&#123;dis[v],v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[n]==dis[<span class="number">0</span>]) <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;=<span class="built_in">min</span>(n,i+k[i]);j++)&#123;</span><br><span class="line">                <span class="built_in">add</span>(i,j-a[j],<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后时间不够了，也没有时间去分析最后一题了，看了一眼根本没看懂呜呜呜。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第36次CCF-CSP计算机软件能力认证记录&quot;&gt;&lt;a href=&quot;#第36次CCF-CSP计算机软件能力认证记录&quot; class=&quot;headerlink&quot; title=&quot;第36次CCF CSP计算机软件能力认证记录&quot;&gt;&lt;/a&gt;第36次CCF</summary>
        
      
    
    
    
    <category term="算法题" scheme="https://blog.whff521.xyz/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法" scheme="https://blog.whff521.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="csp" scheme="https://blog.whff521.xyz/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>毕业设计day0</title>
    <link href="https://blog.whff521.xyz/2024/11/19/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1day0/"/>
    <id>https://blog.whff521.xyz/2024/11/19/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1day0/</id>
    <published>2024-11-19T02:44:09.000Z</published>
    <updated>2024-11-19T09:21:10.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>此为记录毕业设计中代码实现功能记录的系列。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>目前只是创建了项目初始文件和git仓库，由于尚未完成，所以github仓库暂为私有不公开状态。</p><h3 id="后端-SpringBoot"><a href="#后端-SpringBoot" class="headerlink" title="后端 SpringBoot"></a>后端 SpringBoot</h3><p>创建项目截图如下：</p><p><img src="https://images.whff521.top/Screenshot%202024-11-19%20at%2010.58.59.png" alt="springboot1"></p><p><img src="https://images.whff521.top/Screenshot%202024-11-19%20at%2011.00.43.png" alt="springboot2"></p><p>Maven仓库，java17，jar包，Spring Boot 3.3.5，预装插件为 MySQL Driver，Lombok，Spring Web</p><h3 id="前端-Android"><a href="#前端-Android" class="headerlink" title="前端 Android"></a>前端 Android</h3><p>创建截图如下：</p><p><img src="https://images.whff521.top/Screenshot%202024-11-17%20at%2018.56.37.png" alt="android"></p><p>java编写， Minimum SDK：API24(Android 7.0),Groovy DSL 构建。</p><p>因为感觉好玩，初始选了Android Studio给的Navigation Drawer Views Activity，现在用这种布局的软件比较少，打算做一个和小红书差不多的。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Day-0&quot;&gt;&lt;a href=&quot;#Day-0&quot; class=&quot;headerlink&quot; title=&quot;Day 0&quot;&gt;&lt;/a&gt;Day 0&lt;/h1&gt;&lt;p&gt;此为记录毕业设计中代码实现功能记录的系列。&lt;/p&gt;
&lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot;</summary>
        
      
    
    
    
    <category term="毕业设计" scheme="https://blog.whff521.xyz/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="毕业设计" scheme="https://blog.whff521.xyz/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="https://blog.whff521.xyz/2024/10/31/%E6%8E%92%E5%BA%8F/"/>
    <id>https://blog.whff521.xyz/2024/10/31/%E6%8E%92%E5%BA%8F/</id>
    <published>2024-10-31T01:38:09.000Z</published>
    <updated>2024-11-14T09:32:00.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>在数据结构中，<strong>排序</strong>（Sorting）指的是将一个数据集合中的元素按指定顺序重新排列的过程。排序是计算机科学的基本操作之一，对数据处理和分析具有重要作用。排序的结果通常是按从小到大（升序）或从大到小（降序）排列的有序序列。</p><h2 id="排序的基本概念"><a href="#排序的基本概念" class="headerlink" title="排序的基本概念"></a>排序的基本概念</h2><ol><li><p><strong>内部排序和外部排序</strong>：</p><ul><li><strong>内部排序</strong>：数据量较小，能够将所有待排序的记录一次性加载到内存中完成排序。</li><li><strong>外部排序</strong>：数据量较大，无法一次加载到内存中，需要借助外存（如硬盘）分批次处理并排序。</li></ul></li><li><p><strong>稳定性</strong>：</p><ul><li><strong>稳定排序</strong>：若两个相等的元素在排序前后的相对位置不变，则排序算法是稳定的。例如，若记录有相同的键值，稳定排序会保持它们的初始顺序。</li><li><strong>不稳定排序</strong>：可能会改变相等元素的相对位置。</li></ul></li><li><p><strong>时间复杂度</strong>：排序算法的时间复杂度通常以 $O(n^2)$ 或 $O(n \log n)$ 为主，决定了其在不同规模数据上的效率。</p></li><li><p><strong>空间复杂度</strong>：算法在排序过程中额外占用的存储空间。部分排序算法只需少量辅助空间（如原地排序），而有些则需要较多的辅助空间。</p></li><li><p><strong>排序算法的适用场景</strong>：根据数据量、数据特性（如是否近似有序）以及稳定性要求，选择合适的排序算法。</p></li></ol><h2 id="常见的排序算法及其特性"><a href="#常见的排序算法及其特性" class="headerlink" title="常见的排序算法及其特性"></a>常见的排序算法及其特性</h2><h3 id="1-冒泡排序（Bubble-Sort）："><a href="#1-冒泡排序（Bubble-Sort）：" class="headerlink" title="1. 冒泡排序（Bubble Sort）："></a>1. <strong>冒泡排序（Bubble Sort）</strong>：</h3><ul><li><strong>基本思想</strong>：通过重复遍历待排序的序列，依次比较相邻元素，将较大或较小的元素向后交换。</li><li><strong>时间复杂度</strong>：$O(n^2)$</li><li><strong>特点</strong>：简单但效率低，适用于数据量小的情况。</li><li><strong>稳定性</strong>：稳定<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">bool</span> swapped = <span class="literal">false</span>; <span class="comment">// 用于检测是否发生交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换 arr[j] 和 arr[j + 1]</span></span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果在一轮遍历中没有发生交换，说明数组已排序</span></span><br><span class="line">        <span class="keyword">if</span> (!swapped) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubbleSort</span>(arr, n);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sorted array: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-选择排序（Selection-Sort）："><a href="#2-选择排序（Selection-Sort）：" class="headerlink" title="2. 选择排序（Selection Sort）："></a>2. <strong>选择排序（Selection Sort）</strong>：</h3><ul><li><strong>基本思想</strong>：每次从未排序部分选择最小（或最大）元素，放在已排序部分的末尾。</li><li><strong>时间复杂度</strong>：$O(n^2)$</li><li><strong>特点</strong>：减少了交换次数，但依然不适合大型数据。</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="3-插入排序（Insertion-Sort）："><a href="#3-插入排序（Insertion-Sort）：" class="headerlink" title="3. 插入排序（Insertion Sort）："></a>3. <strong>插入排序（Insertion Sort）</strong>：</h3><ul><li><strong>基本思想</strong>：将待排序数据分成已排序和未排序两部分，逐个将未排序元素插入已排序部分的正确位置。</li><li><strong>时间复杂度</strong>：$O(n^2)$</li><li><strong>特点</strong>：适用于小规模或近乎有序的序列。</li><li><strong>稳定性</strong>：稳定<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> key = arr[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将当前元素插入到已排序部分</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j = j - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">insertionSort</span>(arr, n);</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sorted array: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-归并排序（Merge-Sort）："><a href="#4-归并排序（Merge-Sort）：" class="headerlink" title="4. 归并排序（Merge Sort）："></a>4. <strong>归并排序（Merge Sort）</strong>：</h3><ul><li><strong>基本思想</strong>：采用分治法，将数据分成子序列分别排序，再将有序子序列合并为完整序列。</li><li><strong>时间复杂度</strong>：$O(n \log n)$</li><li><strong>特点</strong>：效率高，适用于大型数据集，但需要额外存储空间。</li><li><strong>稳定性</strong>：稳定<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n1 = mid - left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n2 = right - mid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建临时数组</span></span><br><span class="line">    <span class="type">int</span>* leftArr = <span class="keyword">new</span> <span class="type">int</span>[n1];</span><br><span class="line">    <span class="type">int</span>* rightArr = <span class="keyword">new</span> <span class="type">int</span>[n2];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝数据到临时数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; i++)</span><br><span class="line">        leftArr[i] = arr[left + i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n2; j++)</span><br><span class="line">        rightArr[j] = arr[mid + <span class="number">1</span> + j];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并临时数组到原数组</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = left;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (leftArr[i] &lt;= rightArr[j]) &#123;</span><br><span class="line">            arr[k] = leftArr[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[k] = rightArr[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝剩余元素（如果有）</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1) &#123;</span><br><span class="line">        arr[k] = leftArr[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &lt; n2) &#123;</span><br><span class="line">        arr[k] = rightArr[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放临时数组</span></span><br><span class="line">    <span class="keyword">delete</span>[] leftArr;</span><br><span class="line">    <span class="keyword">delete</span>[] rightArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归排序左右两部分</span></span><br><span class="line">        <span class="built_in">mergeSort</span>(arr, left, mid);</span><br><span class="line">        <span class="built_in">mergeSort</span>(arr, mid + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并排序后的两部分</span></span><br><span class="line">        <span class="built_in">merge</span>(arr, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mergeSort</span>(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sorted array: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-快速排序（Quick-Sort）："><a href="#5-快速排序（Quick-Sort）：" class="headerlink" title="5. 快速排序（Quick Sort）："></a>5. <strong>快速排序（Quick Sort）</strong>：</h3><ul><li><strong>基本思想</strong>：同样采用分治法，通过选择一个基准元素将数组分为两部分，再对每部分递归排序。</li><li><strong>时间复杂度</strong>：平均 $O(n \log n)$，最差 $O(n^2)$</li><li><strong>特点</strong>：通常比其他排序算法快，适合大型数据集，但对有序数组性能不佳。</li><li><strong>稳定性</strong>：不稳定<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot = arr[high]; <span class="comment">// 选择最后一个元素作为枢轴</span></span><br><span class="line">    <span class="type">int</span> i = low - <span class="number">1</span>;       <span class="comment">// i 是较小元素的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = low; j &lt; high; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt; pivot) &#123; </span><br><span class="line">            i++;</span><br><span class="line">            <span class="built_in">swap</span>(arr[i], arr[j]); <span class="comment">// 将较小的元素交换到前面</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(arr[i + <span class="number">1</span>], arr[high]); <span class="comment">// 将枢轴放到正确位置</span></span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;                <span class="comment">// 返回枢轴的索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> pi = <span class="built_in">partition</span>(arr, low, high); <span class="comment">// 获取分区索引</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">quickSort</span>(arr, low, pi - <span class="number">1</span>); <span class="comment">// 递归排序左半部分</span></span><br><span class="line">        <span class="built_in">quickSort</span>(arr, pi + <span class="number">1</span>, high); <span class="comment">// 递归排序右半部分</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quickSort</span>(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sorted array: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-堆排序（Heap-Sort）："><a href="#6-堆排序（Heap-Sort）：" class="headerlink" title="6. 堆排序（Heap Sort）："></a>6. <strong>堆排序（Heap Sort）</strong>：</h3><ul><li><strong>基本思想</strong>：利用堆这种数据结构进行排序，将数组构建成最大堆或最小堆，逐步取出堆顶元素排序。</li><li><strong>时间复杂度</strong>：$O(n \log n)$</li><li><strong>特点</strong>：时间复杂度稳定，但不适合小规模数据。</li><li><strong>稳定性</strong>：不稳定<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将节点 i 及其子树调整为最大堆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> largest = i;         <span class="comment">// 将当前节点 i 设为最大值</span></span><br><span class="line">    <span class="type">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;    <span class="comment">// 左子节点</span></span><br><span class="line">    <span class="type">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;   <span class="comment">// 右子节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果左子节点大于当前最大值</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果右子节点大于当前最大值</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果最大值不是当前节点，则交换并递归调整</span></span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        std::<span class="built_in">swap</span>(arr[i], arr[largest]);</span><br><span class="line">        <span class="built_in">heapify</span>(arr, n, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主堆排序函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 建立最大堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">heapify</span>(arr, n, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐一提取元素，重建最大堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        std::<span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[i]); <span class="comment">// 将堆顶元素移到数组末尾</span></span><br><span class="line">        <span class="built_in">heapify</span>(arr, i, <span class="number">0</span>);         <span class="comment">// 对剩余的元素重新进行堆化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">heapSort</span>(arr, n);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sorted array: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-希尔排序（Shell-Sort）："><a href="#7-希尔排序（Shell-Sort）：" class="headerlink" title="7. 希尔排序（Shell Sort）："></a>7. <strong>希尔排序（Shell Sort）</strong>：</h3><ul><li><strong>基本思想</strong>：插入排序的改进版，逐步将数据分组并进行插入排序，最后整体排序。</li><li><strong>时间复杂度</strong>：介于 $O(n)$ 和 $O(n^2)$ 之间，具体取决于增量序列。</li><li><strong>特点</strong>：相对高效，尤其在数据量较大时。</li><li><strong>稳定性</strong>：不稳定</li></ul><h3 id="8-计数排序（Counting-Sort）："><a href="#8-计数排序（Counting-Sort）：" class="headerlink" title="8. 计数排序（Counting Sort）："></a>8. <strong>计数排序（Counting Sort）</strong>：</h3><ul><li><strong>基本思想</strong>：适合数据范围较小的整数序列，通过统计数据出现的次数进行排序。</li><li><strong>时间复杂度</strong>：$O(n + k)$，其中 $k$ 为数值范围。</li><li><strong>特点</strong>：非常高效，但仅适用于特定场景。</li><li><strong>稳定性</strong>：稳定</li></ul><h3 id="9-基数排序（Radix-Sort）："><a href="#9-基数排序（Radix-Sort）：" class="headerlink" title="9. 基数排序（Radix Sort）："></a>9. <strong>基数排序（Radix Sort）</strong>：</h3><ul><li><strong>基本思想</strong>：按数位或字符位置逐步排序，适合整数或字符串等定长数据。</li><li><strong>时间复杂度</strong>：$O(d \times (n + k))$，其中 $d$ 是位数，$k$ 为基数。</li><li><strong>特点</strong>：适用于数值或字符数据，效率高。</li><li><strong>稳定性</strong>：稳定<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组中最大元素的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMax</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数排序，用于按特定位数对数组排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">countSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> exp)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* output = <span class="keyword">new</span> <span class="type">int</span>[n]; <span class="comment">// 输出数组</span></span><br><span class="line">    <span class="type">int</span> count[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;      <span class="comment">// 计数数组（基数范围为 0 到 9）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计在当前位数出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count[(arr[i] / exp) % <span class="number">10</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算累积和，更新 count 数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建输出数组，按当前位数排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> index = (arr[i] / exp) % <span class="number">10</span>;</span><br><span class="line">        output[count[index] - <span class="number">1</span>] = arr[i];</span><br><span class="line">        count[index]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将排序好的数据拷贝回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = output[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基数排序的主函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">radixSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="built_in">getMax</span>(arr, n); <span class="comment">// 获取最大元素以确定最高位数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对每一位数进行计数排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> exp = <span class="number">1</span>; max / exp &gt; <span class="number">0</span>; exp *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">countSort</span>(arr, n, exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">radixSort</span>(arr, n);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sorted array: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>代码说明:</li></ul><ol><li><code>getMax</code> 函数用于找到数组中的最大值，确定排序过程中最高的位数。</li><li><code>countSort</code> 函数实现了针对当前位数的计数排序。<code>exp</code> 表示当前处理的位数（例如，个位、十位等），通过 <code>arr[i] / exp % 10</code> 提取该位上的数字。</li><li><code>radixSort</code> 函数调用 <code>countSort</code>，从最低位开始对数组进行多轮排序，直到最高位。<br>基数排序的时间复杂度为 $O(d \cdot (n + k))$，其中 $d$ 是数字的最大位数，$n$ 是数组长度，$k$ 是基数（通常为10）。在处理整数的情况下，它通常被认为是线性时间排序算法。</li></ol><h3 id="10-桶排序（Bucket-Sort）："><a href="#10-桶排序（Bucket-Sort）：" class="headerlink" title="10. 桶排序（Bucket Sort）："></a>10. <strong>桶排序（Bucket Sort）</strong>：</h3><ul><li><strong>基本思想</strong>：将数据分到不同的桶中，然后对每个桶进行排序，最后合并桶。</li><li><strong>时间复杂度</strong>：平均 $O(n + k)$</li><li><strong>特点</strong>：适合数据分布均匀的情况。</li><li><strong>稳定性</strong>：稳定（取决于桶内排序方法）</li></ul><h2 id="选择排序算法的依据"><a href="#选择排序算法的依据" class="headerlink" title="选择排序算法的依据"></a>选择排序算法的依据</h2><p>根据数据特性和需求，选择排序算法时一般考虑以下因素：</p><ul><li><strong>数据规模</strong>：数据规模小可以选择简单算法（如插入、选择、冒泡），规模较大可以考虑快速排序或归并排序。</li><li><strong>数据特性</strong>：若数据接近有序，选择插入排序；对于整数范围较小的数据，可以选择计数排序。</li><li><strong>稳定性要求</strong>：需要稳定的排序算法可以选择归并排序、计数排序、基数排序等。</li><li><strong>空间要求</strong>：对空间要求较高的场景可优先考虑堆排序或快速排序（可原地排序）。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://blog.whff521.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="排序" scheme="https://blog.whff521.xyz/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="https://blog.whff521.xyz/2024/10/31/%E5%9B%BE/"/>
    <id>https://blog.whff521.xyz/2024/10/31/%E5%9B%BE/</id>
    <published>2024-10-31T00:44:38.000Z</published>
    <updated>2024-10-31T01:27:38.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p><strong>图（Graph）</strong> 是一种用于表示关系的非线性数据结构，由<strong>顶点（节点，Vertices/Nodes）</strong>和<strong>边（Edges）</strong>组成，表示顶点之间的关系。图的概念适用于很多场景，比如社交网络（用户和好友关系）、地图（城市和路线）等。</p><h2 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h2><ol><li><strong>顶点（Vertex）</strong>：图中的基本单位，表示实体或对象。</li><li><strong>边（Edge）</strong>：连接两个顶点的线，表示它们之间的关系或路径。</li><li><strong>有向图（Directed Graph）</strong>：边有方向的图，边表示从一个顶点到另一个顶点的单向关系。</li><li><strong>无向图（Undirected Graph）</strong>：边没有方向的图，边表示顶点之间的双向关系。</li><li><strong>加权图（Weighted Graph）</strong>：每条边上都有一个权重或费用，用于表示顶点之间的距离或成本。</li><li><strong>邻接</strong>：如果两个顶点之间有直接边相连，则称它们是邻接的。</li><li><strong>路径（Path）</strong>：从一个顶点到另一个顶点的一条顶点序列，其中相邻顶点之间都有边相连。</li><li><strong>环（Cycle）</strong>：从一个顶点出发经过若干边回到该顶点的路径。</li><li><strong>连通图（Connected Graph）</strong>：在无向图中，任何两个顶点之间都可以找到路径的图。</li></ol><h2 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h2><ul><li><strong>邻接矩阵（Adjacency Matrix）</strong>：用二维数组表示顶点之间是否相连。</li><li><strong>邻接表（Adjacency List）</strong>：用链表或数组表示每个顶点相邻的顶点。</li></ul><p>以下是使用邻接矩阵和邻接表表示图的简洁 C++ 代码示例。</p><h3 id="邻接矩阵法"><a href="#邻接矩阵法" class="headerlink" title="邻接矩阵法"></a>邻接矩阵法</h3><p>邻接矩阵使用二维数组表示图，其中 <code>matrix[i][j] = 1</code> 表示顶点 <code>i</code> 和 <code>j</code> 之间有边，<code>0</code> 表示没有边。适合稠密图（边较多）的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphMatrix</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix;</span><br><span class="line">    <span class="type">int</span> numVertices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GraphMatrix</span>(<span class="type">int</span> vertices) &#123;</span><br><span class="line">        numVertices = vertices;</span><br><span class="line">        matrix.<span class="built_in">resize</span>(vertices, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(vertices, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> src, <span class="type">int</span> dest)</span> </span>&#123;</span><br><span class="line">        matrix[src][dest] = <span class="number">1</span>;</span><br><span class="line">        matrix[dest][src] = <span class="number">1</span>;  <span class="comment">// 如果是无向图</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; row : matrix) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> val : row)</span><br><span class="line">                cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">GraphMatrix <span class="title">graph</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    graph.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    graph.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    graph.<span class="built_in">addEdge</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    graph.<span class="built_in">addEdge</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    graph.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="邻接表法"><a href="#邻接表法" class="headerlink" title="邻接表法"></a>邻接表法</h3><p>邻接表使用链表或向量数组来存储图，每个顶点有一个链表（或向量）表示其相邻顶点，适合稀疏图（边较少）的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; adjList;</span><br><span class="line">    <span class="type">int</span> numVertices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GraphList</span>(<span class="type">int</span> vertices) &#123;</span><br><span class="line">        numVertices = vertices;</span><br><span class="line">        adjList.<span class="built_in">resize</span>(vertices);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> src, <span class="type">int</span> dest)</span> </span>&#123;</span><br><span class="line">        adjList[src].<span class="built_in">push_back</span>(dest);</span><br><span class="line">        adjList[dest].<span class="built_in">push_back</span>(src);  <span class="comment">// 如果是无向图</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertices; ++i) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> neighbor : adjList[i])</span><br><span class="line">                cout &lt;&lt; neighbor &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">GraphList <span class="title">graph</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    graph.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    graph.<span class="built_in">addEdge</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    graph.<span class="built_in">addEdge</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    graph.<span class="built_in">addEdge</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    graph.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><strong>邻接矩阵</strong>：适合用于边较多的图，空间复杂度为 (O(V^2))。</li><li><strong>邻接表</strong>：适合用于边较少的图，空间复杂度为 (O(V + E))，更节省空间。</li></ul><h2 id="图的遍历操作"><a href="#图的遍历操作" class="headerlink" title="图的遍历操作"></a>图的遍历操作</h2><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一条边（无向图）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; adjList, <span class="type">int</span> src, <span class="type">int</span> dest)</span> </span>&#123;</span><br><span class="line">    adjList[src].<span class="built_in">push_back</span>(dest);</span><br><span class="line">    adjList[dest].<span class="built_in">push_back</span>(src);  <span class="comment">// 无向图</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深度优先搜索（DFS）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DFS</span><span class="params">(<span class="type">int</span> start, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; adjList, vector&lt;<span class="type">bool</span>&gt;&amp; visited)</span> </span>&#123;</span><br><span class="line">    visited[start] = <span class="literal">true</span>;</span><br><span class="line">    cout &lt;&lt; start &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> neighbor : adjList[start]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">            <span class="built_in">DFS</span>(neighbor, adjList, visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 广度优先搜索（BFS）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(<span class="type">int</span> start, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; adjList, vector&lt;<span class="type">bool</span>&gt;&amp; visited)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    visited[start] = <span class="literal">true</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> v = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> neighbor : adjList[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                visited[neighbor] = <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(neighbor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> numVertices = <span class="number">5</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">adjList</span>(numVertices);  <span class="comment">// 邻接表表示图</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加边</span></span><br><span class="line">    <span class="built_in">addEdge</span>(adjList, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">addEdge</span>(adjList, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">addEdge</span>(adjList, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">addEdge</span>(adjList, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">addEdge</span>(adjList, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 深度优先搜索</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;DFS starting from vertex 0: &quot;</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(numVertices, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="built_in">DFS</span>(<span class="number">0</span>, adjList, visited);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广度优先搜索</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;BFS starting from vertex 0: &quot;</span>;</span><br><span class="line">    <span class="built_in">fill</span>(visited.<span class="built_in">begin</span>(), visited.<span class="built_in">end</span>(), <span class="literal">false</span>);  <span class="comment">// 重置访问标记</span></span><br><span class="line">    <span class="built_in">BFS</span>(<span class="number">0</span>, adjList, visited);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码说明：</p><ol><li><strong>邻接表的创建</strong>：用二维 <code>vector</code> 表示邻接表，其中 <code>adjList[i]</code> 存储顶点 <code>i</code> 的所有相邻顶点。</li><li><strong><code>addEdge</code></strong>：在邻接表中添加一条边。由于是无向图，所以需要添加双向连接。</li><li><strong>DFS</strong>：递归遍历所有相邻的未访问顶点，打印访问顺序。</li><li><strong>BFS</strong>：使用队列逐层遍历，打印访问顺序。</li><li><strong><code>visited</code></strong>：在 DFS 和 BFS 中用于标记访问过的顶点。</li></ol><h3 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DFS starting from vertex 0: 0 1 2 3 4 </span><br><span class="line">BFS starting from vertex 0: 0 1 2 3 4 </span><br></pre></td></tr></table></figure><ul><li><strong>DFS</strong> 先沿着一条路径深入，再回溯。</li><li><strong>BFS</strong> 逐层遍历，适合用于无权图中的最短路径查找。</li></ul><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>最小生成树（Minimum Spanning Tree，MST）。它用于找到一个无向加权连通图中连接所有顶点的最小代价子图。生成树的边数为 (V - 1)（其中 (V) 是顶点数），且没有环。生成树的总权重最小，即最小生成树。</p><h3 id="最小生成树的两个主要算法"><a href="#最小生成树的两个主要算法" class="headerlink" title="最小生成树的两个主要算法"></a>最小生成树的两个主要算法</h3><ol><li><p><strong>Kruskal 算法</strong>：</p><ul><li>基于“贪心算法”思想。</li><li>按权重从小到大排序所有边，并按顺序选择最小权重的边，只要它不形成环。</li><li>常用“并查集”来检测环。</li><li><strong>时间复杂度</strong>：(O(E \log E))，其中 (E) 是边数。</li></ul></li><li><p><strong>Prim 算法</strong>：</p><ul><li>也是基于“贪心算法”。</li><li>从任意一个顶点开始，将该顶点加入 MST，之后重复选择与已加入 MST 的顶点相邻的权重最小的边。</li><li>常用优先队列（最小堆）来优化边的选择。</li><li><strong>时间复杂度</strong>：(O(E \log V))。</li></ul></li></ol><h3 id="Kruskal-算法的实现（C-代码示例）"><a href="#Kruskal-算法的实现（C-代码示例）" class="headerlink" title="Kruskal 算法的实现（C++ 代码示例）"></a>Kruskal 算法的实现（C++ 代码示例）</h3><p>Kruskal 算法适合边较少的稀疏图，因为它的效率主要取决于边的数量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> src, dest, weight;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge&amp; other) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight &lt; other.weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent, rank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UnionFind</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        parent.<span class="built_in">resize</span>(n);</span><br><span class="line">        rank.<span class="built_in">resize</span>(n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[u] != u)</span><br><span class="line">            parent[u] = <span class="built_in">find</span>(parent[u]);  <span class="comment">// 路径压缩</span></span><br><span class="line">        <span class="keyword">return</span> parent[u];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">unionSets</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rootU = <span class="built_in">find</span>(u);</span><br><span class="line">        <span class="type">int</span> rootV = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (rootU == rootV)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// u 和 v 已经连接在一起</span></span><br><span class="line">        <span class="keyword">if</span> (rank[rootU] &gt; rank[rootV]) &#123;</span><br><span class="line">            parent[rootV] = rootU;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[rootU] &lt; rank[rootV]) &#123;</span><br><span class="line">            parent[rootU] = rootV;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent[rootV] = rootU;</span><br><span class="line">            ++rank[rootU];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskalMST</span><span class="params">(<span class="type">int</span> V, vector&lt;Edge&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edges.<span class="built_in">begin</span>(), edges.<span class="built_in">end</span>());  <span class="comment">// 按权重排序边</span></span><br><span class="line">    <span class="function">UnionFind <span class="title">uf</span><span class="params">(V)</span></span>;</span><br><span class="line">    <span class="type">int</span> mstWeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> Edge&amp; edge : edges) &#123;</span><br><span class="line">        <span class="keyword">if</span> (uf.<span class="built_in">unionSets</span>(edge.src, edge.dest)) &#123;  <span class="comment">// 无环则加入 MST</span></span><br><span class="line">            mstWeight += edge.weight;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Edge (&quot;</span> &lt;&lt; edge.src &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; edge.dest &lt;&lt; <span class="string">&quot;) with weight &quot;</span> &lt;&lt; edge.weight &lt;&lt; <span class="string">&quot; added to MST\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mstWeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">4</span>;  <span class="comment">// 顶点数</span></span><br><span class="line">    vector&lt;Edge&gt; edges = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Minimum Spanning Tree Weight: &quot;</span> &lt;&lt; <span class="built_in">kruskalMST</span>(V, edges) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prim-算法的实现（C-代码示例）"><a href="#Prim-算法的实现（C-代码示例）" class="headerlink" title="Prim 算法的实现（C++ 代码示例）"></a>Prim 算法的实现（C++ 代码示例）</h3><p>Prim 算法适合边较多的稠密图。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;  <span class="comment">// &#123;权重, 顶点&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">primMST</span><span class="params">(<span class="type">int</span> V, vector&lt;vector&lt;pii&gt;&gt;&amp; adjList)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">inMST</span><span class="params">(V, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;</span><br><span class="line">    <span class="type">int</span> mstWeight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从第 0 个顶点开始</span></span><br><span class="line">    pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [weight, u] = pq.<span class="built_in">top</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inMST[u]) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        inMST[u] = <span class="literal">true</span>;</span><br><span class="line">        mstWeight += weight;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Vertex &quot;</span> &lt;&lt; u &lt;&lt; <span class="string">&quot; added to MST with edge weight &quot;</span> &lt;&lt; weight &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [neighborWeight, v] : adjList[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!inMST[v]) &#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;neighborWeight, v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mstWeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">4</span>;</span><br><span class="line">    vector&lt;vector&lt;pii&gt;&gt; <span class="built_in">adjList</span>(V);</span><br><span class="line">    adjList[<span class="number">0</span>].<span class="built_in">push_back</span>(&#123;<span class="number">10</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    adjList[<span class="number">0</span>].<span class="built_in">push_back</span>(&#123;<span class="number">6</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    adjList[<span class="number">0</span>].<span class="built_in">push_back</span>(&#123;<span class="number">5</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    adjList[<span class="number">1</span>].<span class="built_in">push_back</span>(&#123;<span class="number">10</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    adjList[<span class="number">1</span>].<span class="built_in">push_back</span>(&#123;<span class="number">15</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(&#123;<span class="number">6</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(&#123;<span class="number">4</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    adjList[<span class="number">3</span>].<span class="built_in">push_back</span>(&#123;<span class="number">5</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    adjList[<span class="number">3</span>].<span class="built_in">push_back</span>(&#123;<span class="number">15</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    adjList[<span class="number">3</span>].<span class="built_in">push_back</span>(&#123;<span class="number">4</span>, <span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Minimum Spanning Tree Weight: &quot;</span> &lt;&lt; <span class="built_in">primMST</span>(V, adjList) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ul><li><strong>Kruskal 算法</strong>：<ul><li>使用 <code>UnionFind</code> 数据结构来管理连接和检测环。</li><li>按权重排序边，并依次检查，若边不会形成环，则将其加入 MST。</li></ul></li><li><strong>Prim 算法</strong>：<ul><li>从一个起始顶点出发，使用优先队列（最小堆）记录与已加入顶点相邻的最小边。</li><li>每次从优先队列中取出权重最小的边，将其对应的顶点加入 MST。</li></ul></li></ul><h3 id="输出示例-1"><a href="#输出示例-1" class="headerlink" title="输出示例"></a>输出示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Edge (2 - 3) with weight 4 added to MST</span><br><span class="line">Edge (0 - 3) with weight 5 added to MST</span><br><span class="line">Edge (0 - 1) with weight 10 added to MST</span><br><span class="line">Minimum Spanning Tree Weight: 19</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>Kruskal 算法</strong>：适合边较少的图，按边排序后添加到 MST。</li><li><strong>Prim 算法</strong>：适合边较多的图，优先从已连接的顶点选择最小的边。</li></ul><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>最短路径算法用于在加权图中查找从起点到终点的最短距离（权重和最小）路径。</p><h3 id="最短路径算法的主要方法"><a href="#最短路径算法的主要方法" class="headerlink" title="最短路径算法的主要方法"></a>最短路径算法的主要方法</h3><p><strong>Dijkstra 算法</strong>：</p><ul><li>适用于边权非负的图。</li><li>使用“贪心算法”思想，每次选择距离起点最近的顶点并更新它的邻接顶点。</li><li>利用优先队列（最小堆）实现效率更高的版本。</li><li><strong>时间复杂度</strong>：(O(E \log V))，其中 (E) 是边数，(V) 是顶点数。</li></ul><h3 id="Dijkstra-算法的实现（C-代码示例）"><a href="#Dijkstra-算法的实现（C-代码示例）" class="headerlink" title="Dijkstra 算法的实现（C++ 代码示例）"></a>Dijkstra 算法的实现（C++ 代码示例）</h3><p>Dijkstra 算法适用于边权为非负的图，特别适合用于单源最短路径问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;  <span class="comment">// &#123;距离, 顶点&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dijkstra算法求最短路径</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> V, vector&lt;vector&lt;pii&gt;&gt;&amp; adjList, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(V, numeric_limits&lt;<span class="type">int</span>&gt;::max())</span></span>;  <span class="comment">// 距离数组初始化为无穷大</span></span><br><span class="line">    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;  <span class="comment">// 最小堆</span></span><br><span class="line"></span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line">    pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>, start&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = pq.<span class="built_in">top</span>().second;</span><br><span class="line">        <span class="type">int</span> d = pq.<span class="built_in">top</span>().first;</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (d &gt; dist[u]) <span class="keyword">continue</span>;  <span class="comment">// 跳过不需要更新的节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [weight, v] : adjList[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dist[u] + weight &lt; dist[v]) &#123;  <span class="comment">// 如果找到更短路径</span></span><br><span class="line">                dist[v] = dist[u] + weight;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;dist[v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">5</span>;</span><br><span class="line">    vector&lt;vector&lt;pii&gt;&gt; <span class="built_in">adjList</span>(V);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加边</span></span><br><span class="line">    adjList[<span class="number">0</span>].<span class="built_in">push_back</span>(&#123;<span class="number">10</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    adjList[<span class="number">0</span>].<span class="built_in">push_back</span>(&#123;<span class="number">3</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    adjList[<span class="number">1</span>].<span class="built_in">push_back</span>(&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    adjList[<span class="number">1</span>].<span class="built_in">push_back</span>(&#123;<span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(&#123;<span class="number">8</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(&#123;<span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(&#123;<span class="number">5</span>, <span class="number">4</span>&#125;);</span><br><span class="line">    adjList[<span class="number">3</span>].<span class="built_in">push_back</span>(&#123;<span class="number">4</span>, <span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起点</span></span><br><span class="line">    <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; distances = <span class="built_in">dijkstra</span>(V, adjList, start);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出最短路径</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Shortest distances from vertex &quot;</span> &lt;&lt; start &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Vertex &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; distances[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解释-1"><a href="#代码解释-1" class="headerlink" title="代码解释"></a>代码解释</h3><ul><li>使用最小堆实现贪心选择每次最短路径的顶点。</li><li>每次从堆中提取距离最小的顶点，检查其邻接顶点并更新距离。</li><li>时间复杂度 (O(E \log V)) 主要取决于堆操作。</li></ul><h3 id="SPFA（Shortest-Path-Faster-Algorithm）算法"><a href="#SPFA（Shortest-Path-Faster-Algorithm）算法" class="headerlink" title="SPFA（Shortest Path Faster Algorithm）算法"></a><strong>SPFA（Shortest Path Faster Algorithm）算法</strong></h3><ul><li><strong>原理</strong>：SPFA 算法是 Bellman-Ford 的改进版，利用队列来加速松弛过程。SPFA 仅对需要更新的节点进行处理，不必在每一轮松弛时遍历所有边。</li><li><strong>适用场景</strong>：通常在大部分边为正、且负权边较少的图中，SPFA 表现非常好。</li><li><strong>时间复杂度</strong>：最坏情况下为 (O(V \times E))，但在实际应用中通常远优于 Bellman-Ford。平均复杂度接近 (O(E))。</li></ul><h2 id="SPFA-算法实现示例："><a href="#SPFA-算法实现示例：" class="headerlink" title="SPFA 算法实现示例："></a><strong>SPFA 算法实现示例：</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> dest, weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SPFA</span><span class="params">(<span class="type">int</span> V, vector&lt;vector&lt;Edge&gt;&gt;&amp; adjList, <span class="type">int</span> start, vector&lt;<span class="type">int</span>&gt;&amp; dist)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">inQueue</span><span class="params">(V, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(V, <span class="number">0</span>)</span></span>;</span><br><span class="line">    dist.<span class="built_in">assign</span>(V, numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>());</span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    inQueue[start] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        inQueue[u] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : adjList[u]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge.dest;</span><br><span class="line">            <span class="type">int</span> weight = edge.weight;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dist[u] != numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>() &amp;&amp; dist[u] + weight &lt; dist[v]) &#123;</span><br><span class="line">                dist[v] = dist[u] + weight;</span><br><span class="line">                <span class="keyword">if</span> (!inQueue[v]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                    inQueue[v] = <span class="literal">true</span>;</span><br><span class="line">                    count[v]++;</span><br><span class="line">                    <span class="keyword">if</span> (count[v] &gt; V - <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">// 检测到负权环</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 没有负权环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">5</span>;</span><br><span class="line">    vector&lt;vector&lt;Edge&gt;&gt; <span class="built_in">adjList</span>(V);</span><br><span class="line">    adjList[<span class="number">0</span>].<span class="built_in">push_back</span>(&#123;<span class="number">1</span>, <span class="number">10</span>&#125;);</span><br><span class="line">    adjList[<span class="number">0</span>].<span class="built_in">push_back</span>(&#123;<span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    adjList[<span class="number">1</span>].<span class="built_in">push_back</span>(&#123;<span class="number">2</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    adjList[<span class="number">1</span>].<span class="built_in">push_back</span>(&#123;<span class="number">3</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(&#123;<span class="number">1</span>, <span class="number">8</span>&#125;);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(&#123;<span class="number">3</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(&#123;<span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    adjList[<span class="number">3</span>].<span class="built_in">push_back</span>(&#123;<span class="number">4</span>, <span class="number">4</span>&#125;);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dist;</span><br><span class="line">    <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SPFA</span>(V, adjList, start, dist)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Shortest distances from vertex &quot;</span> &lt;&lt; start &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Vertex &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; dist[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Graph contains a negative weight cycle&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>拓扑排序（Topological Sorting）用于有向无环图（DAG）中，对图中的节点进行线性排序，以满足每个有向边 ( u \rightarrow v ) 中节点 ( u ) 必须排在节点 ( v ) 之前的要求。拓扑排序常用于解决依赖关系问题，比如任务调度、编译依赖等。</p><h3 id="拓扑排序的基本原理"><a href="#拓扑排序的基本原理" class="headerlink" title="拓扑排序的基本原理"></a>拓扑排序的基本原理</h3><ol><li><p><strong>前提条件</strong>：</p><ul><li>拓扑排序只能在 <strong>有向无环图（DAG）</strong> 上实现，因为如果有环存在，就无法对节点进行线性排序。</li></ul></li><li><p><strong>拓扑排序方法</strong>：</p><ul><li>拓扑排序的实现通常有两种方法：<strong>DFS</strong> 和 <strong>Kahn 算法（BFS）</strong>。</li></ul></li><li><p><strong>主要步骤</strong>：</p><ul><li><strong>DFS法</strong>：对每个未访问的节点进行 DFS 遍历，当遍历到没有后续节点时，将该节点记录下来。这样会得到一个逆序的排序结果。</li><li><strong>Kahn 算法（BFS）</strong>：利用入度的概念，将入度为 0 的节点依次加入队列，处理该节点后将其指向的节点入度减一，并将新入度为 0 的节点加入队列，直至队列为空。</li></ul></li></ol><h3 id="拓扑排序的两种实现"><a href="#拓扑排序的两种实现" class="headerlink" title="拓扑排序的两种实现"></a>拓扑排序的两种实现</h3><h4 id="方法一：DFS-法"><a href="#方法一：DFS-法" class="headerlink" title="方法一：DFS 法"></a>方法一：DFS 法</h4><p>DFS 法适合用递归的方式实现。</p><p><strong>代码实现</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topologicalSortDFS</span><span class="params">(<span class="type">int</span> v, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; adjList, vector&lt;<span class="type">bool</span>&gt;&amp; visited, stack&lt;<span class="type">int</span>&gt;&amp; topoStack)</span> </span>&#123;</span><br><span class="line">    visited[v] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有邻接节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> neighbor : adjList[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">            <span class="built_in">topologicalSortDFS</span>(neighbor, adjList, visited, topoStack);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前节点处理完毕，加入栈中</span></span><br><span class="line">    topoStack.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topologicalSort</span><span class="params">(<span class="type">int</span> V, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; adjList)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(V, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; topoStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有节点，进行 DFS</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            <span class="built_in">topologicalSortDFS</span>(i, adjList, visited, topoStack);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出拓扑排序结果</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Topological Sort (DFS): &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!topoStack.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; topoStack.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        topoStack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">6</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">adjList</span>(V);</span><br><span class="line">    adjList[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    adjList[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    adjList[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    adjList[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    adjList[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">topologicalSort</span>(V, adjList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Topological Sort (DFS): 5 4 2 3 1 0</span><br></pre></td></tr></table></figure><h4 id="方法二：Kahn-算法（BFS-法）"><a href="#方法二：Kahn-算法（BFS-法）" class="headerlink" title="方法二：Kahn 算法（BFS 法）"></a>方法二：Kahn 算法（BFS 法）</h4><p>Kahn 算法通过入度（in-degree）来实现拓扑排序：</p><ol><li>计算每个节点的入度，将入度为 0 的节点加入队列。</li><li>依次从队列中取出节点，输出其编号。</li><li>将该节点指向的所有节点的入度减 1，如果入度变为 0，则将该节点加入队列。</li><li>直到队列为空，最终的输出顺序即为拓扑排序结果。</li></ol><p><strong>代码实现</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topologicalSortKahn</span><span class="params">(<span class="type">int</span> V, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; adjList)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inDegree</span><span class="params">(V, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算每个节点的入度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> neighbor : adjList[i]) &#123;</span><br><span class="line">            inDegree[neighbor]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将入度为 0 的节点加入队列</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Kahn&#x27;s algorithm</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Topological Sort (Kahn&#x27;s Algorithm): &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; u &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历所有邻接节点，将其入度减 1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> neighbor : adjList[u]) &#123;</span><br><span class="line">            inDegree[neighbor]--;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[neighbor] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(neighbor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">6</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">adjList</span>(V);</span><br><span class="line">    adjList[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    adjList[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    adjList[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    adjList[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    adjList[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">topologicalSortKahn</span>(V, adjList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Topological Sort (Kahn&#x27;s Algorithm): 4 5 0 2 3 1</span><br></pre></td></tr></table></figure><h3 id="拓扑排序方法总结"><a href="#拓扑排序方法总结" class="headerlink" title="拓扑排序方法总结"></a>拓扑排序方法总结</h3><div class="table-container"><table><thead><tr><th>方法</th><th>主要步骤</th><th>复杂度</th><th>优缺点</th></tr></thead><tbody><tr><td>DFS 法</td><td>DFS 遍历节点，将节点按逆序入栈</td><td>(O(V + E))</td><td>适合递归实现，空间开销较少</td></tr><tr><td>Kahn 算法（BFS 法）</td><td>计算入度，队列处理入度为 0 的节点</td><td>(O(V + E))</td><td>不适合递归实现，但逻辑较直观</td></tr></tbody></table></div><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>有环图无法拓扑排序</strong>：如果在 Kahn 算法中，无法输出所有节点，则说明存在环；在 DFS 法中若检测到回到已访问节点则说明有环。</li></ul><h2 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h2><p>关键路径算法（Critical Path Method, CPM）主要用于 <strong>有向无环图（DAG）</strong> 中的 <strong>任务调度问题</strong>，帮助确定任务的最长路径（即关键路径）以及项目的最短完成时间。关键路径中的任务没有时间余地，一旦延迟会导致项目整体延误。</p><h3 id="关键路径的基本原理"><a href="#关键路径的基本原理" class="headerlink" title="关键路径的基本原理"></a>关键路径的基本原理</h3><ol><li><p><strong>事件的最早开始时间（earliest start, ES）</strong>：</p><ul><li>从起点向终点计算，在满足所有前序任务完成的情况下，每个任务可以开始的最早时间。</li></ul></li><li><p><strong>事件的最晚开始时间（latest start, LS）</strong>：</p><ul><li>从终点向起点反向计算，在不延迟项目总工期的前提下，每个任务可以推迟到的最晚开始时间。</li></ul></li><li><p><strong>计算方法</strong>：</p><ul><li>通过 <strong>正向遍历</strong> 和 <strong>反向遍历</strong>，分别计算每个任务的最早和最晚完成时间。</li><li><strong>关键路径</strong>是从起点到终点的最长路径（即时间最长的路径），这条路径上的所有任务都为关键任务，任何一个任务的延迟都会影响整个项目的工期。</li></ul></li></ol><h3 id="关键路径的实现（C-代码）"><a href="#关键路径的实现（C-代码）" class="headerlink" title="关键路径的实现（C++ 代码）"></a>关键路径的实现（C++ 代码）</h3><p>假设任务的关系以有向无环图的邻接表形式给出，图中每个节点表示一个任务，边表示任务依赖，边的权重表示任务所需时间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> dest, weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓扑排序函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topologicalSort</span><span class="params">(<span class="type">int</span> v, vector&lt;vector&lt;Edge&gt;&gt;&amp; adjList, vector&lt;<span class="type">bool</span>&gt;&amp; visited, stack&lt;<span class="type">int</span>&gt;&amp; topoStack)</span> </span>&#123;</span><br><span class="line">    visited[v] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : adjList[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[edge.dest]) &#123;</span><br><span class="line">            <span class="built_in">topologicalSort</span>(edge.dest, adjList, visited, topoStack);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    topoStack.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键路径算法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">criticalPath</span><span class="params">(<span class="type">int</span> V, vector&lt;vector&lt;Edge&gt;&gt;&amp; adjList)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">earliest</span><span class="params">(V, <span class="number">0</span>)</span></span>;  <span class="comment">// 存储最早开始时间</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">latest</span><span class="params">(V, numeric_limits&lt;<span class="type">int</span>&gt;::max())</span></span>;  <span class="comment">// 存储最晚开始时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 拓扑排序</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(V, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; topoStack;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            <span class="built_in">topologicalSort</span>(i, adjList, visited, topoStack);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 正向计算最早开始时间（earliest start time）</span></span><br><span class="line">    <span class="keyword">while</span> (!topoStack.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = topoStack.<span class="built_in">top</span>();</span><br><span class="line">        topoStack.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : adjList[u]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge.dest;</span><br><span class="line">            earliest[v] = <span class="built_in">max</span>(earliest[v], earliest[u] + edge.weight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 反向计算最晚开始时间（latest start time）</span></span><br><span class="line">    <span class="type">int</span> projectDuration = *<span class="built_in">max_element</span>(earliest.<span class="built_in">begin</span>(), earliest.<span class="built_in">end</span>());  <span class="comment">// 项目总工期</span></span><br><span class="line">    <span class="built_in">fill</span>(latest.<span class="built_in">begin</span>(), latest.<span class="built_in">end</span>(), projectDuration);  <span class="comment">// 初始化最晚时间为项目总工期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = V - <span class="number">1</span>; u &gt;= <span class="number">0</span>; u--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : adjList[u]) &#123;</span><br><span class="line">            <span class="type">int</span> v = edge.dest;</span><br><span class="line">            latest[u] = <span class="built_in">min</span>(latest[u], latest[v] - edge.weight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 找到关键路径</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Critical Path: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : adjList[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = edge.dest;</span><br><span class="line">            <span class="keyword">if</span> (earliest[i] == latest[i] &amp;&amp; earliest[i] + edge.weight == earliest[j]) &#123;</span><br><span class="line">                cout &lt;&lt; i &lt;&lt; <span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;End&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> projectDuration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> V = <span class="number">6</span>;</span><br><span class="line">    vector&lt;vector&lt;Edge&gt;&gt; <span class="built_in">adjList</span>(V);</span><br><span class="line">    adjList[<span class="number">0</span>].<span class="built_in">push_back</span>(&#123;<span class="number">1</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    adjList[<span class="number">0</span>].<span class="built_in">push_back</span>(&#123;<span class="number">2</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    adjList[<span class="number">1</span>].<span class="built_in">push_back</span>(&#123;<span class="number">3</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    adjList[<span class="number">1</span>].<span class="built_in">push_back</span>(&#123;<span class="number">4</span>, <span class="number">4</span>&#125;);</span><br><span class="line">    adjList[<span class="number">2</span>].<span class="built_in">push_back</span>(&#123;<span class="number">4</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    adjList[<span class="number">3</span>].<span class="built_in">push_back</span>(&#123;<span class="number">5</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    adjList[<span class="number">4</span>].<span class="built_in">push_back</span>(&#123;<span class="number">5</span>, <span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> projectDuration = <span class="built_in">criticalPath</span>(V, adjList);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Project Duration: &quot;</span> &lt;&lt; projectDuration &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码解释-2"><a href="#代码解释-2" class="headerlink" title="代码解释"></a>代码解释</h3><ol><li><p><strong>拓扑排序</strong>：</p><ul><li>由于关键路径算法应用于有向无环图（DAG），首先对图进行拓扑排序，便于按依赖顺序处理任务。</li><li><code>topologicalSort</code> 函数使用递归 DFS 实现拓扑排序。</li></ul></li><li><p><strong>正向遍历计算最早开始时间</strong>：</p><ul><li>从拓扑排序后的起点开始，根据前序任务的最早完成时间计算每个任务的最早开始时间。</li></ul></li><li><p><strong>反向遍历计算最晚开始时间</strong>：</p><ul><li>从终点倒着计算，尽量推迟任务时间（保证不影响总工期），计算每个任务的最晚开始时间。</li><li>使用 <code>fill</code> 将 <code>latest</code> 数组初始化为总工期，这样可以方便地更新最晚开始时间。</li></ul></li><li><p><strong>关键路径</strong>：</p><ul><li>关键路径上的任务满足 <code>earliest[i] == latest[i]</code>，即任务的最早开始时间等于最晚开始时间。通过检查每条边的权重和关键任务条件，确定关键路径并输出。</li></ul></li></ol><h3 id="输出示例-2"><a href="#输出示例-2" class="headerlink" title="输出示例"></a>输出示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Critical Path: 0 -&gt; 1 -&gt; 3 -&gt; 5 -&gt; End</span><br><span class="line">Project Duration: 8</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>关键路径</strong> 是整个项目的最长路径。沿关键路径的所有任务必须按时完成，以免延误项目。</li><li>关键路径算法利用 <strong>拓扑排序</strong> 来确保按依赖关系遍历任务。</li></ul><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;图（Graph）&lt;/strong&gt;</summary>
        
      
    
    
    
    <category term="数据结构" scheme="https://blog.whff521.xyz/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="图" scheme="https://blog.whff521.xyz/tags/%E5%9B%BE/"/>
    
  </entry>
  
</feed>
