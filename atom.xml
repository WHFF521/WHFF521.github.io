<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AiRomance</title>
  <icon>https://blog.whff521.xyz/images/101.ico</icon>
  <subtitle>爱裸漫三三</subtitle>
  <link href="https://blog.whff521.xyz/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://blog.whff521.xyz/"/>
  <updated>2024-09-10T17:04:19.724Z</updated>
  <id>https://blog.whff521.xyz/</id>
  
  <author>
    <name>AiRomance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HDOJ 1007 Quoit Design 圆环设计</title>
    <link href="https://blog.whff521.xyz/2024/09/11/HDOJ-1007-Quoit-Design-%E5%9C%86%E7%8E%AF%E8%AE%BE%E8%AE%A1/"/>
    <id>https://blog.whff521.xyz/2024/09/11/HDOJ-1007-Quoit-Design-%E5%9C%86%E7%8E%AF%E8%AE%BE%E8%AE%A1/</id>
    <published>2024-09-10T16:42:25.000Z</published>
    <updated>2024-09-10T17:04:19.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一道经典的分治"><a href="#一道经典的分治" class="headerlink" title="一道经典的分治"></a>一道经典的分治</h1><p>题意是套圈游戏要设计一款尺寸最大的圆环，满足圆环不会一次套中两个物品。每个物品有一个摆放坐标。我们要求的是这些物品中相邻最近的两个物品之间的距离，这个距离就是我们要求的圆环的直径。  </p><p>这个类型网上常称为<code>寻找最近点对问题</code>。  </p><p>数据是十万（1e5），分治算法时间复杂度是<code>O(nlogn)</code>，刚好能够跑完。</p><p>分治的思想就是我们先将所有点按照横坐标从小到大排序，然后将点分成左右两部分，也就是图中的<code>L</code>和<code>R</code>区域，这样我们就可以分别求两边的距离最小值。当然在中间线的<code>mid</code>部分也是需要求距离的。</p><p>在算完两边的距离最小值<code>d</code>后，我们将中间线向左和向右扩展<code>d</code>长度，组成<code>mid</code>的领域。可以知道如果领域再扩大增加的点并不会形成更优的答案。这里需要注意，我们的<code>L</code>和<code>R</code>区域是以中间线为界，也就是说<code>mid</code>区域其实是叠加在两边区域之上的。</p><p><img src="https://images.whff521.top/fenzhi.jpg" alt="fenzhi"></p><p>虽然中间区域的点已经会排除掉一些点，但是直接用双重循环找最短距离会超时。这是因为如果点都在中间密集的话时间复杂度会接近<code>O(n*n)</code>。</p><p>所以我们需要把中间点按照<code>y</code>的从小到大排序，在循环中如果两点纵坐标之间的距离已经大于<code>d</code>的时候及时跳出循环，完成剪枝。</p><p>边界问题：自己与自己之间距离设置成足够大的值，如果区间只有两个点，则直接计算两点之间距离。</p><p><strong>PS: 函数命名不要用distance，会和C++库中函数重名而导致CE</strong> </p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mxlen = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">&#125;points[mxlen];</span><br><span class="line"><span class="comment">// sort by x</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpx</span><span class="params">(node qw,node er)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(qw.x==er.x) <span class="keyword">return</span> qw.y&lt;er.y;</span><br><span class="line">    <span class="keyword">return</span> qw.x&lt;er.x;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort by y</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpy</span><span class="params">(node qw,node er)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(qw.y==er.y) <span class="keyword">return</span> qw.x&lt;er.x;</span><br><span class="line">    <span class="keyword">return</span> qw.y&lt;er.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// count the distance between two points</span></span><br><span class="line"><span class="comment">// name can not be distance, because there is a function named distance in cmath</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dis</span><span class="params">(node qw,node er)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((qw.x-er.x)*(qw.x-er.x)+(qw.y-er.y)*(qw.y-er.y));</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">node temp[mxlen];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> <span class="number">1e20</span>;</span><br><span class="line">    <span class="comment">// if there are only two points</span></span><br><span class="line">    <span class="keyword">if</span>(l+<span class="number">1</span>==r) <span class="keyword">return</span> <span class="built_in">dis</span>(points[l],points[r]);</span><br><span class="line">    <span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">double</span> d = <span class="built_in">min</span>(<span class="built_in">solve</span>(l,mid),<span class="built_in">solve</span>(mid+<span class="number">1</span>,r));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sort by y, otherwise the code will TLE</span></span><br><span class="line">    <span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=mid;i&gt;=l&amp;&amp;points[mid].x-points[i].x&lt;d;i--) temp[len++] = points[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=r&amp;&amp;points[i].x-points[mid].x&lt;d;i++) temp[len++] = points[i];</span><br><span class="line">    <span class="built_in">sort</span>(temp+<span class="number">1</span>,temp+len,cmpy);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;len&amp;&amp;temp[j].y-temp[i].y&lt;d;j++)&#123;</span><br><span class="line">            d = <span class="built_in">min</span>(d,<span class="built_in">dis</span>(temp[i],temp[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;points[i].x,&amp;points[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(points+<span class="number">1</span>,points+n+<span class="number">1</span>,cmpx);</span><br><span class="line">        <span class="type">double</span> ans = <span class="built_in">solve</span>(<span class="number">1</span>,n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,ans/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;一道经典的分治&quot;&gt;&lt;a href=&quot;#一道经典的分治&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="算法题" scheme="https://blog.whff521.xyz/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="分治" scheme="https://blog.whff521.xyz/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>更有效地解决括号匹配问题</title>
    <link href="https://blog.whff521.xyz/2024/08/26/%E6%9B%B4%E6%9C%89%E6%95%88%E5%9C%B0%E8%A7%A3%E5%86%B3%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.whff521.xyz/2024/08/26/%E6%9B%B4%E6%9C%89%E6%95%88%E5%9C%B0%E8%A7%A3%E5%86%B3%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/</id>
    <published>2024-08-26T00:11:50.000Z</published>
    <updated>2024-08-26T00:34:09.296Z</updated>
    
    <content type="html"><![CDATA[<p>这是力扣上一道非常简单的问题，是经典的解决括号匹配问题。当然做法是用一个栈即可解决问题。<br><a href="https://leetcode.cn/problems/valid-parentheses/description/?envType=study-plan-v2&envId=2024-spring-sprint-100">有效的括号</a></p><p>这是我的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Stack&lt;Character&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="type">Character</span> <span class="variable">nowC</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(nowC==<span class="string">&#x27;(&#x27;</span>||nowC==<span class="string">&#x27;&#123;&#x27;</span>||nowC==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                st.push(nowC);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(st.empty())&#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> st.pop();</span><br><span class="line">                <span class="keyword">if</span>((nowC==<span class="string">&#x27;)&#x27;</span>&amp;&amp;c!=<span class="string">&#x27;(&#x27;</span>)||(nowC==<span class="string">&#x27;]&#x27;</span>&amp;&amp;c!=<span class="string">&#x27;[&#x27;</span>)||(nowC==<span class="string">&#x27;&#125;&#x27;</span>&amp;&amp;c!=<span class="string">&#x27;&#123;&#x27;</span>))&#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!st.empty()) flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然我的代码是可以不费力的通过测试的。但是我还是去看了一眼题解。 </p><p>这是力扣官方题解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;Character, Character&gt; pairs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Character&gt;() &#123;&#123;</span><br><span class="line">            put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">            put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        Deque&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (pairs.containsKey(ch)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty() || stack.peek() != pairs.get(ch)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：力扣官方题解</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/valid-parentheses/solutions/373578/you-xiao-de-gua-hao-by-leetcode-solution/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>想必大家已经能够看到官方题解和我的代码有着一个明显的差别，那就是题解用了另一个数据结构——<code>Map</code>。  </p><p>用到<code>Map</code>的理由也是非常的简单，就是判断小括号，中括号，大括号匹配的时候，用<code>Map</code>的<code>key-value</code>一一对应能够完美解决。这里的操作看似画蛇添足，但是代码在拓展性上大大增强，只需要更改键值对的内容，就可以把代码扩展到任意匹配问题。  </p><p>还有一点值得一提，就是<code>java</code>中的<code>stack</code>实际上就是<code>vector</code>的一种。整体来看，双端队列能够实现栈的所有功能，且适用范围更加广泛，所以大多数定义栈的时候都会直接用<code>Deque</code>。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;这是力扣上一道非常简单的问题，是经典的解决括号匹配问题。当然做法是用一个栈即可解决问题。&lt;br&gt;&lt;a</summary>
        
      
    
    
    
    <category term="算法题" scheme="https://blog.whff521.xyz/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="leetcode" scheme="https://blog.whff521.xyz/tags/leetcode/"/>
    
    <category term="括号匹配" scheme="https://blog.whff521.xyz/tags/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>博客的免费图床方案</title>
    <link href="https://blog.whff521.xyz/2024/07/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/"/>
    <id>https://blog.whff521.xyz/2024/07/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/</id>
    <published>2024-07-08T12:04:40.000Z</published>
    <updated>2024-09-04T09:44:46.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客的免费图床方案（Cloudflare-R2-PicGo）"><a href="#博客的免费图床方案（Cloudflare-R2-PicGo）" class="headerlink" title="博客的免费图床方案（Cloudflare R2 + PicGo）"></a>博客的免费图床方案（Cloudflare R2 + PicGo）</h1><p><a href="https://www.pseudoyu.com/zh/2024/06/30/free_image_hosting_system_using_r2_webp_cloud_and_picgo/">参考博客</a>  </p><p>这个博客写的已经非常详细清楚了，这里不再赘述实现步骤。  </p><p>这里记录一下我是怎么发现这篇博客的。  </p><p>在一个很无聊的时间段，我打开了<code>Inoreader</code>看RSS订阅的博客列表有没有更新，其中有一篇少数派的博客吸引了我，<a href="https://sspai.com/post/90223">是这个博客</a>。</p><p><img src="http://images.whff521.top/Screenshot%202024-07-08%20at%2020.10.44.png" alt="sspai">  </p><p>这里博主提到了<a href="https://x.com/pseudo_yu">他的推特账号</a>。其中很近的时间里他发布了上面提到的免费图床方案的博文。  </p><p>这篇博客解决了我正在苦恼的问题，那就是博文中图片的插入。如果是只有一个github pages的静态网站还好说，直接传在相对文件夹里即可。但是如果面对多平台，比如我还想在csdn中发布，那就变得很麻烦，因为markdown里写的相对路径将不可用，最直接的办法就是更改每个图片链接。  </p><p>然而如果是有自己的图床就很方便了，不用担心网络上的图片会突然失效，多平台发布也不用更改自己的截图路径。上方的图片就是用我自己实现的图库。  </p><p>事实上这个免费解决方案是相对于已经使用过CloudFlare和买过且用过域名的人看的。有一些点没有提及。首先你如果想用R2的话你最好有一张VISA卡进行账户的认证。还有对于公共的域名，如果想用自己的域名，首先这个域名的DNS的NameServer需要改成CloudFlare的，也就是说这里的自定义域名只能是在CloudFlare里进行代理的域名，当然有免费计划可以用。  </p><p>还有关于PicGo这个软件，对于Mac用户来说，你可能会遇到一个问题，就是安装后系统不让你打开并使用这个软件，系统会提示你把它扔进垃圾桶里，因为里面的证书不对。这里解决方案是<a href="https://youngjuning.js.org/bd534125c87e/?highlight=picgo#%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F">来自这个博客</a>  </p><p>终端输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xattr -r -d com.apple.quarantine 你的APP路径</span><br></pre></td></tr></table></figure><p>APP 路径的获取方法：</p><p>打开 “访达”（Finder）进入 “应用程序” 目录，找到该软件图标，将图标拖到终端窗口，最终的命令类似:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xattr -r -d com.apple.quarantine <span class="string">&#x27;/Applications/PicGo.app&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;博客的免费图床方案（Cloudflare-R2-PicGo）&quot;&gt;&lt;a href=&quot;#博客的免费图床方案（Cloudflare-R2-PicGo）&quot; class=&quot;headerlink&quot; title=&quot;博客的免费图床方案（Cloudflare R2 +</summary>
        
      
    
    
    
    <category term="计算机相关" scheme="https://blog.whff521.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="mac" scheme="https://blog.whff521.xyz/tags/mac/"/>
    
    <category term="博客" scheme="https://blog.whff521.xyz/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="图床" scheme="https://blog.whff521.xyz/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="PicGo" scheme="https://blog.whff521.xyz/tags/PicGo/"/>
    
    <category term="Cloudflare" scheme="https://blog.whff521.xyz/tags/Cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent JavaScript 09 Exercises</title>
    <link href="https://blog.whff521.xyz/2024/06/22/Eloquent-JavaScript-09-Exercises/"/>
    <id>https://blog.whff521.xyz/2024/06/22/Eloquent-JavaScript-09-Exercises/</id>
    <published>2024-06-22T13:39:01.000Z</published>
    <updated>2024-06-22T14:36:28.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://eloquentjavascript.net/09_regexp.html">To the book page</a>  </p><h2 id="Regexp-golf"><a href="#Regexp-golf" class="headerlink" title="Regexp golf"></a>Regexp golf</h2><p>注意这里如果写对的话，应该什么都不会输出。  </p><p>正则表达式中的<code>\b</code>是单词边界的标志，它用来匹配一个单词的边界。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill in the regular expressions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则表达式应该匹配“car”和“cat”，但不匹配其他字符串。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/ca[rt]/</span>,</span><br><span class="line">       [<span class="string">&quot;my car&quot;</span>, <span class="string">&quot;bad cats&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;camper&quot;</span>, <span class="string">&quot;high art&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配“pop”和“prop”，但不匹配其他字符串。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/pr?op/</span>,</span><br><span class="line">       [<span class="string">&quot;pop culture&quot;</span>, <span class="string">&quot;mad props&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;plop&quot;</span>, <span class="string">&quot;prrrop&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配“ferret”，“ferry”和“ferrari”，但不匹配其他字符串。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/ferr(et|y|ari)/</span>,</span><br><span class="line">       [<span class="string">&quot;ferret&quot;</span>, <span class="string">&quot;ferry&quot;</span>, <span class="string">&quot;ferrari&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;ferrum&quot;</span>, <span class="string">&quot;transfer A&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配以“ious”结尾的任何单词。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/\b\w*ious\b/</span>,</span><br><span class="line">       [<span class="string">&quot;how delicious&quot;</span>, <span class="string">&quot;spacious room&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;ruinous&quot;</span>, <span class="string">&quot;consciousness&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配空白字符后跟一个句号、逗号、冒号或分号。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/\s[.,;:]/</span>,</span><br><span class="line">       [<span class="string">&quot;bad punctuation .&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;escape the period&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配长度大于六个字母的单词。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/\b\w&#123;7,&#125;\b/</span>,</span><br><span class="line">       [<span class="string">&quot;Siebentausenddreihundertzweiundzwanzig&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;no&quot;</span>, <span class="string">&quot;three small words&quot;</span>]);</span><br><span class="line"><span class="comment">// 正则表达式应该匹配不包含字母“e”或“E”的单词。</span></span><br><span class="line"><span class="title function_">verify</span>(<span class="regexp">/\b[a-df-zA-DF-Z]+\b/</span>,</span><br><span class="line">       [<span class="string">&quot;red platypus&quot;</span>, <span class="string">&quot;wobbling nest&quot;</span>],</span><br><span class="line">       [<span class="string">&quot;earth bed&quot;</span>, <span class="string">&quot;bedrøvet abe&quot;</span>, <span class="string">&quot;BEET&quot;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">verify</span>(<span class="params">regexp, yes, no</span>) &#123;</span><br><span class="line">  <span class="comment">// Ignore unfinished exercises</span></span><br><span class="line">  <span class="keyword">if</span> (regexp.<span class="property">source</span> == <span class="string">&quot;...&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> yes) <span class="keyword">if</span> (!regexp.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Failure to match &#x27;<span class="subst">$&#123;str&#125;</span>&#x27;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> no) <span class="keyword">if</span> (regexp.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Unexpected match for &#x27;<span class="subst">$&#123;str&#125;</span>&#x27;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quoting-style"><a href="#Quoting-style" class="headerlink" title="Quoting style"></a>Quoting style</h2><p>将句子中的单引号换成双引号，但是单词缩写不能变，比如“aren’t”  </p><p>这里调试了半天，因为我错误的将<code>|</code>写成中文的<code>｜</code>了。。。  </p><ul><li><code>(^|\W)</code>：匹配开头或非字母字符后面的单引号。</li><li><code>(\W|$)</code>：匹配单引号后面紧跟非字母字符或字符串结尾。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;&#x27;I&#x27;m the cook,&#x27; he said, &#x27;it&#x27;s my job.&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">// Change this call.</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">replace</span>(<span class="regexp">/(^|\W)&#x27;|&#x27;(\W|$)/g</span>,<span class="string">&#x27;$1&quot;$2&#x27;</span>));</span><br><span class="line"><span class="comment">// → &quot;I&#x27;m the cook,&quot; he said, &quot;it&#x27;s my job.&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Numbers-again"><a href="#Numbers-again" class="headerlink" title="Numbers again"></a>Numbers again</h2><p>为了编写一个匹配JavaScript风格数字的正则表达式，我们需要支持以下特性：</p><ul><li>可选的正负号</li><li>可选的十进制点</li><li>指数表示法（e或E），以及可选的正负号</li></ul><p>以下是我们可以遵循的步骤：</p><ol><li><strong>可选的正负号</strong>：<code>[+-]?</code></li><li><strong>整数和小数部分</strong>：<ul><li>整数部分：<code>\d*</code></li><li>小数部分：<code>\.\d+</code></li></ul></li><li><strong>指数部分</strong>：<code>e[+-]?\d+</code></li></ol><p>将这些部分组合在一起，我们得到一个正则表达式来匹配JavaScript风格的数字：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="regexp">/^[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tests:</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;+15&quot;</span>, <span class="string">&quot;1.55&quot;</span>, <span class="string">&quot;.5&quot;</span>, <span class="string">&quot;5.&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;1.3e2&quot;</span>, <span class="string">&quot;1E-4&quot;</span>, <span class="string">&quot;1e+12&quot;</span>]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!number.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Failed to match &#x27;<span class="subst">$&#123;str&#125;</span>&#x27;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> [<span class="string">&quot;1a&quot;</span>, <span class="string">&quot;+-1&quot;</span>, <span class="string">&quot;1.2.3&quot;</span>, <span class="string">&quot;1+1&quot;</span>, <span class="string">&quot;1e4.5&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;.5.&quot;</span>, <span class="string">&quot;1f5&quot;</span>, <span class="string">&quot;.&quot;</span>]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (number.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Incorrectly accepted &#x27;<span class="subst">$&#123;str&#125;</span>&#x27;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li><code>^[+-]?</code>：匹配开头的可选正负号。</li><li><code>(\d+(\.\d*)?|\.\d+)</code>：匹配整数或小数部分。<ul><li><code>\d+(\.\d*)?</code>：匹配整数部分，后面跟着可选的小数部分。例如，<code>123</code>或<code>123.456</code>。</li><li><code>|\.\d+</code>：或者匹配只有小数点和小数部分。例如，<code>.456</code>。</li></ul></li><li><code>([eE][+-]?\d+)?</code>：匹配可选的指数部分。<ul><li><code>[eE]</code>：匹配<code>e</code>或<code>E</code>。</li><li><code>[+-]?</code>：匹配可选的正负号。</li><li><code>\d+</code>：匹配一或多个数字。</li></ul></li><li><code>$</code>：匹配字符串的结尾。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>2024年Android项目实现高德导航</title>
    <link href="https://blog.whff521.xyz/2024/06/21/2024%E5%B9%B4Android%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%BE%B7%E5%AF%BC%E8%88%AA/"/>
    <id>https://blog.whff521.xyz/2024/06/21/2024%E5%B9%B4Android%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%BE%B7%E5%AF%BC%E8%88%AA/</id>
    <published>2024-06-21T06:47:00.000Z</published>
    <updated>2024-06-26T13:31:56.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用高德SDK实现导航功能"><a href="#使用高德SDK实现导航功能" class="headerlink" title="使用高德SDK实现导航功能"></a>使用高德SDK实现导航功能</h1><p><a href="https://blog.csdn.net/weixin_46974030/article/details/134059600">参考博客</a>  </p><p><a href="https://github.com/WHFF521/AMAP-Android-Navigation">Github仓库直达</a>  </p><p>这是今天企业实训的一个小作业，实际上我从昨天就开始尝试申请key然后下载官方Demo开始实验。本来是要做flutter项目，但是高德官方里flutter教程只有显示地图和定位功能，没有导航功能，导航功能官方只有Android的教程。今天也是用Android原生进行编写的。至于怎么整合到flutter项目里目前还不知道。。。</p><h2 id="1-官网下载SDK"><a href="#1-官网下载SDK" class="headerlink" title="1. 官网下载SDK"></a>1. 官网下载SDK</h2><p>我也尝试过直接gradle引入包的操作，但是直接引入的会缺少<code>AmapNaviParams</code>。官网也一直强调有个什么东西开源了所以提供的包里移除了一些东西（不知道到底是什么）。  </p><p><a href="https://lbs.amap.com/api/android-sdk/download">官网SDK下载地址</a>  </p><p>我下载的是导航合包：</p><p><img src="/../images/Android/gaodeSDK.png" alt="SDK">  </p><h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h2><p>直接Android Studio创建一个java，Groovy的项目即可。  </p><p>设置里需要设置生成所有Gradle Task：  </p><p><img src="/../images/Android/openALLTask.png" alt="set generate all tasks">  </p><p>这样你就可以靠点击这里直接获得你项目的SHA1的值，申请key的时候需要这个。</p><p><img src="/../images/Android/signing.png" alt="signing">  </p><p>点击上图位置你就可以在终端看见你的SHA1值。在我这里release和debug的SHA1的值是一样的。  </p><h2 id="3-导入你下载的SDK"><a href="#3-导入你下载的SDK" class="headerlink" title="3. 导入你下载的SDK"></a>3. 导入你下载的SDK</h2><p>在app的<code>build.gradle</code>的<code>dependencies</code>里添加一行<br><code>implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</code>  </p><p>在上方和<code>compileOptions</code>同级的位置添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        jniLibs.srcDirs = [&#x27;libs&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/../images/Android/SouceSet.png" alt="souceSet">  </p><p>同时下载的SDK如图放在app文件夹下的libs文件夹下。</p><p>同步一下即导入完成。</p><h2 id="添加权限和你的KEY"><a href="#添加权限和你的KEY" class="headerlink" title="添加权限和你的KEY"></a>添加权限和你的KEY</h2><p>这里需要在manifest文件里添加一些权限，你的key和一个服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--允许访问网络，必选权限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取粗略位置，若用GPS实现定位小蓝点功能则必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取设备和运营商信息，用于问题排查和网络定位，若无gps但仍需实现定位小蓝点功能则此权限必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取网络状态，用于网络定位，若无gps但仍需实现定位小蓝点功能则此权限必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取wifi网络信息，用于网络定位，若无gps但仍需实现定位小蓝点功能则此权限必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取wifi状态改变，用于网络定位，若无gps但仍需实现定位小蓝点功能则此权限必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许写入扩展存储，用于数据缓存，若无此权限则写到私有目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许读设备等信息，用于问题排查--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许访问网络，必选权限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许读设备等信息，用于问题排查--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取网络状态--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许获取wifi网络信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许写入扩展存储，用于搜索结果缓存，若无此权限则写到私有目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--允许读设备等信息，用于问题排查--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后application下添加你的key和一个服务，之后还要用到一个高德自己的activity，这里顺便一起声明了,这些和你的启动Activity是同级的：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;com.amap.api.v2.apikey&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;你的key&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meta-data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;com.amap.api.location.APSService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.amap.api.navi.AmapRouteActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@android:style/Theme.NoTitleBar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">&quot;orientation|keyboardHidden|screenSize|navigation&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="继续之前"><a href="#继续之前" class="headerlink" title="继续之前"></a>继续之前</h2><p>首先你的key应该按照官网已经申请成功了，这里我把我的项目传到github上。如果想要源码请直接跳转下载。</p><p><a href="https://github.com/WHFF521/AMAP-Android-Navigation">我的仓库</a>  </p><h2 id="展示图"><a href="#展示图" class="headerlink" title="展示图"></a>展示图</h2><div style="display: flex;gap: 10px;">  <img src="/images/Android/navi-mainpage.jpg" alt="description" width="300" height="600">  <img src="/images/Android/navigating.jpg" alt="description" width="300" height="600"></div><h2 id="相对于参考博客做的代码替换"><a href="#相对于参考博客做的代码替换" class="headerlink" title="相对于参考博客做的代码替换"></a>相对于参考博客做的代码替换</h2><p>由于有一些APi在最新的SDK中已经失效，这里重点写一下相对于参考博客代码中的不同：</p><p>MainActivity中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (aMap == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        MyLocationStyle myLocationStyle;</span><br><span class="line">        myLocationStyle = <span class="keyword">new</span> <span class="title class_">MyLocationStyle</span>();<span class="comment">//初始化定位蓝点样式类myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE);//连续定位、且将视角移动到地图中心点，定位点依照设备方向旋转，并且会跟随设备移动。（1秒1次定位）如果不设置myLocationType，默认也会执行此种模式。</span></span><br><span class="line">        myLocationStyle.interval(<span class="number">2000</span>); <span class="comment">//设置连续定位模式下的定位间隔，只在连续定位模式下生效，单次定位模式下不会生效。单位为毫秒。</span></span><br><span class="line">        aMap.setMyLocationStyle(myLocationStyle);<span class="comment">//设置定位蓝点的Style</span></span><br><span class="line"><span class="comment">//aMap.getUiSettings().setMyLocationButtonEnabled(true);设置默认定位按钮是否显示，非必需设置。</span></span><br><span class="line">        aMap.setMyLocationEnabled(<span class="literal">true</span>);<span class="comment">// 设置为true表示启动显示定位蓝点，false表示隐藏定位蓝点并不进行定位，默认是false。</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个函数中的MyLocationStyle需要进行替换。</p><p>由于参考博客中并没有完整的代码，你需要在MainActivity中添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOCATION_PERMISSION_REQUEST_CODE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>作为这个code的声明和初始化。  </p><p>我在实际编写的时候，Android Studio不能自动import关于manifest的库，会导致申请权限的代码中爆红一片。你需要引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.Manifest;</span><br></pre></td></tr></table></figure><p>其他应该没有什么变化。</p><h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h2><p>这是这个project中的核心文件，其中按钮绑定的跳转函数那里是重点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.btnGotoNavi).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 无起终点启动导航</span></span><br><span class="line">                <span class="type">AmapNaviParams</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AmapNaviParams</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, AmapNaviType.DRIVER, AmapPageType.ROUTE);</span><br><span class="line">                AmapNaviPage.getInstance().showRouteActivity(getApplicationContext(), params, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这里直接跳转到高德包里的一个activity中，可以进行导航等行为，这个是调用<code>AmapRouteActivity</code>，之前已在manifest中声明。当然也可以进行有起终点启动导航。<a href="https://lbs.amap.com/api/android-navi-sdk/guide/navi-component/basic-functions">官网文档</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//起点</span></span><br><span class="line"><span class="type">Poi</span> <span class="variable">start</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Poi</span>(<span class="string">&quot;北京首都机场&quot;</span>, <span class="keyword">new</span> <span class="title class_">LatLng</span>(<span class="number">40.080525</span>,<span class="number">116.603039</span>), <span class="string">&quot;B000A28DAE&quot;</span>);</span><br><span class="line"><span class="comment">//途经点</span></span><br><span class="line">List&lt;Poi&gt; poiList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">poiList.add(<span class="keyword">new</span> <span class="title class_">Poi</span>(<span class="string">&quot;故宫&quot;</span>, <span class="keyword">new</span> <span class="title class_">LatLng</span>(<span class="number">39.918058</span>,<span class="number">116.397026</span>), <span class="string">&quot;B000A8UIN8&quot;</span>));</span><br><span class="line"><span class="comment">//终点</span></span><br><span class="line"><span class="type">Poi</span> <span class="variable">end</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Poi</span>(<span class="string">&quot;北京大学&quot;</span>, <span class="keyword">new</span> <span class="title class_">LatLng</span>(<span class="number">39.941823</span>,<span class="number">116.426319</span>), <span class="string">&quot;B000A816R6&quot;</span>);</span><br><span class="line"><span class="comment">// 组件参数配置</span></span><br><span class="line"><span class="type">AmapNaviParams</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AmapNaviParams</span>(start, poiList, end, AmapNaviType.DRIVER, AmapPageType.ROUTE);  </span><br><span class="line"><span class="comment">// 启动组件</span></span><br><span class="line">AmapNaviPage.getInstance().showRouteActivity(getApplicationContext(), params, <span class="literal">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="记录开发环境和调试手机"><a href="#记录开发环境和调试手机" class="headerlink" title="记录开发环境和调试手机"></a>记录开发环境和调试手机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Android Studio Jellyfish | 2023.3.1 Patch 1</span><br><span class="line">Build #AI-233.14808.21.2331.11842104, built on May 15, 2024</span><br><span class="line">Runtime version: 17.0.10+0-17.0.10b1087.21-11572160 aarch64</span><br><span class="line">VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.</span><br><span class="line">macOS 14.5</span><br><span class="line">GC: G1 Young Generation, G1 Old Generation</span><br><span class="line">Memory: 2048M</span><br><span class="line">Cores: 8</span><br><span class="line">Metal Rendering is ON</span><br><span class="line">Registry:</span><br><span class="line">  ide.experimental.ui=true</span><br><span class="line">Non-Bundled Plugins:</span><br><span class="line">  Dart (233.15271)</span><br><span class="line">  io.flutter (79.0.2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>手机是vivo iqoo，android11。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;使用高德SDK实现导航功能&quot;&gt;&lt;a href=&quot;#使用高德SDK实现导航功能&quot; class=&quot;headerlink&quot; title=&quot;使用高德SDK实现导航功能&quot;&gt;&lt;/a&gt;使用高德SDK实现导航功能&lt;/h1&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Android" scheme="https://blog.whff521.xyz/categories/Android/"/>
    
    
    <category term="Android" scheme="https://blog.whff521.xyz/tags/Android/"/>
    
  </entry>
  
</feed>
