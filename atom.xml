<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AiRomance</title>
  <icon>https://blog.whff521.xyz/images/101.ico</icon>
  <subtitle>爱裸漫三三</subtitle>
  <link href="https://blog.whff521.xyz/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://blog.whff521.xyz/"/>
  <updated>2025-01-05T01:04:35.211Z</updated>
  <id>https://blog.whff521.xyz/</id>
  
  <author>
    <name>AiRomance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>switch连接openwrt路由器NAT穿越失败问题</title>
    <link href="https://blog.whff521.xyz/2025/01/05/switch%E8%BF%9E%E6%8E%A5openwrt%E8%B7%AF%E7%94%B1%E5%99%A8NAT%E7%A9%BF%E8%B6%8A%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.whff521.xyz/2025/01/05/switch%E8%BF%9E%E6%8E%A5openwrt%E8%B7%AF%E7%94%B1%E5%99%A8NAT%E7%A9%BF%E8%B6%8A%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</id>
    <published>2025-01-05T00:20:06.000Z</published>
    <updated>2025-01-05T01:04:35.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="switch连接openwrt路由器NAT穿越失败问题"><a href="#switch连接openwrt路由器NAT穿越失败问题" class="headerlink" title="switch连接openwrt路由器NAT穿越失败问题"></a>switch连接openwrt路由器NAT穿越失败问题</h1><p>首先说结论，解决问题的办法是<code>ShadowSocksR Plus+</code>需要代理的端口要改成“所有端口”。</p><h2 id="问题的来源"><a href="#问题的来源" class="headerlink" title="问题的来源"></a>问题的来源</h2><p>我需要路由器给我的switch（任天堂游戏机）做代理，我家里的老路由器NAT类型是B，虽然能匹配到马车8，但是感觉延迟很大，而且大乱斗的竞猜观也看不了。正好我有一个刷过openwrt（QWRT）的路由器。</p><h2 id="试错"><a href="#试错" class="headerlink" title="试错"></a>试错</h2><p>我第一个想法是有线桥接。lan to lan 这样接起来，然后让主路由器分配ip，副路由器只负责当交换机。</p><p>但是不知道为什么网上的桥接教程我都不能成功实现。他们教的把副路由器lan口ip改成主路由器lan口ip统一网段的这一步，每当我改完ip然后路由器就失联了，也没有网。</p><p>好在我直接拔电源再插回去，路由器的系统会重置为出厂化设置。研究了几个小时之后我发现路由器并不是失联了，而是我没有正确的访问。我不知道原因是什么，我电脑网线连接路由器之所以找不到路由器配置网址，好像是因为改lan口ip后新的网络ip并没有分配给电脑，然后电脑和路由器panel在不同的网段里，所以不能访问。</p><p>解决办法就是在电脑控制面板里找到适配器设置（Control Panel-&gt;All Control Panel Items-&gt;Network and Sharing Center-&gt;Change adapter settings），将以太网属性里的ipv4设置为手动ip，设置为和更改panel的ip的同一网段的不同ip上。</p><p><img src="https://images.whff521.top/69968835425934D848C83A3278D54FF2.png" alt="ipv4"></p><p>如图，假设主路由器Default Gateway是192.168.3.1，这个如果不知道就用电脑连接主路由器，然后Terminal里输入<code>ipconfig /all</code>查看。然后路由器lan设置为192.168.3.2,只需要上图一样配置，将自己电脑ip改为同一网段的不同ip即可。然后再输入192.168.3.2就能够再次访问到路由器panel。</p><p>这里解释一下为什么192.168.1.1和192.168.3.1是不同网段，主要是因为家庭路由器的子网掩码是255.255.255.0。这里涉及到计网的知识。这个子网掩码应该按照二进制的思维思考，前面都是111111…后面是0,然后第三个字段的3和1仍然还是不同网段，但是第四个字段对应的0属于同一网段。</p><h2 id="可能是正解"><a href="#可能是正解" class="headerlink" title="可能是正解"></a>可能是正解</h2><p>重置路由器后，网线插在wan口上，wan口协议设置为DHCP服务端即可。这样副路由器就应该有网了。</p><p>当然这样的做法使得主副路由器会在不同的网段中，共享打印机那种场景应该会出问题，但是我并没有这种场景。</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>我为什么排除了vpn的问题而是一心觉得是因为不同网段的问题。第一因为这个路由器在学校的时候运作十分正常，第二chatgpt告诉我可能是因为双重NAT导致的。显然我的决策是有误的。</p><p>因为开梯子和不开梯子NAT类型都是B，而且开梯子后反而完不了马车8了让我心急如焚。我不知道为什么<code>ShadowSocksR Plus+</code>的代理端口为什么被改成了“不代理p2p流量”，这一个设置让我折腾了快一天的时间：</p><p><img src="https://images.whff521.top/Screenshot%202025-01-05%20at%2008.58.42.png" alt="search history"></p><p>这是部分搜索截图。</p><p>最后看到NAT类型变成A，然后狠狠打了几把NS Sports，还是很开心的。</p>]]></content>
    
    
    <summary type="html">因为一个简单的设置导致度过了痛苦的几个小时的解决问题的时间</summary>
    
    
    
    <category term="计算机相关" scheme="https://blog.whff521.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="openwrt" scheme="https://blog.whff521.xyz/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>springboot中jwt的使用</title>
    <link href="https://blog.whff521.xyz/2024/12/29/springboot%E4%B8%ADjwt%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.whff521.xyz/2024/12/29/springboot%E4%B8%ADjwt%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-12-29T00:17:54.000Z</published>
    <updated>2024-12-29T01:19:52.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot中jwt的使用"><a href="#Spring-Boot中jwt的使用" class="headerlink" title="Spring Boot中jwt的使用"></a>Spring Boot中jwt的使用</h1><p>记录一下现在我是怎么实现jwt的。为什么说是现在呢？说实话这是我第三次在Spring Boot里添加JWT，但是每次添加的方式和代码因为查阅的资料不同，实现的方式也不太一样。当然jwt终究是jwt，大同小异。</p><p>我用的版本比较新，所以很多方法都被标注了过期，我也没有去深入研究最新的代码究竟应该怎么实现。</p><p>Spring Boot版本是3.3.5， jjwt用的0.12.6。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>用的是<code>jjwt</code>实现jwt，<code>spring-security</code>实现拦截。</p><p>在pom.xml里添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JwtUtil-文件"><a href="#JwtUtil-文件" class="headerlink" title="JwtUtil 文件"></a>JwtUtil 文件</h2><p>这是为了实现<code>jwt</code>而创建的工具类，建议放在项目文件夹的<code>utils</code>文件夹里，和<code>controller</code>文件夹同级。代码中的<code>jwt.secret</code>,<code>jwt.expiration</code>是写在<code>application.properties</code>里的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jwt.secret=XXXXXXXXXXXXX</span><br><span class="line">jwt.expiration=604800000</span><br></pre></td></tr></table></figure><p>这里的<code>jwt.secret</code>必须满足一定的要求：HS256 算法要求签名密钥的大小至少为 256 位（即 32 字节）。并且写在文件里的是用Base64加密过的。Base64 编码的目的是让二进制密钥在传输和存储时更加安全和兼容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.airomance.easytravelroute.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.security.Keys;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> expirationTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SecretKey <span class="title function_">getSecretKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] decodedKey = Base64.getDecoder().decode(secretKey);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(decodedKey, <span class="number">0</span>, decodedKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setSubject(username)</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expirationTime))</span><br><span class="line">                .signWith(getSecretKey())</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从JWT中获取用户名</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">extractUsername</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> extractClaim(token, Claims::getSubject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从JWT中获取任何信息</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; T <span class="title function_">extractClaim</span><span class="params">(String token, ClaimsResolver&lt;T&gt; claimsResolver)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> extractAllClaims(token);</span><br><span class="line">        <span class="keyword">return</span> claimsResolver.resolve(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从JWT中提取所有声明</span></span><br><span class="line">    <span class="keyword">private</span> Claims <span class="title function_">extractAllClaims</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(getSecretKey())</span><br><span class="line">                .build()</span><br><span class="line">                .parseSignedClaims(token)</span><br><span class="line">                .getPayload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证JWT</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token, String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (username.equals(extractUsername(token)) &amp;&amp; !isTokenExpired(token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查JWT是否过期</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> extractExpiration(token).before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提取JWT过期时间</span></span><br><span class="line">    <span class="keyword">private</span> Date <span class="title function_">extractExpiration</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> extractClaim(token, Claims::getExpiration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">ClaimsResolver</span>&lt;T&gt; &#123;</span><br><span class="line">        T <span class="title function_">resolve</span><span class="params">(Claims claims)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JwtAuthenticationFilter-文件"><a href="#JwtAuthenticationFilter-文件" class="headerlink" title="JwtAuthenticationFilter 文件"></a>JwtAuthenticationFilter 文件</h2><p>JWT 认证过滤器 (JwtAuthenticationFilter)，用于在每次 HTTP 请求时检查 JWT（JSON Web Token）是否有效，并在验证成功后设置用户身份认证信息。它是基于 Spring Security 的 OncePerRequestFilter 类，用于确保每个请求只被过滤一次。</p><ul><li>检查请求中的 JWT Token。</li><li>验证 Token 的有效性和格式。</li><li>如果 Token 有效，将用户信息设置到 Spring Security 的上下文中。</li><li>如果请求在白名单路径中，则跳过 JWT 检查。</li><li>如果 Token 无效或缺失，返回 HTTP 401 Unauthorized 错误。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.airomance.easytravelroute.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.airomance.easytravelroute.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(JwtAuthenticationFilter.class.getName());</span><br><span class="line">    <span class="comment">// 白名单路径列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] WHITE_LIST_PATHS = &#123;<span class="string">&quot;/users/loginByEmail&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtAuthenticationFilter</span><span class="params">(JwtUtil jwtUtil)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtUtil = jwtUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果请求是白名单路径，跳过 JWT 校验</span></span><br><span class="line">        <span class="keyword">if</span> (isWhiteListed(request)) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);  <span class="comment">// 直接继续请求链，不做认证</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getJwtFromRequest(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 token 不为空且有效，进行身份认证</span></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (jwtUtil.validateToken(token, jwtUtil.extractUsername(token))) &#123;</span><br><span class="line">                    <span class="comment">// 如果 JWT 有效，设置身份认证</span></span><br><span class="line">                    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span></span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(jwtUtil.extractUsername(token), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Token 无效，返回 401 错误</span></span><br><span class="line">                    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">                    response.getWriter().write(<span class="string">&quot;Invalid or expired JWT token&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JwtException e) &#123;</span><br><span class="line">                <span class="comment">// 捕获解析异常，返回 401 错误</span></span><br><span class="line">                logger.log(Level.SEVERE, <span class="string">&quot;Your error message here&quot;</span>, e);</span><br><span class="line">                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;Invalid JWT token format&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Token 缺失，返回 401 错误</span></span><br><span class="line">            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;JWT token is missing&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继续过滤链</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从请求头部获取JWT Token</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getJwtFromRequest</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bearerToken</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (bearerToken != <span class="literal">null</span> &amp;&amp; bearerToken.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> bearerToken.substring(<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断请求路径是否在白名单中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isWhiteListed</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="keyword">for</span> (String path : WHITE_LIST_PATHS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (requestURI.equals(path)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SecurityConfig文件"><a href="#SecurityConfig文件" class="headerlink" title="SecurityConfig文件"></a>SecurityConfig文件</h2><p>Spring Security 的配置类，用于定义应用的安全策略，包括认证机制、过滤器链、密码加密方式等。它通过 SecurityFilterChain 自定义安全规则，并使用 JwtAuthenticationFilter 来实现基于 JWT 的认证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.airomance.easytravelroute.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.airomance.easytravelroute.filter.JwtAuthenticationFilter;</span><br><span class="line"><span class="keyword">import</span> com.airomance.easytravelroute.utils.JwtUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SecurityConfig</span><span class="params">(JwtUtil jwtUtil)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtUtil = jwtUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 添加自定义的 JwtAuthenticationFilter</span></span><br><span class="line">        http.addFilterBefore(<span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(jwtUtil), UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">                .authorizeRequests(authorizeRequests -&gt; authorizeRequests</span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/users/loginByEmail&quot;</span>).permitAll() <span class="comment">// 登录和注册不需要认证</span></span><br><span class="line">                        .anyRequest().authenticated() <span class="comment">// 其他请求需要认证</span></span><br><span class="line">                )</span><br><span class="line">                .csrf(csrf -&gt; csrf.disable()); <span class="comment">// 禁用 CSRF</span></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缺点和不足"><a href="#缺点和不足" class="headerlink" title="缺点和不足"></a>缺点和不足</h2><p>现在可以看到白名单需要在两个文件里都写一遍，原因是我想要在需要token的时候如果没有tokne的请求返回”JWT token is missing”，但是我发现<code>JwtAuthenticationFilter</code>如果不加入白名单判断，就会把所有没有token的都拦截了。</p><p>而且没有暂时没有加入角色控制，因为相关接口还没有写。</p>]]></content>
    
    
    <summary type="html">在项目中引入jwt</summary>
    
    
    
    <category term="毕业设计" scheme="https://blog.whff521.xyz/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="毕业设计" scheme="https://blog.whff521.xyz/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="jwt" scheme="https://blog.whff521.xyz/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus的使用</title>
    <link href="https://blog.whff521.xyz/2024/12/26/MyBatis-Plus%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.whff521.xyz/2024/12/26/MyBatis-Plus%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-12-26T07:32:39.000Z</published>
    <updated>2024-12-26T08:05:31.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Plus的使用"><a href="#MyBatis-Plus的使用" class="headerlink" title="MyBatis-Plus的使用"></a>MyBatis-Plus的使用</h1><p>数据库基本设计完毕，创建完数据库后就需要让后端连接数据库。在这里用<code>MyBatis-Plus</code>的代码生成器能快速生成<code>entity</code>,<code>mapper</code>,<code>service</code>等文件。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="第一步，添加依赖"><a href="#第一步，添加依赖" class="headerlink" title="第一步，添加依赖"></a>第一步，添加依赖</h3><p>在<code>pom.xml</code>文件中的<code>dependencies</code>里添加如下几行代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在我用的是最新的版本，如有问题请去<a href="https://baomidou.com/">官网</a>查看是否有更新。其中<code>freemarker</code>是我要使用的模版引擎。</p><h3 id="第二步-后端连接数据库"><a href="#第二步-后端连接数据库" class="headerlink" title="第二步 后端连接数据库"></a>第二步 后端连接数据库</h3><p>在<code>application.properties</code>下写明你要连接的数据库的详细信息，我用的是<code>mysql5.7</code>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/&quot;yourDatabaseName&quot;</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">&quot;yourSqlUsername(maybe root)&quot;</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">&quot;yourSqlPassword&quot;</span></span><br><span class="line"><span class="attr">mybatis-plus.mapper-locations</span>=<span class="string">classpath:xml/*.xml</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>请将双引号的地方换上你自己要使用的。其中最后一句话是为了之后在终端打印出代码执行的sql语句。</p><h3 id="第三步-编写代码生成器代码"><a href="#第三步-编写代码生成器代码" class="headerlink" title="第三步 编写代码生成器代码"></a>第三步 编写代码生成器代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.airomance.easytravelroute;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tables</span> <span class="operator">=</span> <span class="string">&quot;users,roles,xxx,xxx&quot;</span>;</span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/yourDatabaseName&quot;</span>,<span class="string">&quot;username&quot;</span>,<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .globalConfig(builder -&gt; builder</span><br><span class="line">                        .author(<span class="string">&quot;airomance&quot;</span>)</span><br><span class="line">                        .outputDir(Paths.get(System.getProperty(<span class="string">&quot;user.dir&quot;</span>))+<span class="string">&quot;/src/main/java&quot;</span>)</span><br><span class="line">                        .commentDate(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .packageConfig(builder -&gt; builder</span><br><span class="line">                        .parent(<span class="string">&quot;com.airomance.easytravelroute&quot;</span>)</span><br><span class="line">                        .entity(<span class="string">&quot;entity&quot;</span>)</span><br><span class="line">                        .mapper(<span class="string">&quot;mapper&quot;</span>)</span><br><span class="line">                        .service(<span class="string">&quot;service&quot;</span>)</span><br><span class="line">                        .serviceImpl(<span class="string">&quot;service.impl&quot;</span>)</span><br><span class="line">                        .xml(<span class="string">&quot;mapper.xml&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .strategyConfig(builder -&gt; builder</span><br><span class="line">                        .addInclude(tables.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">                        .entityBuilder()</span><br><span class="line">                        .enableLombok()</span><br><span class="line">                        .enableFileOverride()</span><br><span class="line">                        .controllerBuilder()</span><br><span class="line">                        .enableRestStyle()</span><br><span class="line">                )</span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>())</span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>请将数据库涉及的数据库名称，用户名，密码换成自己的。还有包名。</p><h3 id="第四步-运行代码生成器"><a href="#第四步-运行代码生成器" class="headerlink" title="第四步 运行代码生成器"></a>第四步 运行代码生成器</h3><p>运行代码后应该会自动创建出<code>entity</code>,<code>mapper</code>,<code>service</code>，<code>controller</code>层等文件。这时需要把mapper文件夹下的xml文件夹移动到项目的<code>resources</code>文件夹下，这样方便配置也是一般的使用习惯。</p><p>注意，这里xml必须移动，原因在第二步已经设置了xml文件夹的路径，就是这句配置：</p><p><code>mybatis-plus.mapper-locations=classpath:xml/*.xml</code></p><h3 id="第五步-设置mapper路径"><a href="#第五步-设置mapper路径" class="headerlink" title="第五步 设置mapper路径"></a>第五步 设置mapper路径</h3><p>我们需要将mapper文件夹的路径告诉Spring boot，在启动项目的<code>application</code>文件下添加一个注解。</p><p><code>@MapperScan(&quot;com.airomance.easytravelroute.mapper&quot;)</code></p><p>添加后这个文件代码应该是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.airomance.easytravelroute;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.airomance.easytravelroute.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EasyTravelRouteApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(EasyTravelRouteApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此应该能够正常运行项目，然后进行接口的详细编写了。</p>]]></content>
    
    
    <summary type="html">项目初始添加MyBatis-Plus和自动生成代码</summary>
    
    
    
    <category term="毕业设计" scheme="https://blog.whff521.xyz/categories/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="毕业设计" scheme="https://blog.whff521.xyz/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>考研回忆</title>
    <link href="https://blog.whff521.xyz/2024/12/25/%E8%80%83%E7%A0%94%E5%9B%9E%E5%BF%86/"/>
    <id>https://blog.whff521.xyz/2024/12/25/%E8%80%83%E7%A0%94%E5%9B%9E%E5%BF%86/</id>
    <published>2024-12-25T02:02:57.000Z</published>
    <updated>2024-12-25T02:54:30.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="考研回忆"><a href="#考研回忆" class="headerlink" title="考研回忆"></a>考研回忆</h1><h2 id="最近几天"><a href="#最近几天" class="headerlink" title="最近几天"></a>最近几天</h2><p>说说考试吧，政治肖四复习的时候也没有安排时间背诵答题，只是简单的看了几天。没想到政治题今年出的很难，而且肖四也是没压到题，这么看来我的时间安排还算合理。为了增强我自己内心的激情和逻辑思维能力，每天都在看《觉醒年代》，这个电视剧拍的是真的好，不过在此就不多讲了。</p><p>英一破天荒的大作文出了只有图表的。要知道过去十几年都是漫画类型的，只有去年出了漫画加图表，今年就只出了图表。我也只能硬着头皮把我背的漫画作文的句式硬套进去。翻译做的很烂呜呜呜。</p><p>数一更是一塌糊涂，除了选择题能拿一点点分数外，大题基本没有会的。三重积分考了绕直线旋转的，之前真题应该没考过吧，虽然在大纲里要求过，但是着实是没有去重点复习。如果说这科能够够国家线的话，没准还真能进复试了，只能说等成绩出来吧。我自己知道自己做的怎么样，所以我感觉希望渺茫。</p><p>专业课数据结构与算法，对于一个常年在oi浑水摸鱼的人来说简直就是如鱼得水。题目非常简单。拿到试卷的时候简单翻看了一下最后面的DP，求相邻颜色不重复的涂颜色最小代价的问题。坐在考场上，尽管那天是阴天，我宛如在夕阳下坐在门口的老太太，手里不紧不慢地择棉花，忍不住轻哼起来。</p><p>还有一件值得记录的事情。就是在考研前一晚的旅店的床上，我和一起考研的同学手机聊天说如果中午有人给我买饭就好了，那我就不用去挤食堂了。然后我突然想到我真有一位不考研的好朋友，如果他要是来了岂不美哉。当机立断地和他谈话，然后给他买了机票让他赶紧飞过来。他也是被我的想法吓到了，不过最终还是来了。不过飞机是考研第一天下午到的，所以他也就是给我买了第二天的午饭而已。其实饭不饭的不重要，有好朋友陪着就是天大的好事。这是给他买的机票截图：</p><p><img src="https://images.whff521.top/IMG_6368.jpg" alt="ticket"></p><p>之后就是考完了然后陪他在合肥玩了两天，周一上午的合肥动物园没几个游客，跟包场了一样。</p><p>回到宿舍之后第一件事就是把所有考研相关的书都扔了，书桌清静了一大片。下面是扔之前纪念的照片，数据结构和一些数学的书在旅馆的时候就扔了。</p><p><img src="https://images.whff521.top/IMG_6395.JPG" alt="books"></p><h2 id="复习之旅"><a href="#复习之旅" class="headerlink" title="复习之旅"></a>复习之旅</h2><p>回想起2023年十月份好像是，一起和我参加CCSP的学长和我说考研要趁早准备，数学应该今年12月份就开始复习了。如今想起来他的话说的非常正确，可惜我并没有去执行。直到来年的3，4月我才系统的开始复习数学。但是那个时候正是同学们找工作的黄金时期，我也是跟着他们做了简历投递各家公司，所以耽误了很长一段时间。</p><p>不知不觉暑假都到了，我依然没有进入到复习考研的状态，每天就是看看网课，做做数据结构的题。直到暑假快结束了，我同学给我发了一个帕拉迪宇的b站视频。我才大梦初醒。那个视频已经不记得讲了什么了，不过确实是给我骂醒了。我意识到我不能在混混僵僵混日子了，也是在这时去买了好几本练习册，去进入到刷题的状态。由于开始时间很晚，没过几天就是九月份开学了。</p><p>好在软件工程专业大四应该是实习的时间，所以什么课都没有了，我也能天天跑去图书馆学习。我基本时间安排是上午数学，下午英语和数据结构。十一月开了政治，开始用小程序做题，时间安排在晚上。早上九点学到中午十一点半就去吃饭，下午两点半学到五点半，晚饭过后学到晚上八点。回到宿舍后八点半出去操场区域去跳绳，强身健体。每周日休息一天（专心打游戏一天）。</p><p>由于进入复习状态的时间节点太晚，而且是半路转换目标从数二换成数一，着实是复习不完，最后仅仅是完成了全部知识点的学习，做的题目还是太少了。而且在考场上尽管我背会了傅里叶级数系数的公式，但是还是没有算出来最终求和的答案，归根结底还是不会做题。</p><h2 id="往后"><a href="#往后" class="headerlink" title="往后"></a>往后</h2><p>现在终于专心致志玩电脑了，先把大部分精力放在毕业设计上，学日语的进程也不能放下。走一步是一步了，要准备好进入职场，走向社会了。</p>]]></content>
    
    
    <summary type="html">总之非常痛苦的复习之旅终于结束了，也算是大战以后终于解放了。12月份真的是眨眼之间就过去了，经验++。</summary>
    
    
    
    <category term="杂谈" scheme="https://blog.whff521.xyz/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="杂谈" scheme="https://blog.whff521.xyz/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="考研" scheme="https://blog.whff521.xyz/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>关于自主学习</title>
    <link href="https://blog.whff521.xyz/2024/12/19/%E5%85%B3%E4%BA%8E%E8%87%AA%E4%B8%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.whff521.xyz/2024/12/19/%E5%85%B3%E4%BA%8E%E8%87%AA%E4%B8%BB%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-12-19T10:30:32.000Z</published>
    <updated>2024-12-19T10:32:33.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于自主学习"><a href="#关于自主学习" class="headerlink" title="关于自主学习"></a>关于自主学习</h1><p>最近也是因为在考研，休闲时间会看《觉醒年代》，今天看到一个英语作文在讲激励式教育。</p><p>激励式教育并不可取，因为如果激励消失后，孩子很难再有动力去学习。</p><p>学习究竟是为了什么，这个问题着实需要自己认真思考一下。</p><p>小学到大学的学习可能都只是仅仅想要升学到更好的学校。所以只需要按部就班的学习，做对试卷上的题目就能一天天混日子。从来没有想过学习本身到底是什么。学习本身绝不仅仅是背许多课文，学许多英语单词，考很高的分数。</p><p>为什么要学习？直到高考后选择专业时可能才是某些人第一次问自己想要干什么的时间。自己的理想和梦想的设立，决定和影响着我们人生未来的发展。但是长达九年的义务教育，是否给自己树立了正确的人生观价值观世界观呢？我自己当然是想成为一名程序员，因为电脑工作者很酷，很帅，能够解决很多有趣的问题，实现很多便利的功能。</p><p>那么实现自己的梦想就是需要学习。到了大学之后就不全是老师带着学生死磕课本的学习模式了，自主学习会逐渐成为大学生学习的常态。你想要成为前端工程师，那就去自学html，js，css，vue，react等，想要当后端工程师就要努力钻研spring boot，java，radis等。</p><p>但实际上这种自主学习的目的也并不单纯。比如想要成为程序员是因为薪资高，那么努力学习的目的可能就转变成了为了以后的薪资。那么和激励式教育又有何不同呢？不过是一个是父母给你东西一个是老板给你钱罢了。</p><p>《觉醒年代》中第一次世界大战结束后，一句话传遍中国，那就是“真理战胜强权”。我觉得，追求真理的学习才是真正的自主学习。这是一种纯粹的，学术上的以及实践上的，科学地认识事物发展规律的过程。求知的欲望从物质的满足转化为精神上的满足。何为真理？真理即是正确的，满足事物发展规律的理论，能够服务于大众，服务于社会的。真理可以根据实际情况而拓展和延伸，应用于万事万物。</p><p>那我们之前的学习还是否有意义？我不管什么真理，假理，我学习就是为了钱，为了自己未来的生活，这行不行？这当然行，大行特行。如果否认了这种学习，就是否认了真理。人们常说失败乃成功之母，真理的发现和归纳也是从无数次失败的实践中得来的。只要是前进性的学习，就不能停歇。巨人的肩膀从来不是一个人的肩膀，而是千千万万的民众用千千万万的实践搭建出来的。</p><p>举个例子，如果一开始的学习是为了一份好工作，那么在学习的过程中你会对这份“好工作”有很多新的认识。哦，原来是这样解决问题的；哦，原来还可以这样用吗。学了很长一段时间之后，你可能觉得自己已经很好的掌握了这种知识，也能够胜任这份“好工作了”。很大概率你确实可以获得这份工作，那之后呢？你想过没有，学习的这个过程远远没有停止。在工作上你会遇到各种各样的问题，往往还是书本上，网络上没有教给你的问题。起初你可能会花费很长时间去解决奇怪的问题，但是随着时间的推移你会越来越熟练，这是因为什么？这正是我讲的“真理”在起作用。在实践中你越来越接近“真理”，所以你越来越懂得用“真理”解决问题。所以你解决问题的速度越来越快，因为这些问题都是同一类“真理”的衍生问题。</p><p>但是还有一类问题是无法解决的。就是框架的物理限制。对于程序员来说，运用的所有功能往往取决于框架提供了什么功能。如果框架没有提供这个功能，而问题的解决需要这个功能，最好的解决办法就是你去实现这个功能。通常来讲这就是开源项目成员比较多的提供贡献的理由。功能的实现肯定不是凭空想象，或许是借鉴于其他框架，或许是借鉴于生活。从用轮子到造轮子的这一过程，离不开自主学习。</p><p>目的仅仅是追求真理吗？追求到真理之后还有学会宣传真理。造了轮子没人用，那意义就微乎其微了。但是究竟该怎么宣传我尚不得知，也正是我以后学习应该注意到的点吧。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;关于自主学习&quot;&gt;&lt;a href=&quot;#关于自主学习&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://blog.whff521.xyz/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="杂谈" scheme="https://blog.whff521.xyz/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
