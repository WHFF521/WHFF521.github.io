<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AiRomance</title>
  <icon>https://blog.whff521.xyz/images/101.ico</icon>
  <subtitle>爱裸漫三三</subtitle>
  <link href="https://blog.whff521.xyz/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://blog.whff521.xyz/"/>
  <updated>2025-07-19T06:42:29.826Z</updated>
  <id>https://blog.whff521.xyz/</id>
  
  <author>
    <name>AiRomance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kaggle:  CIFAR-10-Object Recognition in Images</title>
    <link href="https://blog.whff521.xyz/2025/07/19/Kaggle-CIFAR-10-Object-Recognition-in-Images/"/>
    <id>https://blog.whff521.xyz/2025/07/19/Kaggle-CIFAR-10-Object-Recognition-in-Images/</id>
    <published>2025-07-19T02:14:45.000Z</published>
    <updated>2025-07-19T06:42:29.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kaggle-CIFAR-10-Object-Recognition-in-Images"><a href="#Kaggle-CIFAR-10-Object-Recognition-in-Images" class="headerlink" title="Kaggle:  CIFAR-10-Object Recognition in Images"></a>Kaggle:  CIFAR-10-Object Recognition in Images</h1><p>本文是实现<code>d2l</code>网站代码的总结，<a href="https://zh.d2l.ai/chapter_computer-vision/kaggle-cifar10.html#fig-kaggle-cifar10">教程链接</a></p><p>本文所用环境如下：<br><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python==3.9.23</span><br><span class="line">nvidia-cuda-runtime-cu12==12.9.79</span><br><span class="line">torch==2.7.1+cu118</span><br><span class="line">d2l==1.0.3</span><br></pre></td></tr></table></figure></p><h2 id="📚-数据集介绍"><a href="#📚-数据集介绍" class="headerlink" title="📚 数据集介绍"></a>📚 数据集介绍</h2><p>CIFAR-10 是由加拿大多伦多大学 Alex Krizhevsky 等人收集的图像数据集，包含了 <strong>10 个类别的彩色图片</strong>。这些图片都是从真实世界拍摄的物体中裁剪而来的。</p><h3 id="📏-数据细节："><a href="#📏-数据细节：" class="headerlink" title="📏 数据细节："></a>📏 数据细节：</h3><div class="table-container"><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>图片大小</td><td>32x32 像素，RGB（三通道）</td></tr><tr><td>图片数量</td><td>60,000 张图像</td></tr><tr><td>类别数量</td><td>10 个</td></tr><tr><td>训练集</td><td>50,000 张图像</td></tr><tr><td>测试集</td><td>10,000 张图像</td></tr><tr><td>图像格式</td><td><code>.png</code> 图像 + <code>.csv</code> 标签/预测</td></tr></tbody></table></div><h2 id="预测流程"><a href="#预测流程" class="headerlink" title="预测流程"></a>预测流程</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br></pre></td></tr></table></figure><h3 id="数据整理"><a href="#数据整理" class="headerlink" title="数据整理"></a>数据整理</h3><p>我是将完整的数据集下载到本地然后直接用全部数据进行训练的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置数据集的存储位置</span></span><br><span class="line">data_dir = <span class="string">&#x27;D:\datasets\cifar-10&#x27;</span> </span><br></pre></td></tr></table></figure><p>文件夹中有<code>trainLabels.csv</code>,里边有<code>id</code>和<code>label</code>两列，分别代表图片名称和标签。</p><p>原教程是直接读取的文件，根据csv文件是用逗号分隔将文件拆成两部分然后转换成字典类型，实际上直接用<code>pandas</code>库就可以直接读取：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_csv_labels</span>(<span class="params">fname</span>):</span><br><span class="line">    df = pd.read_csv(fname)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(<span class="built_in">zip</span>(df[<span class="string">&#x27;id&#x27;</span>], df[<span class="string">&#x27;label&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">labels = read_csv_labels(os.path.join(data_dir,<span class="string">&#x27;trainLabels.csv&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;# training examples:&#x27;</span>, <span class="built_in">len</span>(labels))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;# classes:&#x27;</span>, <span class="built_in">len</span>(<span class="built_in">set</span>(labels.values())))</span><br></pre></td></tr></table></figure><p>这样我们就得到了标签字典，可以直接用<code>labels</code>查看图片的标签。</p><p>教程中为了方便读取图片，将图片的存储位置重新整理了一下，建立<code>train_valid_test</code>文件夹，里面有<code>train</code>,<code>valid</code>,<code>test</code>和<code>train_valid</code>四个文件夹。除了<code>test</code>文件夹，其他文件夹内均按照标签分成10个文件夹，每个图片根据自己的标签放到相应的文件夹里，这样做是为了后面分组的时候每组的标签尽量均匀。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">copyfile</span>(<span class="params">filename, target_dir</span>):</span><br><span class="line">    os.makedirs(target_dir,exist_ok=<span class="literal">True</span>)</span><br><span class="line">    shutil.copy(filename,target_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reorg_train_valid</span>(<span class="params">data_dir, labels, valid_ratio</span>):</span><br><span class="line">    <span class="comment"># The number of examples of the class that has the fewest examples in the</span></span><br><span class="line">    <span class="comment"># training dataset</span></span><br><span class="line">    n = collections.Counter(labels.values()).most_common()[-<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">    n_valid_per_label = <span class="built_in">max</span>(<span class="number">1</span>,math.floor(n * valid_ratio))</span><br><span class="line">    label_count=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> train_file <span class="keyword">in</span> os.listdir(os.path.join(data_dir,<span class="string">&#x27;train&#x27;</span>)):</span><br><span class="line">        label = labels[train_file.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]]</span><br><span class="line">        fname = os.path.join(data_dir,<span class="string">&#x27;train&#x27;</span>,train_file)</span><br><span class="line">        copyfile(fname,os.path.join(data_dir,<span class="string">&#x27;train_valid_test&#x27;</span>,<span class="string">&#x27;train_valid&#x27;</span>,label))</span><br><span class="line">        <span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> label_count <span class="keyword">or</span> label_count[label] &lt;n_valid_per_label:</span><br><span class="line">            copyfile(fname, os.path.join(data_dir,<span class="string">&#x27;train_valid_test&#x27;</span>,<span class="string">&#x27;valid&#x27;</span>,label))</span><br><span class="line">            label_count[label] = label_count.get(label,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            copyfile(fname, os.path.join(data_dir, <span class="string">&#x27;train_valid_test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>,label))</span><br><span class="line">    <span class="keyword">return</span> n_valid_per_label</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reorg_test</span>(<span class="params">data_dir</span>):</span><br><span class="line">    <span class="keyword">for</span> test_file <span class="keyword">in</span> os.listdir(os.path.join(data_dir,<span class="string">&#x27;test&#x27;</span>)):</span><br><span class="line">        copyfile(os.path.join(data_dir, <span class="string">&#x27;test&#x27;</span>, test_file),</span><br><span class="line">                 os.path.join(data_dir,<span class="string">&#x27;train_valid_test&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;unknown&#x27;</span>))</span><br></pre></td></tr></table></figure><p><code>valid_ratio</code>：验证集占比，如0.1表示验证集500张，训练集4500张</p><p>然后定义一个整合函数，将上面的函数流程统一处理：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reorg_cifar10_data</span>(<span class="params">data_dir,valid_ratio</span>):</span><br><span class="line">    labels = read_csv_labels(os.path.join(data_dir, <span class="string">&#x27;trainLabels.csv&#x27;</span>))</span><br><span class="line">    reorg_train_valid(data_dir, labels, valid_ratio)</span><br><span class="line">    reorg_test(data_dir)</span><br></pre></td></tr></table></figure></p><p>设置批量大小为128，将10％的训练样本作为调整超参数的验证集</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">128</span></span><br><span class="line">valid_ratio = <span class="number">0.1</span></span><br><span class="line">reorg_cifar10_data(data_dir,valid_ratio)</span><br></pre></td></tr></table></figure><h3 id="图像增广"><a href="#图像增广" class="headerlink" title="图像增广"></a>图像增广</h3><p>为了防止过拟合，一般会采用图像增广。</p><p>标准化的原因：</p><ol><li>加快模型收敛速度。让特征值范围大致分布在[-1,1]</li><li>避免某些特征主导模型训练。让各通道均值为0，方差为1，平衡每个像素的“权重”</li><li>提高模型泛化能力</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">transform_train = torchvision.transforms.Compose([</span><br><span class="line">    <span class="comment"># 在高度和宽度上将图像放大到40像素的正方形</span></span><br><span class="line">    torchvision.transforms.Resize(<span class="number">40</span>),</span><br><span class="line">    <span class="comment"># 随机裁剪出一个高度和宽度均为40像素的正方形图像，</span></span><br><span class="line">    <span class="comment"># 生成一个面积为原始图像面积0.64～1倍的小正方形，</span></span><br><span class="line">    <span class="comment"># 然后将其缩放为高度和宽度均为32像素的正方形</span></span><br><span class="line">    torchvision.transforms.RandomResizedCrop(<span class="number">32</span>, scale=(<span class="number">0.64</span>, <span class="number">1.0</span>),</span><br><span class="line">                                                   ratio=(<span class="number">1.0</span>, <span class="number">1.0</span>)),</span><br><span class="line">    <span class="comment"># 随机水平翻转</span></span><br><span class="line">    torchvision.transforms.RandomHorizontalFlip(),</span><br><span class="line">    torchvision.transforms.ToTensor(),</span><br><span class="line">    <span class="comment"># 标准化图像的每个通道</span></span><br><span class="line">    <span class="comment"># 数字是根据数据集提前计算的，前面是RGB均值，后边是标准差</span></span><br><span class="line">    torchvision.transforms.Normalize([<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>],</span><br><span class="line">                                     [<span class="number">0.2023</span>, <span class="number">0.1994</span>, <span class="number">0.2010</span>])])</span><br><span class="line"><span class="comment"># 测试只执行标准化</span></span><br><span class="line">transform_test = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor(),</span><br><span class="line">    torchvision.transforms.Normalize([<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>],</span><br><span class="line">                                     [<span class="number">0.2023</span>, <span class="number">0.1994</span>, <span class="number">0.2010</span>])])</span><br></pre></td></tr></table></figure><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>四个dataset列表：训练集，训练验证集，验证集，测试集</p><p>使用训练集和验证集组合而成的数据集（训练验证集）进行训练，充分利用所有标记的数据。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用列表推导式简洁地加载两个不同子目录的图像数据集，并应用同样的图像增强 transform_train</span></span><br><span class="line">train_ds, train_valid_ds = [torchvision.datasets.ImageFolder(</span><br><span class="line">    os.path.join(data_dir,<span class="string">&#x27;train_valid_test&#x27;</span>,folder),</span><br><span class="line">    transform=transform_train</span><br><span class="line">) <span class="keyword">for</span> folder <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;train_valid&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">valid_ds, test_ds = [torchvision.datasets.ImageFolder(</span><br><span class="line">    os.path.join(data_dir,<span class="string">&#x27;train_valid_test&#x27;</span>,folder),</span><br><span class="line">    transform=transform_test</span><br><span class="line">) <span class="keyword">for</span> folder <span class="keyword">in</span> [<span class="string">&#x27;valid&#x27;</span>,<span class="string">&#x27;test&#x27;</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;train_ds size:&quot;</span>, <span class="built_in">len</span>(train_ds))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;train_valid_ds size:&quot;</span>, <span class="built_in">len</span>(train_valid_ds))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;valid_ds size:&quot;</span>, <span class="built_in">len</span>(valid_ds))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test_ds size:&quot;</span>, <span class="built_in">len</span>(test_ds))</span><br></pre></td></tr></table></figure><p>还需要将上面的数据集转换为可迭代的对象：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用 DataLoader 创建了训练、验证、测试用的数据迭代器，分别控制是否打乱顺序、是否丢弃最后不足一批的数据</span></span><br><span class="line">train_iter, train_valid_iter = [torch.utils.data.DataLoader(</span><br><span class="line">    dataset, batch_size, shuffle=<span class="literal">True</span>, drop_last=<span class="literal">True</span></span><br><span class="line">) <span class="keyword">for</span> dataset <span class="keyword">in</span> (train_ds, train_valid_ds)]</span><br><span class="line"></span><br><span class="line">valid_iter = torch.utils.data.DataLoader(valid_ds, batch_size,shuffle=<span class="literal">False</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">test_iter = torch.utils.data.DataLoader(test_ds, batch_size, shuffle=<span class="literal">False</span>,drop_last=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><p>使用<code>Resnet-18</code>模型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_net</span>():</span><br><span class="line">    <span class="comment"># 数据集一共有10个类别</span></span><br><span class="line">    num_classes = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 3 指RGB 3个通道数</span></span><br><span class="line">    net = d2l.resnet18(num_classes, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"><span class="comment"># 交叉熵损失函数，none表示不自动求平均或求和，返回的是每个样本的loss</span></span><br><span class="line">loss = nn.CrossEntropyLoss(reduction=<span class="string">&quot;none&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="定义训练函数"><a href="#定义训练函数" class="headerlink" title="定义训练函数"></a>定义训练函数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">net,</span></span><br><span class="line"><span class="params">          train_iter,</span></span><br><span class="line"><span class="params">          valid_iter,</span></span><br><span class="line"><span class="params">          num_epochs,</span></span><br><span class="line"><span class="params">          lr,</span></span><br><span class="line"><span class="params">          wd,</span></span><br><span class="line"><span class="params">          devices,</span></span><br><span class="line"><span class="params">          lr_period,</span></span><br><span class="line"><span class="params">          lr_decay</span>):</span><br><span class="line">    <span class="comment"># 定义优化器：使用带动量的SGD优化器，包含学习率和权重衰减</span></span><br><span class="line">    trainer = torch.optim.SGD(net.parameters(), lr=lr, momentum=<span class="number">0.9</span>, weight_decay=wd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学习率调度器：每隔 lr_period 个 epoch，将学习率乘以 lr_decay</span></span><br><span class="line">    scheduler = torch.optim.lr_scheduler.StepLR(trainer, lr_period, lr_decay)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取训练集的批次数量，初始化计时器</span></span><br><span class="line">    num_batches, timer = <span class="built_in">len</span>(train_iter), d2l.Timer()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置绘图图例</span></span><br><span class="line">    legend = [<span class="string">&#x27;train loss&#x27;</span>, <span class="string">&#x27;train acc&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> valid_iter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        legend.append(<span class="string">&#x27;valid acc&#x27;</span>)  <span class="comment"># 如果有验证集，则加上验证准确率</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动画器：用于可视化训练过程（损失和准确率）</span></span><br><span class="line">    animator = d2l.Animator(xlabel=<span class="string">&#x27;epoch&#x27;</span>, xlim=[<span class="number">1</span>, num_epochs], legend=legend)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用多GPU训练，将模型包装为 DataParallel 并移动到指定设备上</span></span><br><span class="line">    net = nn.DataParallel(net, device_ids=devices).to(devices[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        net.train()  <span class="comment"># 设置模型为训练模式</span></span><br><span class="line">        metric = d2l.Accumulator(<span class="number">3</span>)  <span class="comment"># 累加器：记录训练损失、训练准确率、样本数量</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, (features, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_iter):</span><br><span class="line">            timer.start()  <span class="comment"># 开始计时</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 单个 batch 的训练，返回损失和准确率</span></span><br><span class="line">            l, acc = d2l.train_batch_ch13(net, features, labels, loss, trainer, devices)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 累加损失、准确率、样本数</span></span><br><span class="line">            metric.add(l, acc, labels.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            timer.stop()  <span class="comment"># 停止计时</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 每训练 1/5 的 batch 或最后一个 batch 时更新图像</span></span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span>) % (num_batches // <span class="number">5</span>) == <span class="number">0</span> <span class="keyword">or</span> i == num_batches - <span class="number">1</span>:</span><br><span class="line">                animator.add(epoch + (i+<span class="number">1</span>) / num_batches,</span><br><span class="line">                             (metric[<span class="number">0</span>] / metric[<span class="number">2</span>],  <span class="comment"># 平均训练损失</span></span><br><span class="line">                              metric[<span class="number">1</span>] / metric[<span class="number">2</span>],  <span class="comment"># 平均训练准确率</span></span><br><span class="line">                              <span class="literal">None</span>))  <span class="comment"># 暂时不更新验证准确率</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果有验证集，在每个 epoch 结束后评估验证准确率并可视化</span></span><br><span class="line">        <span class="keyword">if</span> valid_iter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            valid_acc = d2l.evaluate_accuracy_gpu(net, valid_iter)</span><br><span class="line">            animator.add(epoch + <span class="number">1</span>, (<span class="literal">None</span>, <span class="literal">None</span>, valid_acc))  <span class="comment"># 只更新验证准确率</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新学习率（根据学习率调度器）</span></span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印最终的训练指标</span></span><br><span class="line">    measures = (<span class="string">f&#x27;train loss <span class="subst">&#123;metric[<span class="number">0</span>] / metric[<span class="number">2</span>]:<span class="number">.3</span>f&#125;</span>, &#x27;</span></span><br><span class="line">                <span class="string">f&#x27;train acc <span class="subst">&#123;metric[<span class="number">1</span>] / metric[<span class="number">2</span>]:<span class="number">.3</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> valid_iter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        measures += <span class="string">f&#x27;, valid acc <span class="subst">&#123;valid_acc:<span class="number">.3</span>f&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印训练速度和设备信息</span></span><br><span class="line">    <span class="built_in">print</span>(measures + <span class="string">f&#x27;\n<span class="subst">&#123;metric[<span class="number">2</span>] * num_epochs / timer.<span class="built_in">sum</span>():<span class="number">.1</span>f&#125;</span>&#x27;</span></span><br><span class="line">          <span class="string">f&#x27; examples/sec on <span class="subst">&#123;<span class="built_in">str</span>(devices)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="训练和验证模型"><a href="#训练和验证模型" class="headerlink" title="训练和验证模型"></a>训练和验证模型</h3><p>定义超参数和训练模型</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devices, num_epochs, lr, wd = d2l.try_all_gpus(), <span class="number">20</span>, <span class="number">2e-4</span>, <span class="number">5e-4</span></span><br><span class="line">lr_period, lr_decay, net = <span class="number">4</span>, <span class="number">0.9</span>, get_net()</span><br><span class="line">train(net, train_iter, valid_iter, num_epochs, lr, wd, devices, lr_period,</span><br><span class="line">      lr_decay)</span><br></pre></td></tr></table></figure><h3 id="对测试集进行分类并生成结果"><a href="#对测试集进行分类并生成结果" class="headerlink" title="对测试集进行分类并生成结果"></a>对测试集进行分类并生成结果</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">net, preds = get_net(), []</span><br><span class="line">train(net, train_valid_iter, <span class="literal">None</span>, num_epochs, lr, wd, devices, lr_period,</span><br><span class="line">      lr_decay)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> X, _ <span class="keyword">in</span> test_iter:</span><br><span class="line">    y_hat = net(X.to(devices[<span class="number">0</span>]))</span><br><span class="line">    preds.extend(y_hat.argmax(dim=<span class="number">1</span>).<span class="built_in">type</span>(torch.int32).cpu().numpy())</span><br><span class="line">sorted_ids = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(test_ds) + <span class="number">1</span>))</span><br><span class="line">sorted_ids.sort(key=<span class="keyword">lambda</span> x: <span class="built_in">str</span>(x))</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;id&#x27;</span>: sorted_ids, <span class="string">&#x27;label&#x27;</span>: preds&#125;)</span><br><span class="line">df[<span class="string">&#x27;label&#x27;</span>] = df[<span class="string">&#x27;label&#x27;</span>].apply(<span class="keyword">lambda</span> x: train_valid_ds.classes[x])</span><br><span class="line">df.to_csv(<span class="string">&#x27;submission.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>生成的<code>submission.csv</code>就可以提交到Kaggle上了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Kaggle-CIFAR-10-Object-Recognition-in-Images&quot;&gt;&lt;a href=&quot;#Kaggle-CIFAR-10-Object-Recognition-in-Images&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="深度学习" scheme="https://blog.whff521.xyz/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Pytorch" scheme="https://blog.whff521.xyz/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>antfu的薅牛毛地图的自用方法</title>
    <link href="https://blog.whff521.xyz/2025/07/14/antfu%E7%9A%84%E8%96%85%E7%89%9B%E6%AF%9B%E5%9C%B0%E5%9B%BE%E7%9A%84%E8%87%AA%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.whff521.xyz/2025/07/14/antfu%E7%9A%84%E8%96%85%E7%89%9B%E6%AF%9B%E5%9C%B0%E5%9B%BE%E7%9A%84%E8%87%AA%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2025-07-14T08:47:56.000Z</published>
    <updated>2025-07-14T11:53:12.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="antfu的薅牛毛地图的自用方法"><a href="#antfu的薅牛毛地图的自用方法" class="headerlink" title="antfu的薅牛毛地图的自用方法"></a>antfu的薅牛毛地图的自用方法</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>去年看了Anthony Fu的“薅牛毛”演讲，当时看到ppt里密集的路线图着实是被视觉冲击了。将复杂的学习路线通过路线图一个个表示出来，最后整体去俯瞰，竟有一种宏伟的成就感。</p><p>什么是薅牛毛呢？在我的现状下，在学习新东西或者完成任务的时候，难免会有一些“前置知识”需要去了解，然后要理解“前置知识”的话，还需要学习一下“前置知识”的“前置知识”。这可能会变成一种dfs或者bfs，越学越多，越学越远，可能有一天发现自己在草原上薅牛毛，而一开始的目标和薅牛毛没有一点点关联。</p><p>最近正在学习图像识别的内容，最主要的目标就是学会使用YOLOv5。当然仅仅是使用的话很简单，我需要的是了解其中的原理并使用它。也因此我的“薅牛毛”之旅开始了。</p><h2 id="制作方法"><a href="#制作方法" class="headerlink" title="制作方法"></a>制作方法</h2><h3 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h3><p>我们可以先fork一下Anthony Fu的<a href="https://github.com/antfu/yak-shaving-map">仓库代码</a>。</p><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>然后将自己仓库的代码下载到本地，先安装环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果本地没有pnpm要先下载pnpm，什么？连npm都没有？</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">那可以“薅牛毛”了😂</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm install -g pnpm</span></span><br><span class="line">pnpm install</span><br></pre></td></tr></table></figure><p>运行代码只需要运行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run dev</span><br></pre></td></tr></table></figure></p><h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><p>其中<code>data.ts</code>中存储的是节点的上下级关系以及节点形状，我们可以删除原来的节点，填写自己想要的节点。</p><p><code>yak-map-pos.json</code>里边是节点的坐标，这个文件不需要手动更改，运行项目后使用鼠标可以拖动节点位置，会自动添加当前节点到json中，json中的节点坐标会自动变化。<strong>建议先把这里面的所有节点删除再添加编写<code>data.ts</code>。</strong></p><p>其中节点类似下面代码：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;YOLOv4&#x27;</span>,</span><br><span class="line">  <span class="attr">display</span>: <span class="string">&#x27;YOLOv4&#x27;</span>,</span><br><span class="line">  <span class="attr">link</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">shape</span>: <span class="string">&#x27;circle&#x27;</span>,</span><br><span class="line">  <span class="attr">color</span>: colors.<span class="property">YOLOv4</span>,</span><br><span class="line">  <span class="attr">from</span>: [<span class="string">&#x27;yolov5&#x27;</span>],</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;CSPDarknet53&#x27;</span>,</span><br><span class="line">  <span class="attr">display</span>: <span class="string">&#x27;CSPDarknet53&#x27;</span>,</span><br><span class="line">  <span class="attr">link</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">color</span>: colors.<span class="property">YOLOv4</span>,</span><br><span class="line">  <span class="attr">from</span>: [<span class="string">&#x27;YOLOv4&#x27;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>注意第一个节点要自定义<code>x</code>和<code>y</code>为0。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>运行后我们打开网页，界面右上角可以调节暗夜模式，鼠标点击左侧空白是回退，鼠标点击右侧空白是前进，右下角按钮可以进入step模式和展示全部。</p><p>这里附上我制作完成后的页面截图：</p><p><img src="https://images.whff521.top/Screenshot%202025-07-14%20at%2019.41.23.png" alt="yolo map"></p><p>我部署到了Cloudflare的pages上了，方便随时查看。这里附上<a href="https://github.com/WHFF521/yak-shaving-map-yolo">我仓库的链接</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;antfu的薅牛毛地图的自用方法&quot;&gt;&lt;a href=&quot;#antfu的薅牛毛地图的自用方法&quot; class=&quot;headerlink&quot; title=&quot;antfu的薅牛毛地图的自用方法&quot;&gt;&lt;/a&gt;antfu的薅牛毛地图的自用方法&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="深度学习" scheme="https://blog.whff521.xyz/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="-- 路线图 -- YOLO" scheme="https://blog.whff521.xyz/tags/%E8%B7%AF%E7%BA%BF%E5%9B%BE-YOLO/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch和cuda环境安装</title>
    <link href="https://blog.whff521.xyz/2025/07/05/Pytorch%E5%92%8Ccuda%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.whff521.xyz/2025/07/05/Pytorch%E5%92%8Ccuda%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</id>
    <published>2025-07-05T02:09:36.000Z</published>
    <updated>2025-07-05T02:50:23.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pytorch和cuda环境安装"><a href="#Pytorch和cuda环境安装" class="headerlink" title="Pytorch和cuda环境安装"></a>Pytorch和cuda环境安装</h1><p>为了避免更换不同版本Cuda的麻烦，环境在Anaconda里面搭建。</p><h2 id="创建conda环境"><a href="#创建conda环境" class="headerlink" title="创建conda环境"></a>创建conda环境</h2><p>Anaconda的安装就不赘述，首先是创建一个虚拟环境：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name your-env-name python=3.13</span><br></pre></td></tr></table></figure><br><code>your-env-name</code>是环境名称，随意更换，python版本也可根据不同环境进行更改。这里要注意<code>--name</code>是两个<code>-</code>，如果只打一个<code>-</code>你有概率会获得一个名字叫<code>ame</code>的虚拟环境😂</p><p>千万不要忘了进入虚拟环境再进行下面的操作：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate your-env-name</span><br></pre></td></tr></table></figure></p><h2 id="安装Cuda"><a href="#安装Cuda" class="headerlink" title="安装Cuda"></a>安装Cuda</h2><p>这里有两种方法，第一是用conda命令进行安装，源应该是conda仓库。第二种是通过pip，源是pip的仓库。其中conda安装的命令虽然更简单，但是conda仓库里Cuda版本十分有限，所以如果conda仓库里如果没有自己想要的版本还是推荐用pip进行安装。</p><h3 id="通过conda安装"><a href="#通过conda安装" class="headerlink" title="通过conda安装"></a>通过conda安装</h3><p>可以通过以下命令查看conda仓库中有哪些版本的Cuda：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda search cudatoolkit --info</span><br></pre></td></tr></table></figure><br>通过conda安装Cuda的命令为：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install cudatoolkit=11.7</span><br></pre></td></tr></table></figure></p><h3 id="通过pip安装"><a href="#通过pip安装" class="headerlink" title="通过pip安装"></a>通过pip安装</h3><p><a href="https://docs.nvidia.com/cuda/cuda-quick-start-guide/index.html#pip-wheels-windows">NVIDIA 官网</a>提供了通过pip安装的方法。</p><p>安装命令如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新pip</span></span><br><span class="line">py -m pip install --upgrade setuptools pip wheel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装nvidia-pyindex</span></span><br><span class="line">py -m pip install nvidia-pyindex</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装cuda12</span></span><br><span class="line">py -m pip install nvidia-cuda-runtime-cu12</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选 安装其他模块</span></span><br><span class="line">py -m pip install nvidia-&lt;library&gt;</span><br></pre></td></tr></table></figure><br>其中<code>py</code>需要替换成<code>python</code>。</p><h2 id="安装Pytorch"><a href="#安装Pytorch" class="headerlink" title="安装Pytorch"></a>安装Pytorch</h2><p><a href="https://pytorch.org/get-started/locally/">Pytorch 官网</a>提供了对应的安装命令<br><img src="https://images.whff521.top/Screenshot%202025-07-05%20at%2010.35.01.png" alt="安装命令"></p><p>这里贴出我使用的：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118</span><br></pre></td></tr></table></figure></p><h2 id="检验安装"><a href="#检验安装" class="headerlink" title="检验安装"></a>检验安装</h2><p>直接在命令行中输入<code>python</code>进入到python，输入以下几行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.version.cuda)</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><p>注意import之后会有一段时间等待python加载。</p><p>PS：今天也是我第一次用anaconda进行搭建这个环境，仅仅是搭建还未投入到代码的使用，可能会有问题。</p><p>PS2：封面是大空スバル，两天前是她的生日！しゅばしゅばしゅば！！！ </p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Pytorch和cuda环境安装&quot;&gt;&lt;a href=&quot;#Pytorch和cuda环境安装&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="深度学习" scheme="https://blog.whff521.xyz/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Pytorch" scheme="https://blog.whff521.xyz/tags/Pytorch/"/>
    
    <category term="Cuda" scheme="https://blog.whff521.xyz/tags/Cuda/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Adjacent Digit Sums</title>
    <link href="https://blog.whff521.xyz/2025/02/13/Codeforces-Adjacent-Digit-Sums/"/>
    <id>https://blog.whff521.xyz/2025/02/13/Codeforces-Adjacent-Digit-Sums/</id>
    <published>2025-02-13T02:12:29.000Z</published>
    <updated>2025-02-13T02:28:48.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Adjacent-Digit-Sums"><a href="#Codeforces-Adjacent-Digit-Sums" class="headerlink" title="Codeforces Adjacent Digit Sums"></a>Codeforces Adjacent Digit Sums</h1><p>这是<code>Codeforces Round 1004(Div.2)</code>的第一题，<a href="https://codeforces.com/contest/2067/problem/A#">题目链接</a>。</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>题目给出了两个数 𝑥 和 𝑦，要求判断是否存在一个整数 𝑛，使得 𝑛 的各位数字之和等于 𝑥，且 𝑛+1 的各位数字之和等于 𝑦。</p><p>S(n) = x, S(n+1) = y</p><p>换句话说，你需要找到一个整数 𝑛，使得：</p><ol><li>𝑛 的各位数字相加等于 𝑥。</li><li>𝑛+1 的各位数字相加等于 𝑦。</li></ol><p>如果存在这样的 𝑛，输出“YES”；否则输出“NO”。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ol><li>对于n的个位数字不是9的，<code>S(n+1) = S(n) + 1</code>;</li><li>对于 n 的个位数字是 9 的，假设从个位开始有连续的 k 个 9，那么<code>S(n+1) = S(n) + 1 - k*9</code>,因为从个位开始加上 1 后连续的 k 个 9 都会变成0，最后的进1贡献为1。</li></ol><p>归纳如果 k = 0 即为情况1。</p><p>将 x 和 y 替换到等式里, y = x + 1 - k*9, k = (x-y+1)/9。</p><p>只需判断k是否为大于等于0的整数即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="type">int</span> remainder = (x-y+<span class="number">1</span>)%<span class="number">9</span>;</span><br><span class="line">        <span class="keyword">if</span>(remainder==<span class="number">0</span>&amp;&amp;(x-y+<span class="number">1</span>)/<span class="number">9</span>&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Codeforces-Adjacent-Digit-Sums&quot;&gt;&lt;a href=&quot;#Codeforces-Adjacent-Digit-Sums&quot; class=&quot;headerlink&quot; title=&quot;Codeforces Adjacent Digit</summary>
        
      
    
    
    
    <category term="算法题" scheme="https://blog.whff521.xyz/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="Codeforces" scheme="https://blog.whff521.xyz/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>曾经最想去的地方是现在最讨厌的地方</title>
    <link href="https://blog.whff521.xyz/2025/01/26/%E6%9B%BE%E7%BB%8F%E6%9C%80%E6%83%B3%E5%8E%BB%E7%9A%84%E5%9C%B0%E6%96%B9%E6%98%AF%E7%8E%B0%E5%9C%A8%E6%9C%80%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>https://blog.whff521.xyz/2025/01/26/%E6%9B%BE%E7%BB%8F%E6%9C%80%E6%83%B3%E5%8E%BB%E7%9A%84%E5%9C%B0%E6%96%B9%E6%98%AF%E7%8E%B0%E5%9C%A8%E6%9C%80%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%9C%B0%E6%96%B9/</id>
    <published>2025-01-26T15:19:58.000Z</published>
    <updated>2025-01-26T15:54:00.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="曾经最想去的地方是现在最讨厌的地方"><a href="#曾经最想去的地方是现在最讨厌的地方" class="headerlink" title="曾经最想去的地方是现在最讨厌的地方"></a>曾经最想去的地方是现在最讨厌的地方</h1><p>最近在看《灿烂的风和海》，是在澳门拍摄的电视剧。其中Casey姐对8岁的韦世杰说：“小时候最想去的地方但是因为各种原因没有去成，长大后那些地方就变成最讨厌去的地方。因为会一直暗示自己没有去是因为自己不喜欢，不想去。久而久之连自己都相信了。”</p><p>我非常懂Casey姐说的话，有些地方小时候没有去成，有些东西小时候没有得到。即使长大了，有能力去了，有能力获得了，却极力避免去，避免获得。甚至不想再看一眼。这并不是自相矛盾，而是人类自身自我保护的潜意识。</p><p>小时候最想要的玩具，明明当初那么想要，但是父母没有给买。长大了，你会体谅父母的不容易，感叹小时候的幼稚。好不容易已经忘记了，不在意了，但是在商场里那个玩具就是再一次跑到你的视线里，那一瞬间，记忆的闸门终于抵挡不住记忆的洪流，你看见了当初哭泣的指着这个玩具求父母买给我的自己。大多数人可能就会撇开视线走掉吧。</p><p>我们不得不承认这就是心灵上的伤疤，谁都不想揭开这个伤疤，因为我们的心会痛，即使知道当初是多么的幼稚，但是当初撕心裂肺的心情撕开的伤疤永远得不到治疗，只要一提起还是会刺痛。</p><p>为什么伤口没有愈合呢？时间为什么解决不了这件事情呢？我觉得是因为你自己没有放过自己。在别人眼里可能就是芝麻大的小事，因为他们并不在乎。但是在当初我们自己眼里，这就是天大的事情，因为我们在乎。</p><p>我很欣赏一句诗：“欲买桂花同载酒，终不似，少年游。”想要买上桂花和美酒一同泛舟，但终究不像少年出游时拥有那种意气了。我们应该尽量避免这种情况的发生。如果我们成天感叹过去的遗憾，一定会忽略当下的美好，只会造成更大的遗憾。</p><p>我们要随时清楚地知道自己想要什么东西。学会饶恕自己，放过自己。小时候没钱学的钢琴长大后也是可以学的，小时候没去的郊游长大后也是可以去的，虽然“终不似少年游”，虽然以前的朋友已经不在身边，但是这片风景一直没有变，它连同小时候的自己一直都在等着你，你要自己踏足此地，和小时候的自己和解，证明自己值得。</p>]]></content>
    
    
    <summary type="html">“欲买桂花同载酒，终不似，少年游。”</summary>
    
    
    
    <category term="杂谈" scheme="https://blog.whff521.xyz/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="思考" scheme="https://blog.whff521.xyz/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
</feed>
