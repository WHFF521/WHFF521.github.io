<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AiRomance</title>
  <icon>https://blog.whff521.xyz/images/101.ico</icon>
  <subtitle>爱裸漫三三</subtitle>
  <link href="https://blog.whff521.xyz/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://blog.whff521.xyz/"/>
  <updated>2024-06-19T13:32:44.156Z</updated>
  <id>https://blog.whff521.xyz/</id>
  
  <author>
    <name>AiRomance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Eloquent JavaScript 08 Exercises</title>
    <link href="https://blog.whff521.xyz/2024/06/19/Eloquent-JavaScript-08-Exercises/"/>
    <id>https://blog.whff521.xyz/2024/06/19/Eloquent-JavaScript-08-Exercises/</id>
    <published>2024-06-19T13:10:16.000Z</published>
    <updated>2024-06-19T13:32:44.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><p><a href="https://eloquentjavascript.net/08_error.html">To the book page</a>  </p><h2 id="Retry"><a href="#Retry" class="headerlink" title="Retry"></a>Retry</h2><p>大概率触发MultiplicatorUnitFailure错误，承接直到运行成功并返回结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiplicatorUnitFailure</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Error</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">primitiveMultiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MultiplicatorUnitFailure</span>(<span class="string">&quot;Klunk&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reliableMultiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ans = <span class="title function_">primitiveMultiply</span>(a,b);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">      <span class="keyword">if</span>(e <span class="keyword">instanceof</span> <span class="title class_">MultiplicatorUnitFailure</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reliableMultiply</span>(<span class="number">8</span>, <span class="number">8</span>));</span><br><span class="line"><span class="comment">// → 64</span></span><br></pre></td></tr></table></figure><h2 id="The-locked-box"><a href="#The-locked-box" class="headerlink" title="The locked box"></a>The locked box</h2><p>先开锁，不管之后干什么都要在函数执行完毕返回前锁上盒子，因为中间操作可能抛出异常导致后面函数不执行，用finally执行关闭函数即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> <span class="keyword">class</span> &#123;</span><br><span class="line">  locked = <span class="literal">true</span>;</span><br><span class="line">  #content = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">unlock</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">locked</span> = <span class="literal">false</span>; &#125;</span><br><span class="line">  <span class="title function_">lock</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">locked</span> = <span class="literal">true</span>;  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">content</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">locked</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Locked!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withBoxUnlocked</span>(<span class="params">body</span>) &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  box.<span class="title function_">unlock</span>();</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="title function_">body</span>();</span><br><span class="line">  &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    box.<span class="title function_">lock</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">withBoxUnlocked</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  box.<span class="property">content</span>.<span class="title function_">push</span>(<span class="string">&quot;gold piece&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">withBoxUnlocked</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Pirates on the horizon! Abort!&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error raised: &quot;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">locked</span>);</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://eloquentjavascript.net/08_error.html&quot;&gt;To the book</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent JavaScript 07 robot</title>
    <link href="https://blog.whff521.xyz/2024/06/19/Eloquent-JavaScript-07-robot/"/>
    <id>https://blog.whff521.xyz/2024/06/19/Eloquent-JavaScript-07-robot/</id>
    <published>2024-06-19T02:35:47.000Z</published>
    <updated>2024-06-19T03:19:07.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="robot"><a href="#robot" class="headerlink" title="robot"></a>robot</h1><p><a href="https://eloquentjavascript.net/07_robot.html">To the book page</a><br>代码解释由AI生成。  </p><h2 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h2><h3 id="数据结构和图的构建"><a href="#数据结构和图的构建" class="headerlink" title="数据结构和图的构建"></a>数据结构和图的构建</h3><p>首先定义了村庄中各个地点之间的道路：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> roads = [</span><br><span class="line">    <span class="string">&quot;Alice&#x27;s House-Bob&#x27;s House&quot;</span>,   <span class="string">&quot;Alice&#x27;s House-Cabin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Alice&#x27;s House-Post Office&quot;</span>,   <span class="string">&quot;Bob&#x27;s House-Town Hall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Daria&#x27;s House-Ernie&#x27;s House&quot;</span>, <span class="string">&quot;Daria&#x27;s House-Town Hall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Ernie&#x27;s House-Grete&#x27;s House&quot;</span>, <span class="string">&quot;Grete&#x27;s House-Farm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Grete&#x27;s House-Shop&quot;</span>,          <span class="string">&quot;Marketplace-Farm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Marketplace-Post Office&quot;</span>,     <span class="string">&quot;Marketplace-Shop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Marketplace-Town Hall&quot;</span>,       <span class="string">&quot;Shop-Town Hall&quot;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>接着，定义 <code>buildGraph</code> 函数来构建图：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildGraph</span>(<span class="params">edges</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> graph = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>); <span class="comment">// 创建一个空对象作为图</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addEdge</span>(<span class="params"><span class="keyword">from</span>, to</span>) &#123; <span class="comment">// 定义一个添加边的函数</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">from</span> <span class="keyword">in</span> graph) &#123;</span><br><span class="line">        graph[<span class="keyword">from</span>].<span class="title function_">push</span>(to); <span class="comment">// 如果节点已经存在，直接添加边</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        graph[<span class="keyword">from</span>] = [to]; <span class="comment">// 如果节点不存在，创建新数组并添加边</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [<span class="keyword">from</span>, to] <span class="keyword">of</span> edges.<span class="title function_">map</span>(<span class="function"><span class="params">r</span> =&gt;</span> r.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>))) &#123;</span><br><span class="line">      <span class="title function_">addEdge</span>(<span class="keyword">from</span>, to); <span class="comment">// 添加双向边</span></span><br><span class="line">      <span class="title function_">addEdge</span>(to, <span class="keyword">from</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> graph; <span class="comment">// 返回构建好的图</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> roadGraph = <span class="title function_">buildGraph</span>(roads);</span><br></pre></td></tr></table></figure><h3 id="村庄状态类"><a href="#村庄状态类" class="headerlink" title="村庄状态类"></a>村庄状态类</h3><p><code>VillageState</code> 类表示村庄的状态，包括机器人的位置和包裹的位置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VillageState</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">place, parcels</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">place</span> = place; <span class="comment">// 机器人当前所在的位置</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">parcels</span> = parcels; <span class="comment">// 包裹列表，每个包裹有一个位置和目标地址</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="title function_">move</span>(<span class="params">destination</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!roadGraph[<span class="variable language_">this</span>.<span class="property">place</span>].<span class="title function_">includes</span>(destination)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// 如果目的地不在当前地点的邻居中，返回当前状态</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> parcels = <span class="variable language_">this</span>.<span class="property">parcels</span>.<span class="title function_">map</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (p.<span class="property">place</span> != <span class="variable language_">this</span>.<span class="property">place</span>) <span class="keyword">return</span> p; <span class="comment">// 如果包裹不在当前位置，不做改变</span></span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">place</span>: destination, <span class="attr">address</span>: p.<span class="property">address</span>&#125;; <span class="comment">// 否则将包裹移动到目的地</span></span><br><span class="line">        &#125;).<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">place</span> != p.<span class="property">address</span>); <span class="comment">// 过滤掉已送达的包裹</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VillageState</span>(destination, parcels); <span class="comment">// 返回新的村庄状态</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行机器人"><a href="#运行机器人" class="headerlink" title="运行机器人"></a>运行机器人</h3><p><code>runRobot</code> 函数模拟机器人运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runRobot</span>(<span class="params">state, robot, memory</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> turn = <span class="number">0</span>;; turn++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (state.<span class="property">parcels</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 如果所有包裹都已送达，结束循环</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> action = <span class="title function_">robot</span>(state, memory); <span class="comment">// 调用机器人函数，获取下一步动作</span></span><br><span class="line">      state = state.<span class="title function_">move</span>(action.<span class="property">direction</span>); <span class="comment">// 移动到下一步位置</span></span><br><span class="line">      memory = action.<span class="property">memory</span>; <span class="comment">// 更新机器人的记忆</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> turn; <span class="comment">// 返回所用的回合数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机机器人"><a href="#随机机器人" class="headerlink" title="随机机器人"></a>随机机器人</h3><p><code>randomRobot</code> 随机选择一个方向移动：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">randomPick</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> choice = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * array.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> array[choice]; <span class="comment">// 从数组中随机选择一个元素</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomRobot</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">direction</span>: <span class="title function_">randomPick</span>(roadGraph[state.<span class="property">place</span>])&#125;; <span class="comment">// 随机选择一个邻居方向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预定义路径机器人"><a href="#预定义路径机器人" class="headerlink" title="预定义路径机器人"></a>预定义路径机器人</h3><p><code>routeRobot</code> 按照预定义的路径移动：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mailRoute = [</span><br><span class="line">    <span class="string">&quot;Alice&#x27;s House&quot;</span>, <span class="string">&quot;Cabin&quot;</span>, <span class="string">&quot;Alice&#x27;s House&quot;</span>, <span class="string">&quot;Bob&#x27;s House&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Town Hall&quot;</span>, <span class="string">&quot;Daria&#x27;s House&quot;</span>, <span class="string">&quot;Ernie&#x27;s House&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Grete&#x27;s House&quot;</span>, <span class="string">&quot;Shop&quot;</span>, <span class="string">&quot;Grete&#x27;s House&quot;</span>, <span class="string">&quot;Farm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Marketplace&quot;</span>, <span class="string">&quot;Post Office&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">routeRobot</span>(<span class="params">state, memory</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (memory.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      memory = mailRoute; <span class="comment">// 如果记忆为空，初始化为预定义路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">direction</span>: memory[<span class="number">0</span>], <span class="attr">memory</span>: memory.<span class="title function_">slice</span>(<span class="number">1</span>)&#125;; <span class="comment">// 按照路径顺序移动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目标导向机器人"><a href="#目标导向机器人" class="headerlink" title="目标导向机器人"></a>目标导向机器人</h3><p><code>goalOrientedRobot</code> 根据包裹的位置和目标地址找到最佳路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findRoute</span>(<span class="params">graph, <span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> work = [&#123;<span class="attr">at</span>: <span class="keyword">from</span>, <span class="attr">route</span>: []&#125;];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; work.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;at, route&#125; = work[i];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> place <span class="keyword">of</span> graph[at]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (place == to) <span class="keyword">return</span> route.<span class="title function_">concat</span>(place); <span class="comment">// 找到目标地点，返回路径</span></span><br><span class="line">        <span class="keyword">if</span> (!work.<span class="title function_">some</span>(<span class="function"><span class="params">w</span> =&gt;</span> w.<span class="property">at</span> == place)) &#123;</span><br><span class="line">          work.<span class="title function_">push</span>(&#123;<span class="attr">at</span>: place, <span class="attr">route</span>: route.<span class="title function_">concat</span>(place)&#125;); <span class="comment">// 将新的位置加入工作队列</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">goalOrientedRobot</span>(<span class="params">&#123;place, parcels&#125;, route</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> parcel = parcels[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (parcel.<span class="property">place</span> != place) &#123;</span><br><span class="line">        route = <span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">place</span>); <span class="comment">// 找到包裹位置的路径</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        route = <span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">address</span>); <span class="comment">// 找到包裹目标地址的路径</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">direction</span>: route[<span class="number">0</span>], <span class="attr">memory</span>: route.<span class="title function_">slice</span>(<span class="number">1</span>)&#125;; <span class="comment">// 返回下一步方向和剩余路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效率机器人"><a href="#效率机器人" class="headerlink" title="效率机器人"></a>效率机器人</h3><p><code>efficientRobot</code> 根据所有包裹找到最短路径，以提高效率：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">efficientRobot</span>(<span class="params">&#123;place, parcels&#125;, route</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> routes = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> parcel <span class="keyword">of</span> parcels) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parcel.<span class="property">place</span> != place) &#123;</span><br><span class="line">            routes.<span class="title function_">push</span>(<span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">place</span>)); <span class="comment">// 找到包裹位置的路径</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            routes.<span class="title function_">push</span>(<span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">address</span>)); <span class="comment">// 找到包裹目标地址的路径</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        route = routes.<span class="title function_">reduce</span>(<span class="function">(<span class="params">shortest, current</span>) =&gt;</span> </span><br><span class="line">        shortest.<span class="property">length</span> &lt; current.<span class="property">length</span> ? shortest : current <span class="comment">// 选择最短路径</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">direction</span>: route[<span class="number">0</span>], <span class="attr">memory</span>: route.<span class="title function_">slice</span>(<span class="number">1</span>)&#125;; <span class="comment">// 返回下一步方向和剩余路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="机器人比较"><a href="#机器人比较" class="headerlink" title="机器人比较"></a>机器人比较</h3><p><code>compareRobots</code> 用于比较两个机器人的性能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compareRobots</span>(<span class="params">robot1, memory1, robot2, memory2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> totalTurns1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> totalTurns2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> state = <span class="title class_">VillageState</span>.<span class="title function_">random</span>(); <span class="comment">// 随机生成初始状态</span></span><br><span class="line">      totalTurns1 += <span class="title function_">runRobot</span>(state, robot1, memory1); <span class="comment">// 运行第一个机器人</span></span><br><span class="line">      totalTurns2 += <span class="title function_">runRobot</span>(state, robot2, memory2); <span class="comment">// 运行第二个机器人</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Robot 1 average turns: <span class="subst">$&#123;totalTurns1 / <span class="number">100</span>&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Robot 2 average turns: <span class="subst">$&#123;totalTurns2 / <span class="number">100</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，比较目标导向机器人和效率机器人的表现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">compareRobots</span>(goalOrientedRobot, [], efficientRobot, []);</span><br></pre></td></tr></table></figure><p>这段代码会运行两个机器人各100次，比较它们完成任务所需的平均回合数。</p><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><h3 id="Measuring-a-robot"><a href="#Measuring-a-robot" class="headerlink" title="Measuring a robot"></a>Measuring a robot</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行机器人并计算所需回合数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runRobotCount</span>(<span class="params">state, robot, memory</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> turn = <span class="number">0</span>;; turn++) &#123; <span class="comment">// 从0开始记录回合数</span></span><br><span class="line">    <span class="keyword">if</span> (state.<span class="property">parcels</span>.<span class="property">length</span> == <span class="number">0</span>) &#123; <span class="comment">// 如果所有包裹都已送达</span></span><br><span class="line">      <span class="keyword">return</span> turn; <span class="comment">// 返回总回合数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> action = <span class="title function_">robot</span>(state, memory); <span class="comment">// 获取机器人下一步的动作</span></span><br><span class="line">    state = state.<span class="title function_">move</span>(action.<span class="property">direction</span>); <span class="comment">// 根据机器人的指示移动</span></span><br><span class="line">    memory = action.<span class="property">memory</span>; <span class="comment">// 更新机器人的记忆</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较两个机器人的表现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compareRobots</span>(<span class="params">robot1, memory1, robot2, memory2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> totalTurns1 = <span class="number">0</span>, totalTurns2 = <span class="number">0</span>; <span class="comment">// 初始化两个机器人所用的总回合数</span></span><br><span class="line">  <span class="keyword">let</span> tasks = <span class="number">100</span>; <span class="comment">// 设置任务数量为100</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tasks; i++) &#123; <span class="comment">// 循环运行100次</span></span><br><span class="line">    <span class="keyword">let</span> state = <span class="title class_">VillageState</span>.<span class="title function_">random</span>(); <span class="comment">// 随机生成初始状态</span></span><br><span class="line">    totalTurns1 += <span class="title function_">runRobotCount</span>(state, robot1, memory1); <span class="comment">// 运行第一个机器人并累计回合数</span></span><br><span class="line">    totalTurns2 += <span class="title function_">runRobotCount</span>(state, robot2, memory2); <span class="comment">// 运行第二个机器人并累计回合数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出每个机器人完成任务所需的平均回合数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Robot 1 averaged <span class="subst">$&#123;totalTurns1 / tasks&#125;</span> turns per task`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Robot 2 averaged <span class="subst">$&#123;totalTurns2 / tasks&#125;</span> turns per task`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较预定义路径机器人和目标导向机器人的表现</span></span><br><span class="line"><span class="title function_">compareRobots</span>(routeRobot, [], goalOrientedRobot, []);</span><br></pre></td></tr></table></figure><h3 id="Robot-efficiency"><a href="#Robot-efficiency" class="headerlink" title="Robot efficiency"></a>Robot efficiency</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到从起点到多个目标中最短的路线</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findShortestRoute</span>(<span class="params">graph, <span class="keyword">from</span>, goals</span>) &#123;</span><br><span class="line">  <span class="comment">// 对每个目标调用 findRoute 函数，返回所有路径</span></span><br><span class="line">  <span class="keyword">let</span> routes = goals.<span class="title function_">map</span>(<span class="function"><span class="params">goal</span> =&gt;</span> <span class="title function_">findRoute</span>(graph, <span class="keyword">from</span>, goal));</span><br><span class="line">  <span class="comment">// 通过 reduce 方法找到最短的路径</span></span><br><span class="line">  <span class="keyword">return</span> routes.<span class="title function_">reduce</span>(<span class="function">(<span class="params">shortest, current</span>) =&gt;</span> </span><br><span class="line">    shortest.<span class="property">length</span> &lt; current.<span class="property">length</span> ? shortest : current</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高效机器人，选择最优路径来传递包裹</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">efficientRobot</span>(<span class="params">&#123;place, parcels&#125;, route</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (route.<span class="property">length</span> == <span class="number">0</span>) &#123; <span class="comment">// 如果当前没有预定的路径</span></span><br><span class="line">    <span class="keyword">let</span> routes = []; <span class="comment">// 存储所有可能的路径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> parcel <span class="keyword">of</span> parcels) &#123; <span class="comment">// 遍历每个包裹</span></span><br><span class="line">      <span class="keyword">if</span> (parcel.<span class="property">place</span> != place) &#123;</span><br><span class="line">        <span class="comment">// 如果包裹还没被捡起，找到去包裹位置的路径</span></span><br><span class="line">        routes.<span class="title function_">push</span>(<span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">place</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果包裹已捡起，找到去目标地址的路径</span></span><br><span class="line">        routes.<span class="title function_">push</span>(<span class="title function_">findRoute</span>(roadGraph, place, parcel.<span class="property">address</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选择所有路径中最短的一条</span></span><br><span class="line">    route = routes.<span class="title function_">reduce</span>(<span class="function">(<span class="params">shortest, current</span>) =&gt;</span> </span><br><span class="line">      shortest.<span class="property">length</span> &lt; current.<span class="property">length</span> ? shortest : current</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回机器人下一步的方向和更新后的记忆</span></span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">direction</span>: route[<span class="number">0</span>], <span class="attr">memory</span>: route.<span class="title function_">slice</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runRobotAnimation</span>(<span class="title class_">VillageState</span>.<span class="title function_">random</span>(), efficientRobot, []);</span><br></pre></td></tr></table></figure><h3 id="Persistent-group"><a href="#Persistent-group" class="headerlink" title="Persistent group"></a>Persistent group</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PGroup</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">members</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = members; <span class="comment">// 初始化成员列表</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加新成员</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">has</span>(value)) <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// 如果成员已经存在，返回当前对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PGroup</span>(<span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">concat</span>(value)); <span class="comment">// 否则，创建新对象并添加新成员</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除成员</span></span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">has</span>(value)) <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// 如果成员不存在，返回当前对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PGroup</span>(<span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">m</span> =&gt;</span> m !== value)); <span class="comment">// 否则，创建新对象并删除指定成员</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查成员是否存在</span></span><br><span class="line">  <span class="title function_">has</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">includes</span>(value); <span class="comment">// 返回成员是否在列表中</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个静态属性，表示一个空的 PGroup 实例</span></span><br><span class="line">  <span class="keyword">static</span> empty = <span class="keyword">new</span> <span class="title class_">PGroup</span>([]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试实现</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">PGroup</span>.<span class="property">empty</span>.<span class="title function_">add</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// 向空组添加 &#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">let</span> ab = a.<span class="title function_">add</span>(<span class="string">&quot;b&quot;</span>); <span class="comment">// 向包含 &#x27;a&#x27; 的组添加 &#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">let</span> b = ab.<span class="title function_">delete</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// 从包含 &#x27;a&#x27; 和 &#x27;b&#x27; 的组删除 &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">has</span>(<span class="string">&quot;b&quot;</span>)); <span class="comment">// → true  检查 &#x27;b&#x27; 是否存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">has</span>(<span class="string">&quot;b&quot;</span>)); <span class="comment">// → false 检查 &#x27;b&#x27; 是否存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">has</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// → false 检查 &#x27;a&#x27; 是否存在</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;robot&quot;&gt;&lt;a href=&quot;#robot&quot; class=&quot;headerlink&quot; title=&quot;robot&quot;&gt;&lt;/a&gt;robot&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://eloquentjavascript.net/07_robot.html&quot;&gt;To</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent JavaScript 06 Exercises</title>
    <link href="https://blog.whff521.xyz/2024/06/17/Eloquent-JavaScript-06-Exercises/"/>
    <id>https://blog.whff521.xyz/2024/06/17/Eloquent-JavaScript-06-Exercises/</id>
    <published>2024-06-17T15:16:28.000Z</published>
    <updated>2024-06-17T15:58:04.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p><a href="https://eloquentjavascript.net/06_object.html">To the book page</a>  </p><h2 id="A-vector-type"><a href="#A-vector-type" class="headerlink" title="A vector type"></a>A vector type</h2><p>封装一个类，实现坐标的加减法，以及get属性的length返回坐标离原点的距离。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vec</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">plus</span>(<span class="params">other</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="variable language_">this</span>.<span class="property">x</span>+other.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>+other.<span class="property">y</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">minus</span>(<span class="params">other</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="variable language_">this</span>.<span class="property">x</span>-other.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>-other.<span class="property">y</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">length</span>()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable language_">this</span>.<span class="property">x</span>**<span class="number">2</span>+<span class="variable language_">this</span>.<span class="property">y</span>**<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">1</span>, <span class="number">2</span>).<span class="title function_">plus</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">2</span>, <span class="number">3</span>)));</span><br><span class="line"><span class="comment">// → Vec&#123;x: 3, y: 5&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">1</span>, <span class="number">2</span>).<span class="title function_">minus</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">2</span>, <span class="number">3</span>)));</span><br><span class="line"><span class="comment">// → Vec&#123;x: -1, y: -1&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Vec</span>(<span class="number">3</span>, <span class="number">4</span>).<span class="property">length</span>);</span><br><span class="line"><span class="comment">// → 5</span></span><br></pre></td></tr></table></figure><h2 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h2><p>封装一个Group类，实现相当于Set的功能。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span> &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = [];  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">value</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="title function_">has</span>(value))&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">push</span>(value);  </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">member</span> =&gt;</span> member!==value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">has</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">includes</span>(value);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">from</span>(<span class="params">iterable</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> group = <span class="keyword">new</span> <span class="title class_">Group</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> iterable)&#123;</span><br><span class="line">      group.<span class="title function_">add</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> group;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> group = <span class="title class_">Group</span>.<span class="title function_">from</span>([<span class="number">10</span>, <span class="number">20</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(group.<span class="title function_">has</span>(<span class="number">10</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(group.<span class="title function_">has</span>(<span class="number">30</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line">group.<span class="title function_">add</span>(<span class="number">10</span>);</span><br><span class="line">group.<span class="title function_">delete</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(group.<span class="title function_">has</span>(<span class="number">10</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br></pre></td></tr></table></figure><h2 id="Iterable-groups"><a href="#Iterable-groups" class="headerlink" title="Iterable groups"></a>Iterable groups</h2><p>让上面的数组类可迭代。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Your code here (and the code from the previous exercise)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span> &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = [];  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">value</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="title function_">has</span>(value))&#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">push</span>(value);  </span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">members</span> = <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">member</span> =&gt;</span> member!==value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">has</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">members</span>.<span class="title function_">includes</span>(value);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">from</span>(<span class="params">iterable</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> group = <span class="keyword">new</span> <span class="title class_">Group</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> iterable)&#123;</span><br><span class="line">      group.<span class="title function_">add</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> group;</span><br><span class="line">  &#125;</span><br><span class="line">   [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">     <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">let</span> members = <span class="variable language_">this</span>.<span class="property">members</span>;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="title function_">next</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(index &lt; members.<span class="property">length</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;<span class="attr">value</span>:members[index++],<span class="attr">done</span>:<span class="literal">false</span>&#125;;</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="title class_">Group</span>.<span class="title function_">from</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>])) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// → a</span></span><br><span class="line"><span class="comment">// → b</span></span><br><span class="line"><span class="comment">// → c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://eloquentjavascript.net/06_object.html&quot;&gt;To the book</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent JavaScript 05 Exercises</title>
    <link href="https://blog.whff521.xyz/2024/06/17/Eloquent-JavaScript-05-Exercises/"/>
    <id>https://blog.whff521.xyz/2024/06/17/Eloquent-JavaScript-05-Exercises/</id>
    <published>2024-06-17T06:43:43.000Z</published>
    <updated>2024-06-17T15:59:11.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p>记录一下这本书的习题的答案，这是第五章的练习。</p><p><a href="https://eloquentjavascript.net/05_higher_order.html">To the book page</a>  </p><h2 id="Flattening"><a href="#Flattening" class="headerlink" title="Flattening"></a>Flattening</h2><p>将包含数组的数组展开，即只有一对中括号的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrays = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>]];</span><br><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="keyword">let</span> combineArrays = arrays.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator,currentArray</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator.<span class="title function_">concat</span>(currentArray);</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(combineArrays);</span><br><span class="line"><span class="comment">// → [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="Your-own-loop"><a href="#Your-own-loop" class="headerlink" title="Your own loop"></a>Your own loop</h2><p>如果不能满足条件（testAct）就不能继续循环。下一次循环要用新的值（updateAct），每次循环需要执行一定的操作（bodyAct）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">value, testAct, updateAct,bodyAct</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">testAct</span>(value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="title function_">bodyAct</span>(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loop</span>(<span class="title function_">updateAct</span>(value),testAct,updateAct,bodyAct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loop</span>(<span class="number">3</span>, <span class="function"><span class="params">n</span> =&gt;</span> n &gt; <span class="number">0</span>, <span class="function"><span class="params">n</span> =&gt;</span> n - <span class="number">1</span>, <span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="comment">// → 3</span></span><br><span class="line"><span class="comment">// → 2</span></span><br><span class="line"><span class="comment">// → 1</span></span><br></pre></td></tr></table></figure><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h2><p>判断数组中所有元素是否都满足一定的条件，和some函数相反。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">every</span>(<span class="params">array, test</span>) &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">  <span class="keyword">for</span>(item <span class="keyword">of</span> array)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">test</span>(item))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//   return !array.some(element=&gt;!test(element));</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">every</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], <span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">10</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">every</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">16</span>], <span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">10</span>));</span><br><span class="line"><span class="comment">// → false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">every</span>([], <span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">10</span>));</span><br><span class="line"><span class="comment">// → true</span></span><br></pre></td></tr></table></figure><h2 id="Dominant-writing-direction"><a href="#Dominant-writing-direction" class="headerlink" title="Dominant writing direction"></a>Dominant writing direction</h2><p>找出文字中最主要的读法方向。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dominantDirection</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="comment">// Your code here.</span></span><br><span class="line">    <span class="keyword">let</span> counted = <span class="title function_">countBy</span>(text,<span class="function"><span class="params">char</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="title function_">characterScript</span>(char.<span class="title function_">codePointAt</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> script ? script.<span class="property">direction</span> : <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  &#125;).<span class="title function_">filter</span>(<span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> name!=<span class="string">&quot;none&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(counted.<span class="property">length</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;ltr&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> counted.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a.<span class="property">count</span>&gt;b.<span class="property">count</span>?<span class="attr">a</span>:b).<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dominantDirection</span>(<span class="string">&quot;Hello!&quot;</span>));</span><br><span class="line"><span class="comment">// → ltr</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dominantDirection</span>(<span class="string">&quot;Hey, مساء الخير&quot;</span>));</span><br><span class="line"><span class="comment">// → rtl</span></span><br></pre></td></tr></table></figure><p>这是<code>countBy</code>,作用是返回数组中满足要求的数量，groupName作为函数名称调用，返回属于当前item所属于的组名称，在这里有两个组别，分别是true组和false组，然后将所在组的数量加1:  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countBy</span>(<span class="params">items, groupName</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> counts = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> items) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="title function_">groupName</span>(item);</span><br><span class="line">    <span class="keyword">let</span> known = counts.<span class="title function_">find</span>(c = c.<span class="property">name</span> == name);</span><br><span class="line">    <span class="keyword">if</span> (!known) &#123;</span><br><span class="line">      counts.<span class="title function_">push</span>(&#123;name, <span class="attr">count</span>: <span class="number">1</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      known.<span class="property">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countBy</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="params">n</span> =&gt;</span> n &gt; <span class="number">2</span>));</span><br><span class="line"><span class="comment">// → [&#123;name: false, count: 2&#125;, &#123;name: true, count: 3&#125;]</span></span><br></pre></td></tr></table></figure><p>这是<code>characterScript</code>，作用是判断code属于哪一种语言。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">characterScript</span>(<span class="params">code</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> script <span class="keyword">of</span> <span class="variable constant_">SCRIPTS</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (script.<span class="property">ranges</span>.<span class="title function_">some</span>(<span class="function">(<span class="params">[<span class="keyword">from</span>, to]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> code &gt;= <span class="keyword">from</span> &amp;&amp; code &lt; to;</span><br><span class="line">    &#125;)) &#123;</span><br><span class="line">      <span class="keyword">return</span> script;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">characterScript</span>(<span class="number">121</span>));</span><br><span class="line"><span class="comment">// → &#123;name: &quot;Latin&quot;, …&#125;</span></span><br></pre></td></tr></table></figure><p><code>SCRIPTS</code>类型的格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Coptic&quot;</span>,</span><br><span class="line">  <span class="attr">ranges</span>: [[<span class="number">994</span>, <span class="number">1008</span>], [<span class="number">11392</span>, <span class="number">11508</span>], [<span class="number">11513</span>, <span class="number">11520</span>]],</span><br><span class="line">  <span class="attr">direction</span>: <span class="string">&quot;ltr&quot;</span>,</span><br><span class="line">  <span class="attr">year</span>: -<span class="number">200</span>,</span><br><span class="line">  <span class="attr">living</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">link</span>: <span class="string">&quot;https://en.wikipedia.org/wiki/Coptic_alphabet&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h1&gt;&lt;p&gt;记录一下这本书的习题的答案，这是第五章的练习。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="JavaScript" scheme="https://blog.whff521.xyz/categories/JavaScript/"/>
    
    
    <category term="javascript" scheme="https://blog.whff521.xyz/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>用Github Desktop简化你的推送流程</title>
    <link href="https://blog.whff521.xyz/2024/06/12/%E7%94%A8github-Desktop%E7%AE%80%E5%8C%96%E4%BD%A0%E7%9A%84%E6%8E%A8%E9%80%81%E6%B5%81%E7%A8%8B/"/>
    <id>https://blog.whff521.xyz/2024/06/12/%E7%94%A8github-Desktop%E7%AE%80%E5%8C%96%E4%BD%A0%E7%9A%84%E6%8E%A8%E9%80%81%E6%B5%81%E7%A8%8B/</id>
    <published>2024-06-12T08:53:03.000Z</published>
    <updated>2024-06-12T13:36:30.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用Github-Desktop简化你的推送流程"><a href="#用Github-Desktop简化你的推送流程" class="headerlink" title="用Github Desktop简化你的推送流程"></a>用Github Desktop简化你的推送流程</h1><p><a href="https://desktop.github.com/">Github Desktop官方网站</a></p><h2 id="1-第三方仓库克隆"><a href="#1-第三方仓库克隆" class="headerlink" title="1. 第三方仓库克隆"></a>1. 第三方仓库克隆</h2><h3 id="选择file-clone-repository"><a href="#选择file-clone-repository" class="headerlink" title="选择file-&gt;clone repository,"></a>选择file-&gt;clone repository,</h3><p><img src="/../images/githubDesktop/chooseclone.png" alt="chooseClone"></p><h3 id="通过URL克隆你的仓库"><a href="#通过URL克隆你的仓库" class="headerlink" title="通过URL克隆你的仓库"></a>通过URL克隆你的仓库</h3><p>选择URL，里面填你的第三方仓库的https克隆链接，注意要填写公网地址而不是内网地址。  </p><p><img src="/../images/githubDesktop/writeURL.png" alt="writeURL"></p><p><strong>注意选择你保存仓库的本地位置</strong>  </p><p>点击clone后应该会弹出让你输入用户名和密码，如果是gitlab，直接输入你登录gitlab的用户名和密码。  </p><p>到此为止应该是可以克隆仓库到本地了。之后的操作，和一般的git操作是一致的，不过是有了图形化的界面，不用输入繁琐的命令。</p><h2 id="2-add-和-commit"><a href="#2-add-和-commit" class="headerlink" title="2. add 和 commit"></a>2. add 和 commit</h2><p>直接到app界面，一旦仓库有文件更改，app界面会罗列出你更新文件的内容，需要你进行commit操作。  </p><p><img src="/../images/githubDesktop/commit.png" alt="commit"></p><h2 id="3-push"><a href="#3-push" class="headerlink" title="3. push"></a>3. push</h2><p>处理完所有的commit后就可以进行推送了，直接点击界面右边的push origin 即可。</p><p><img src="/../images/githubDesktop/push.png" alt="push"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;用Github-Desktop简化你的推送流程&quot;&gt;&lt;a href=&quot;#用Github-Desktop简化你的推送流程&quot; class=&quot;headerlink&quot; title=&quot;用Github Desktop简化你的推送流程&quot;&gt;&lt;/a&gt;用Github</summary>
        
      
    
    
    
    <category term="计算机相关" scheme="https://blog.whff521.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="git" scheme="https://blog.whff521.xyz/tags/git/"/>
    
  </entry>
  
</feed>
