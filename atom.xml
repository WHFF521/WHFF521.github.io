<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AiRomance</title>
  <icon>https://blog.whff521.xyz/images/101.ico</icon>
  <subtitle>爱裸漫三三</subtitle>
  <link href="https://blog.whff521.xyz/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://blog.whff521.xyz/"/>
  <updated>2024-05-05T02:12:45.468Z</updated>
  <id>https://blog.whff521.xyz/</id>
  
  <author>
    <name>AiRomance</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Project 1: Data Structures</title>
    <link href="https://blog.whff521.xyz/2024/05/05/Project-1-Data-Structures/"/>
    <id>https://blog.whff521.xyz/2024/05/05/Project-1-Data-Structures/</id>
    <published>2024-05-05T02:09:55.000Z</published>
    <updated>2024-05-05T02:12:45.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Project-1-Data-Structures"><a href="#Project-1-Data-Structures" class="headerlink" title="Project 1: Data Structures"></a>Project 1: Data Structures</h1><h2 id="类值的相等判断永远用-equals-而不是"><a href="#类值的相等判断永远用-equals-而不是" class="headerlink" title="类值的相等判断永远用.equals()而不是=="></a><strong>类值的相等判断永远用<code>.equals()</code>而不是<code>==</code></strong></h2><p>花了近两天的时间终于是把Probject 1 完成了，完成了<code>LinkedListDeque</code>和<code>ArrayDeque</code>两种实现的<code>Deque</code>。在此就不再赘述数据结构的实现方法，<a href="https://github.com/WHFF521/skeleton-sp21/tree/master/proj1">代码地址</a>  </p><p>那么我要写一些什么呢？写一些我遇到的问题和bug。  </p><p><strong>这个bug实在是令人火大，这本是不应该出现的错误</strong>  </p><p>正如二级标题所说的，<strong>类值的相等判断永远用<code>.equals()</code>而不是<code>==</code><strong>。而且值得铭记的是，</strong>测试文件一定要扩大数据规模</strong>，因为扩大规模真的会发现意想不到的错误。</p><p>事情的起因是<code>public boolean equals(Object o)</code>这个函数，对于一个自己实现的数据类，这个方法是很有<code>Override</code>的必要的。因为两种数据类基本一样，这里我只用<code>LinkedListDeque</code>举例。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* check if two deques are equal</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> true if they are equal, false otherwise</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Deque)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Deque&lt;?&gt; other = (Deque&lt;?&gt;) o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size() != other.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.get(i)!=other.get(i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码是有bug的，我写的时候这种是真的很难注意到。你有可能也没有注意到，接下来是<code>get()</code>函数的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the item at the given index, if no such item exists, return null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> sentinal.next;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里其实就已经能看清楚问题所在了，<code>get()</code>函数返回的是类型<code>T</code>，是任意封装类，并不是基础数据类型。众所周知Java在比对类是否相等时，<code>==</code>操作符默认是比对类的地址是否一致，也就是看对方是否是自己。显然我们并不想这么做，我们需要比对的是内部存储的值是否相等。就像十张百元钞票和另外十张百元钞票，都是一千元，代表的价值是相同的，而不是因为钞票编号不同所以表示这两堆钞票是不相等的。  </p><p>相信学习过CS61B课程的同学都已经有了写测试代码的好习惯。我也是如此，但是很遗憾的是尽管我写了<code>junit</code>测试，也并没有查出来这个bug。以下是我一开始写的测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEquals</span><span class="params">()</span> &#123;</span><br><span class="line">    LinkedListDeque&lt;Integer&gt; lld1 = <span class="keyword">new</span> <span class="title class_">LinkedListDeque</span>&lt;&gt;();</span><br><span class="line">    LinkedListDeque&lt;Integer&gt; lld2 = <span class="keyword">new</span> <span class="title class_">LinkedListDeque</span>&lt;&gt;();</span><br><span class="line">    assertTrue(lld1.equals(lld2));</span><br><span class="line">    lld1.addFirst(<span class="number">1</span>);</span><br><span class="line">    assertFalse(lld1.equals(lld2));</span><br><span class="line">    lld2.addFirst(<span class="number">1</span>);</span><br><span class="line">    assertTrue(lld1.equals(lld2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是的，测试很容易的通过了。这是为什么呢？这里就要引入大名鼎鼎的<code>IntegerCache</code>了。</p><blockquote><p><code>IntegerCache</code>是Java中的一个类，它是用于缓存Integer对象的一个内部类。在Java中，由于Integer是不可变对象，一些整数值在一定范围内是经常使用的，为了提高性能和节省内存，Java使用了IntegerCache来缓存一些常用的整数对象。<br>在Java中，对于数值在[-128, 127]范围内的Integer对象，如果通过自动装箱的方式创建，会直接使用<code>IntegerCache</code>中已经存在的对象，而不是每次创建新的对象。这样做可以避免频繁创建新的Integer对象，提高了性能和节省了内存。<br>例如，当你通过<code>Integer.valueOf()</code>方法创建一个整数值在[-128, 127]范围内的Integer对象时，如果该值在<code>IntegerCache</code>中已经存在，则直接返回缓存中的对象，而不会创建新的对象。<br>但是需要注意的是，这种缓存机制只适用于整数值在[-128, 127]范围内的情况，超出这个范围的整数值仍然会创建新的Integer对象。</p></blockquote><p>因为<code>IntegerCache</code>的原因，虽然我向两个<code>Deque</code>分别塞入了<code>Ingeter 1</code>，但是实际上这两个1地址是一样的，<del>编号一样的钞票真的不是假钞吗😂</del></p><p>所以正确的测试应该扩大数据规模：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEquals</span><span class="params">()</span> &#123;</span><br><span class="line">    LinkedListDeque&lt;Integer&gt; lld1 = <span class="keyword">new</span> <span class="title class_">LinkedListDeque</span>&lt;&gt;();</span><br><span class="line">    LinkedListDeque&lt;Integer&gt; lld2 = <span class="keyword">new</span> <span class="title class_">LinkedListDeque</span>&lt;&gt;();</span><br><span class="line">    assertTrue(lld1.equals(lld2));</span><br><span class="line">    lld1.addFirst(<span class="number">1</span>);</span><br><span class="line">    assertFalse(lld1.equals(lld2));</span><br><span class="line">    lld2.addFirst(<span class="number">1</span>);</span><br><span class="line">    assertTrue(lld1.equals(lld2));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        lld1.addFirst(i);</span><br><span class="line">        lld2.addFirst(i);</span><br><span class="line">    &#125;</span><br><span class="line">    assertTrue(lld1.equals(lld2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样因为数据超过了128，显然以前的代码是无法通过这个代码的。在这里贴出修改后正确的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Deque)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Deque&lt;?&gt; other = (Deque&lt;?&gt;) o;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size() != other.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.size(); i++) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> <span class="built_in">this</span>.get(i);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">b</span> <span class="operator">=</span> other.get(i);</span><br><span class="line">            <span class="keyword">if</span> (!a.equals(b)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接调用<code>T</code>本身的<code>equals()</code>方法即可，<del>这样即使还是通不过测试的话那也不是咱们代码的错了</del>。</p><h2 id="style-问题"><a href="#style-问题" class="headerlink" title="style 问题"></a>style 问题</h2><p>这个<code>Project 1</code>还挺有意思的，实现完数据类后还要用自己写的数据类去弹吉他。但是在此项目中，code 的 style 有严格的要求，第一次交代码的时候一共 640 points 因为 style 没有按照要求竟然扣了大约 84 points，。。。。<br>但是大可不必阅读那长长的 style 要求，只需要把 IDEA 的自动格式化代码打开即可。具体位置是<code>Settings -&gt; Tools -&gt; Actions on Save -&gt; Reformat code</code>。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Project-1-Data-Structures&quot;&gt;&lt;a href=&quot;#Project-1-Data-Structures&quot; class=&quot;headerlink&quot; title=&quot;Project 1: Data Structures&quot;&gt;&lt;/a&gt;Project</summary>
        
      
    
    
    
    <category term="计算机相关" scheme="https://blog.whff521.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="CS61B 21sp" scheme="https://blog.whff521.xyz/tags/CS61B-21sp/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 943 (Div. 3) A-E solutions</title>
    <link href="https://blog.whff521.xyz/2024/05/03/Codeforces-Round-943-Div-3-A-E-solutions/"/>
    <id>https://blog.whff521.xyz/2024/05/03/Codeforces-Round-943-Div-3-A-E-solutions/</id>
    <published>2024-05-03T10:46:51.000Z</published>
    <updated>2024-05-03T10:50:56.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Round-943-Div-3"><a href="#Codeforces-Round-943-Div-3" class="headerlink" title="Codeforces Round 943 (Div. 3)"></a>Codeforces Round 943 (Div. 3)</h1><p>In this competition, I just got three Accepted.<br><strong><a href="https://codeforces.com/contest/1968">Competition Address</a></strong></p><h2 id="A-Maximize"><a href="#A-Maximize" class="headerlink" title="A. Maximize?"></a>A. Maximize?</h2><p>The meaning of the question is to find maximum of gcd(x,y)+y when gives you x.<br>My solution is to  have a linear search. Enough to pass this question.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;x;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">gcd</span>(i,x)+i&gt;ans)&#123;</span><br><span class="line">                temp = i;</span><br><span class="line">                ans = <span class="built_in">gcd</span>(i,x)+i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;temp&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But the real answer is <code>x-1</code>,it need some mathematical derivations。</p><h2 id="B-Prefiquence"><a href="#B-Prefiquence" class="headerlink" title="B. Prefiquence"></a>B. Prefiquence</h2><p>Give you two 01 strings named a and b, find the max length of prefix of a which is a subsequence of b.<br>I worte a Binary search and passed it.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len&gt;b.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    string temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        temp+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;b.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;=temp.<span class="built_in">size</span>()) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(b[j]==temp[k])&#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k==temp.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> lena,lenb;</span><br><span class="line">        cin&gt;&gt;lena&gt;&gt;lenb;</span><br><span class="line">        </span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        string temp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=lena;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(mid))&#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But last night I must have something wrong in my head. It obviously didn’t need a binary search. The better solution is to use two iterators and linear search.<br>The better code is below.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> lena,lenb;</span><br><span class="line">        cin&gt;&gt;lena&gt;&gt;lenb;</span><br><span class="line">        </span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;lena&amp;&amp;j&lt;lenb)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Assembly-via-Remainders"><a href="#C-Assembly-via-Remainders" class="headerlink" title="C. Assembly via Remainders"></a>C. Assembly via Remainders</h2><p>An array: x<sub>1</sub>,x<sub>2</sub>,…,x<sub>n</sub>, find any array a<sub>1</sub>,a<sub>2</sub>,a<sub>3</sub>,…,a<sub>n</sub>, that a<sub>i</sub>%a<sub>i-1</sub> &#x3D; x<sub>i</sub>, i : 2~n.  </p><p>Solution: take a number that is bigger than any number in x array, the number is a<sub>1</sub>, and next is a<sub>1</sub>+x<sub>2</sub>…<br>Notice that 1 &lt;&#x3D; x<sub>i</sub> &lt;&#x3D; 500, you can just take 501 as the first number.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x[<span class="number">550</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="type">int</span> mi=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;x[i];</span><br><span class="line">            mi = <span class="built_in">max</span>(x[i],mi);</span><br><span class="line">        &#125;</span><br><span class="line">        x[<span class="number">1</span>]=mi+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            x[i]=x[i<span class="number">-1</span>]+x[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;x[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Permutation-Game"><a href="#D-Permutation-Game" class="headerlink" title="D. Permutation Game"></a>D. Permutation Game</h2><p>A permutation of length 𝑛 is an array consisting of 𝑛 distinct integers from 1 to 𝑛 in arbitrary order.  </p><p>Two people, Bodya and Sasha, play the game which has k turns. Both of them are trying to win. Each turn, they get score in their current position. They can decide to move from x to p<sub>x</sub> or stay in current position.  </p><p>Of course you will get the first position of them.  </p><p>The key of the solution is that you move from x to p<sub>x</sub>,it’s acturally a circle. What we need to do is to traverse this circle once. ans &#x3D; max (ans,sum<sub>i</sub> + (k-i)a<sub>pos<sub>i</sub></sub>).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">ll <span class="title">score</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;p,vector&lt;<span class="type">int</span>&gt;&amp;a,<span class="type">int</span> pos,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vis</span><span class="params">(p.size())</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(!vis[pos]&amp;&amp;k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        vis[pos]=<span class="literal">true</span>;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,sum+<span class="number">1LL</span>*k*a[pos]);</span><br><span class="line">        sum+=a[pos];</span><br><span class="line">        pos=p[pos];</span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> n,k,pb,ps;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;k&gt;&gt;pb&gt;&gt;ps;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(n)</span>,<span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;pi:p)&#123;</span><br><span class="line">            cin&gt;&gt;pi;</span><br><span class="line">            pi-=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ai:a)&#123;</span><br><span class="line">            cin&gt;&gt;ai;</span><br><span class="line">        &#125;</span><br><span class="line">        ll Bodya=<span class="built_in">score</span>(p,a,pb<span class="number">-1</span>,k);</span><br><span class="line">        ll Sasha=<span class="built_in">score</span>(p,a,ps<span class="number">-1</span>,k);</span><br><span class="line">cout&lt;&lt;(Bodya&gt;Sasha?<span class="string">&quot;Bodya\n&quot;</span>:Bodya&lt;Sasha?<span class="string">&quot;Sasha\n&quot;</span>:<span class="string">&quot;Draw\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Cells-Arrangement"><a href="#E-Cells-Arrangement" class="headerlink" title="E. Cells Arrangement"></a>E. Cells Arrangement</h2><p>A n*n grid, find n cells that maximize Manhattan distances between any pair of the cells.<br>Official solutions:  </p><blockquote><p>Can you generalize the pattern? We put 𝑛−2 cells on the main diagonal. Then put two cells at (𝑛−1,𝑛) and (𝑛,𝑛).<br>But why does it work? Interesting fact, that in such way we generate all possible Manhattan distances.<br>Odd distances are generated between cells from the main diagonal and (𝑛−1,𝑛).<br>Even distances are generated between cells from the main diagonal and (𝑛,𝑛). </p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;n<span class="number">-1</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Equal-XOR-Segments"><a href="#F-Equal-XOR-Segments" class="headerlink" title="F. Equal XOR Segments"></a>F. <a href="https://codeforces.com/contest/1968/problem/F">Equal XOR Segments</a></h2><p>Too hard for me to understand,sorry.</p><h2 id="G1-Division-LCP-easy-version"><a href="#G1-Division-LCP-easy-version" class="headerlink" title="G1. Division + LCP (easy version)"></a>G1. <a href="https://codeforces.com/contest/1968/problem/G1">Division + LCP (easy version)</a></h2><p>Too hard for me to understand,sorry.</p><h2 id="G2-Division-LCP-hard-version"><a href="#G2-Division-LCP-hard-version" class="headerlink" title="G2. Division + LCP (hard version)"></a>G2. <a href="https://codeforces.com/contest/1968/problem/G2">Division + LCP (hard version)</a></h2><p>Too hard for me to understand,sorry.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Codeforces-Round-943-Div-3&quot;&gt;&lt;a href=&quot;#Codeforces-Round-943-Div-3&quot; class=&quot;headerlink&quot; title=&quot;Codeforces Round 943 (Div.</summary>
        
      
    
    
    
    <category term="算法题" scheme="https://blog.whff521.xyz/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="Codeforces" scheme="https://blog.whff521.xyz/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Spotify美化</title>
    <link href="https://blog.whff521.xyz/2024/04/25/spotify%E7%BE%8E%E5%8C%96/"/>
    <id>https://blog.whff521.xyz/2024/04/25/spotify%E7%BE%8E%E5%8C%96/</id>
    <published>2024-04-25T08:49:31.000Z</published>
    <updated>2024-04-25T09:00:25.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于spicetify-cli对Spotify进行客制化"><a href="#基于spicetify-cli对Spotify进行客制化" class="headerlink" title="基于spicetify-cli对Spotify进行客制化"></a>基于<code>spicetify-cli</code>对Spotify进行客制化</h1><h2 id="什么是spicetify-cli"><a href="#什么是spicetify-cli" class="headerlink" title="什么是spicetify-cli"></a>什么是<code>spicetify-cli</code></h2><ul><li><a href="https://github.com/spicetify/spicetify-cli">spicetify仓库地址</a>  </li><li><a href="https://spicetify.app/docs/getting-started">官网Doc</a>  <blockquote><p>Command-line tool to customize the official Spotify client. Supports Windows, MacOS and Linux.</p></blockquote></li></ul><p>仓库readme明确说明了这是用于定制官方客户端的命令行工具。但是在官网Doc的安装教程里面却没有说清楚，这样会带来很多的麻烦。</p><h2 id="在安装之前你必须要做的事情："><a href="#在安装之前你必须要做的事情：" class="headerlink" title="在安装之前你必须要做的事情："></a>在安装之前你必须要做的事情：</h2><ul><li>确保电脑已经<strong>安装了spotify官方客户端</strong>，因为spicetify只是美化工具而不包含客户端</li><li>确保已经<strong>登陆了个人账号</strong>，新安装的spotify客户端在登陆之前<code>prefs</code>文件并不会创建，会导致spicetify找不到路径而报错。</li><li>默认你已经解决了所有关于网络的问题</li></ul><h2 id="macOS安装步骤"><a href="#macOS安装步骤" class="headerlink" title="macOS安装步骤"></a>macOS安装步骤</h2><p>若安装步骤有问题或者是其他操作系统，你可以直接去官网Doc查看最新的安装步骤。</p><ul><li><p>Spicetify CLI(工具本身)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/spicetify/spicetify-cli/master/install.sh | sh</span><br></pre></td></tr></table></figure></li><li><p>Spicetify Marketplace(在ui中显示市场，一定程度上减轻命令行操作)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/spicetify/spicetify-marketplace/main/resources/install.sh | sh</span><br></pre></td></tr></table></figure></li><li><p>卸载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spicetify restore</span><br><span class="line">rm -rf ~/.spicetify</span><br><span class="line">rm -rf ~/.config/spicetify</span><br></pre></td></tr></table></figure></li></ul><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><p>在此贴出我<a href="https://www.cnblogs.com/hui-tong/p/18065055">参考的博客</a>。  </p><ul><li><p>我使用的主题：<code>Sleek</code><br><img src="https://raw.githubusercontent.com/spicetify/spicetify-themes/master/Sleek/wealthy.png" alt="Sleek"></p></li><li><p>我使用的插件：</p><ul><li><code>lyrics-plus</code> 歌词强化，从各种源中搜寻当前歌的歌词。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spicetify config custom_apps lyrics-plus   </span><br><span class="line">spicetify apply</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="让mac拥有桌面歌词"><a href="#让mac拥有桌面歌词" class="headerlink" title="让mac拥有桌面歌词"></a>让mac拥有桌面歌词</h2><p><a href="https://github.com/ddddxxx/LyricsX">LyricsX</a><br>直接用<code>homebrew</code>安装：<code>brew install --cask lyricsx</code>。<br>安装后，打开，点击右上角<code>LyricsX</code>图标，选择<code>Preferences</code>，将默认音乐播放器改为<code>spotify</code>即可，播放歌曲的时候会自动匹配。<br><img src="https://raw.githubusercontent.com/ddddxxx/LyricsX/master/docs/img/desktop_lyrics.gif" alt="lyricsx"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;基于spicetify-cli对Spotify进行客制化&quot;&gt;&lt;a href=&quot;#基于spicetify-cli对Spotify进行客制化&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="计算机相关" scheme="https://blog.whff521.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="spotify" scheme="https://blog.whff521.xyz/tags/spotify/"/>
    
  </entry>
  
  <entry>
    <title>为博客添加RSS，sitemap和本地搜索</title>
    <link href="https://blog.whff521.xyz/2024/04/23/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0RSS%EF%BC%8Csitemap%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/"/>
    <id>https://blog.whff521.xyz/2024/04/23/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0RSS%EF%BC%8Csitemap%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/</id>
    <published>2024-04-23T09:17:40.000Z</published>
    <updated>2024-04-23T12:35:39.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客的一些配置总结"><a href="#博客的一些配置总结" class="headerlink" title="博客的一些配置总结"></a>博客的一些配置总结</h1><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code> 里添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure><p>其中<code>limit</code>指源里保存的文章个数，<code>content_limit</code>指summary的长度。<br>如果想要添加RSS图标，可在<code>butterfly</code>主题配置文件<code>_config.yml</code>里，<code>social:</code>后添加<code>fas fa-rss: /atom.xml || RSS || &#39;#f26522&#39;</code>,这样RSS图标就会出现在右边头像下边</p><h2 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>根目录<code>_config.yml</code>里添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br></pre></td></tr></table></figure><p>配置成功标志：generate后生成<code>sitemap.xml</code></p><h2 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>我用的<code>butterfly</code>主题，直接在主题配置文件里更改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></table></figure><h2 id="webhook"><a href="#webhook" class="headerlink" title="webhook"></a>webhook</h2><p>在此贴出参考博客<a href="https://blog.haysc.tech/hexo-feed-setup/">here</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;博客的一些配置总结&quot;&gt;&lt;a href=&quot;#博客的一些配置总结&quot; class=&quot;headerlink&quot; title=&quot;博客的一些配置总结&quot;&gt;&lt;/a&gt;博客的一些配置总结&lt;/h1&gt;&lt;h2 id=&quot;添加RSS&quot;&gt;&lt;a href=&quot;#添加RSS&quot;</summary>
        
      
    
    
    
    <category term="计算机相关" scheme="https://blog.whff521.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="hexo" scheme="https://blog.whff521.xyz/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://blog.whff521.xyz/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>Project 0: 2048</title>
    <link href="https://blog.whff521.xyz/2024/04/22/Project-0-2048/"/>
    <id>https://blog.whff521.xyz/2024/04/22/Project-0-2048/</id>
    <published>2024-04-22T08:48:45.000Z</published>
    <updated>2024-04-22T08:57:15.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Project-0-2048"><a href="#Project-0-2048" class="headerlink" title="Project 0: 2048"></a><a href="https://sp21.datastructur.es/materials/proj/proj0/proj0">Project 0: 2048</a></h1><p>在这里贴一个线上2048的网站，<a href="https://play2048.co/">link</a><br><strong>整体代码仓库：<a href="https://github.com/WHFF521/skeleton-sp21">github</a></strong></p><h2 id="TASK-1-emptySpaceExists-Board-b"><a href="#TASK-1-emptySpaceExists-Board-b" class="headerlink" title="TASK 1: emptySpaceExists(Board b)"></a>TASK 1: emptySpaceExists(Board b)</h2><p>简单来说就是检测面板上是否还有没有数的地方。直接O(n)遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns true if at least one space on the Board is empty.</span></span><br><span class="line"><span class="comment"> *  Empty spaces are stored as null.</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">emptySpaceExists</span><span class="params">(Board b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> b.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b.tile(i,j)==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TASK-2-maxTileExists-Board-b"><a href="#TASK-2-maxTileExists-Board-b" class="headerlink" title="TASK 2: maxTileExists(Board b)"></a>TASK 2: maxTileExists(Board b)</h2><p>是否有数字已经等于2048。和上面一样遍历即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if any tile is equal to the maximum valid value.</span></span><br><span class="line"><span class="comment"> * Maximum valid value is given by MAX_PIECE. Note that</span></span><br><span class="line"><span class="comment"> * given a Tile object t, we get its value with t.value().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">maxTileExists</span><span class="params">(Board b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> b.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b.tile(i,j)==<span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(b.tile(i,j).value()==MAX_PIECE) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TASK-3-atLeastOneMoveExists-Board-b"><a href="#TASK-3-atLeastOneMoveExists-Board-b" class="headerlink" title="TASK 3: atLeastOneMoveExists(Board b)"></a>TASK 3: atLeastOneMoveExists(Board b)</h2><p>用户起码还能再走一步的检测函数。首先就是如果有空格子一定可以走，其次是如果有相邻的数相同也可以走。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if there are any valid moves on the board.</span></span><br><span class="line"><span class="comment"> * There are two ways that there can be valid moves:</span></span><br><span class="line"><span class="comment"> * 1. There is at least one empty space on the board.</span></span><br><span class="line"><span class="comment"> * 2. There are two adjacent tiles with the same value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">atLeastOneMoveExists</span><span class="params">(Board b)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dx = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> b.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b.tile(i,j)==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i+dx[k];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j+dy[k];</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=length||y&lt;<span class="number">0</span>||y&gt;=length) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(b.tile(x,y)==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(b.tile(x,y).value()==b.tile(i,j).value()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TASK4-Main-Task-Building-the-Game-Logic"><a href="#TASK4-Main-Task-Building-the-Game-Logic" class="headerlink" title="TASK4: Main Task: Building the Game Logic"></a>TASK4: Main Task: Building the Game Logic</h2><p>最主要的逻辑部分。主要实现了根据不同方向进行<code>move</code>操作，使得数字向指定方向移动并合并。<br>主要规则：  </p><ul><li>在一次整体移动中，如果两个数合并过了，那么就不能和其他数字进行合并。</li><li>每一次合并得到的值也是玩家得到的分数。</li></ul><p><strong>解决方案：</strong>  </p><ol><li>分四个方向进行，先完成<code>NORTH</code>方向的移动，其他方向照猫画虎即可。</li><li>根据移动方向选择遍历的次序，如向上移动，我们需要从最上方一行进行遍历，移动后保证最上方没有空格子出现。</li><li>对于已经合并的位置进行标记，用<code>merge[][]</code>进行了标记。</li><li>对于每个已经移动的方块，要及时<code>break</code>退出</li><li>由于向指定方向移动的时候只有在搜索到有数字的格子才进行判断并移动，用<code>nullTileRow</code>和<code>nullTileCol</code>进行记录空格子的位置，防止格子的指定方向上只有空格子的方向而没有进行移动的情况发生。</li><li>每当<code>move</code>执行都要更改<code>changed</code>为<code>true</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tilt the board toward SIDE. Return true iff this changes the board.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. If two Tile objects are adjacent in the direction of motion and have</span></span><br><span class="line"><span class="comment"> *    the same value, they are merged into one Tile of twice the original</span></span><br><span class="line"><span class="comment"> *    value and that new value is added to the score instance variable</span></span><br><span class="line"><span class="comment"> * 2. A tile that is the result of a merge will not merge again on that</span></span><br><span class="line"><span class="comment"> *    tilt. So each move, every tile will only ever be part of at most one</span></span><br><span class="line"><span class="comment"> *    merge (perhaps zero).</span></span><br><span class="line"><span class="comment"> * 3. When three adjacent tiles in the direction of motion have the same</span></span><br><span class="line"><span class="comment"> *    value, then the leading two tiles in the direction of motion merge,</span></span><br><span class="line"><span class="comment"> *    and the trailing tile does not.</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tilt</span><span class="params">(Side side)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> changed;</span><br><span class="line">    changed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Modify this.board (and perhaps this.score) to account</span></span><br><span class="line">    <span class="comment">// for the tilt to the Side SIDE. If the board changed, set the</span></span><br><span class="line">    <span class="comment">// changed local variable to true.</span></span><br><span class="line">    <span class="type">boolean</span>[][] merge = <span class="keyword">new</span> <span class="title class_">boolean</span>[board.size()][board.size()];</span><br><span class="line">    <span class="keyword">if</span>(side==Side.NORTH)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; board.size(); col++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> board.size()-<span class="number">1</span>; row &gt;= <span class="number">0</span>; row--)&#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);</span><br><span class="line">                <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> nullTileRow=row;</span><br><span class="line">                    <span class="type">boolean</span> tchanged=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> row+<span class="number">1</span>; k &lt;=<span class="number">3</span>; k++)&#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">above</span> <span class="operator">=</span> board.tile(col, k);</span><br><span class="line">                        <span class="keyword">if</span>(above==<span class="literal">null</span>)&#123;</span><br><span class="line">                            nullTileRow = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(above.value()!=t.value()||merge[col][k])&#123;</span><br><span class="line">                                <span class="keyword">if</span>(k-<span class="number">1</span>!=row)&#123;</span><br><span class="line">                                    board.move(col,k-<span class="number">1</span>,t);</span><br><span class="line">                                    changed = <span class="literal">true</span>;</span><br><span class="line">                                    tchanged=<span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                board.move(col,k,t);</span><br><span class="line">                                merge[col][k]=<span class="literal">true</span>;</span><br><span class="line">                                <span class="built_in">this</span>.score += t.value()*<span class="number">2</span>;</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                tchanged=<span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!tchanged)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nullTileRow!=row) &#123;</span><br><span class="line">                            board.move(col,nullTileRow,t);</span><br><span class="line">                            changed = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(side==Side.SOUTH)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; board.size(); col++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; board.size(); row++)&#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);</span><br><span class="line">                <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> nullTileRow=row;</span><br><span class="line">                    <span class="type">boolean</span> tchanged=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> row-<span class="number">1</span>; k &gt;=<span class="number">0</span>; k--)&#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">above</span> <span class="operator">=</span> board.tile(col, k);</span><br><span class="line">                        <span class="keyword">if</span>(above==<span class="literal">null</span>)&#123;</span><br><span class="line">                            nullTileRow = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(above.value()!=t.value()||merge[col][k])&#123;</span><br><span class="line">                                <span class="keyword">if</span>(k+<span class="number">1</span>!=row)&#123;</span><br><span class="line">                                    board.move(col,k+<span class="number">1</span>,t);</span><br><span class="line">                                    changed = <span class="literal">true</span>;</span><br><span class="line">                                    tchanged=<span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                board.move(col,k,t);</span><br><span class="line">                                merge[col][k]=<span class="literal">true</span>;</span><br><span class="line">                                <span class="built_in">this</span>.score += t.value()*<span class="number">2</span>;</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                tchanged=<span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!tchanged)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nullTileRow!=row) &#123;</span><br><span class="line">                            board.move(col,nullTileRow,t);</span><br><span class="line">                            changed = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(side==Side.WEST)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; board.size(); col++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> board.size()-<span class="number">1</span>; row &gt;= <span class="number">0</span>; row--)&#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);</span><br><span class="line">                <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> nullTileCol=col;</span><br><span class="line">                    <span class="type">boolean</span> tchanged=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> col-<span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">above</span> <span class="operator">=</span> board.tile(k, row);</span><br><span class="line">                        <span class="keyword">if</span>(above==<span class="literal">null</span>)&#123;</span><br><span class="line">                            nullTileCol = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(above.value()!=t.value()||merge[k][row])&#123;</span><br><span class="line">                                <span class="keyword">if</span>(k+<span class="number">1</span>!=col)&#123;</span><br><span class="line">                                    board.move(k+<span class="number">1</span>,row,t);</span><br><span class="line">                                    changed = <span class="literal">true</span>;</span><br><span class="line">                                    tchanged=<span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                board.move(k,row,t);</span><br><span class="line">                                merge[k][row]=<span class="literal">true</span>;</span><br><span class="line">                                <span class="built_in">this</span>.score += t.value()*<span class="number">2</span>;</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                tchanged=<span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!tchanged)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nullTileCol!=col) &#123;</span><br><span class="line">                            board.move(nullTileCol,row,t);</span><br><span class="line">                            changed = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(side==Side.EAST)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> board.size()-<span class="number">1</span>; col &gt;= <span class="number">0</span>; col--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> board.size()-<span class="number">1</span>; row &gt;= <span class="number">0</span>; row--)&#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);</span><br><span class="line">                <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> nullTileCol=col;</span><br><span class="line">                    <span class="type">boolean</span> tchanged=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> col+<span class="number">1</span>; k &lt; board.size(); k++)&#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">above</span> <span class="operator">=</span> board.tile(k, row);</span><br><span class="line">                        <span class="keyword">if</span>(above==<span class="literal">null</span>)&#123;</span><br><span class="line">                            nullTileCol = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(above.value()!=t.value()||merge[k][row])&#123;</span><br><span class="line">                                <span class="keyword">if</span>(k-<span class="number">1</span>!=col)&#123;</span><br><span class="line">                                    board.move(k-<span class="number">1</span>,row,t);</span><br><span class="line">                                    changed = <span class="literal">true</span>;</span><br><span class="line">                                    tchanged=<span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                board.move(k,row,t);</span><br><span class="line">                                merge[k][row]=<span class="literal">true</span>;</span><br><span class="line">                                <span class="built_in">this</span>.score += t.value()*<span class="number">2</span>;</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                tchanged=<span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!tchanged)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nullTileCol!=col) &#123;</span><br><span class="line">                            board.move(nullTileCol,row,t);</span><br><span class="line">                            changed = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    checkGameOver();</span><br><span class="line">    <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">        setChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这是CS61B 21sp的第0个project，正如老师说的那样，思考过程的重要性是大于代码编写的。我完成这个项目也是花了几个小时的时间（从一开始看描述到完成，估计得6个多小时）。2048作为<code>Oier</code>们喜闻乐见的游戏，没想到我也能进行亲手编写。很期待接下来的project。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Project-0-2048&quot;&gt;&lt;a href=&quot;#Project-0-2048&quot; class=&quot;headerlink&quot; title=&quot;Project 0: 2048&quot;&gt;&lt;/a&gt;&lt;a</summary>
        
      
    
    
    
    <category term="计算机相关" scheme="https://blog.whff521.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="CS61B 21sp" scheme="https://blog.whff521.xyz/tags/CS61B-21sp/"/>
    
  </entry>
  
</feed>
