<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为博客添加RSS，sitemap和本地搜索</title>
      <link href="/2024/04/23/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0RSS%EF%BC%8Csitemap%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/"/>
      <url>/2024/04/23/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0RSS%EF%BC%8Csitemap%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="博客的一些配置总结"><a href="#博客的一些配置总结" class="headerlink" title="博客的一些配置总结"></a>博客的一些配置总结</h1><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code> 里添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure><p>其中<code>limit</code>指源里保存的文章个数，<code>content_limit</code>指summary的长度。<br>如果想要添加RSS图标，可在<code>butterfly</code>主题配置文件<code>_config.yml</code>里，<code>social:</code>后添加<code>fas fa-rss: /atom.xml || RSS || &#39;#f26522&#39;</code>,这样RSS图标就会出现在右边头像下边</p><h2 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>根目录<code>_config.yml</code>里添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br></pre></td></tr></table></figure><p>配置成功标志：generate后生成<code>sitemap.xml</code></p><h2 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>我用的<code>butterfly</code>主题，直接在主题配置文件里更改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></table></figure><h2 id="webhook"><a href="#webhook" class="headerlink" title="webhook"></a>webhook</h2><p>在此贴出参考博客<a href="https://blog.haysc.tech/hexo-feed-setup/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project 0: 2048</title>
      <link href="/2024/04/22/Project-0-2048/"/>
      <url>/2024/04/22/Project-0-2048/</url>
      
        <content type="html"><![CDATA[<h1 id="Project-0-2048"><a href="#Project-0-2048" class="headerlink" title="Project 0: 2048"></a><a href="https://sp21.datastructur.es/materials/proj/proj0/proj0">Project 0: 2048</a></h1><p>在这里贴一个线上2048的网站，<a href="https://play2048.co/">link</a><br><strong>整体代码仓库：<a href="https://github.com/WHFF521/skeleton-sp21">github</a></strong></p><h2 id="TASK-1-emptySpaceExists-Board-b"><a href="#TASK-1-emptySpaceExists-Board-b" class="headerlink" title="TASK 1: emptySpaceExists(Board b)"></a>TASK 1: emptySpaceExists(Board b)</h2><p>简单来说就是检测面板上是否还有没有数的地方。直接O(n)遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns true if at least one space on the Board is empty.</span></span><br><span class="line"><span class="comment"> *  Empty spaces are stored as null.</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">emptySpaceExists</span><span class="params">(Board b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> b.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b.tile(i,j)==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TASK-2-maxTileExists-Board-b"><a href="#TASK-2-maxTileExists-Board-b" class="headerlink" title="TASK 2: maxTileExists(Board b)"></a>TASK 2: maxTileExists(Board b)</h2><p>是否有数字已经等于2048。和上面一样遍历即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if any tile is equal to the maximum valid value.</span></span><br><span class="line"><span class="comment"> * Maximum valid value is given by MAX_PIECE. Note that</span></span><br><span class="line"><span class="comment"> * given a Tile object t, we get its value with t.value().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">maxTileExists</span><span class="params">(Board b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> b.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b.tile(i,j)==<span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(b.tile(i,j).value()==MAX_PIECE) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TASK-3-atLeastOneMoveExists-Board-b"><a href="#TASK-3-atLeastOneMoveExists-Board-b" class="headerlink" title="TASK 3: atLeastOneMoveExists(Board b)"></a>TASK 3: atLeastOneMoveExists(Board b)</h2><p>用户起码还能再走一步的检测函数。首先就是如果有空格子一定可以走，其次是如果有相邻的数相同也可以走。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if there are any valid moves on the board.</span></span><br><span class="line"><span class="comment"> * There are two ways that there can be valid moves:</span></span><br><span class="line"><span class="comment"> * 1. There is at least one empty space on the board.</span></span><br><span class="line"><span class="comment"> * 2. There are two adjacent tiles with the same value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">atLeastOneMoveExists</span><span class="params">(Board b)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dx = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> b.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b.tile(i,j)==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i+dx[k];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j+dy[k];</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;=length||y&lt;<span class="number">0</span>||y&gt;=length) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(b.tile(x,y)==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(b.tile(x,y).value()==b.tile(i,j).value()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TASK4-Main-Task-Building-the-Game-Logic"><a href="#TASK4-Main-Task-Building-the-Game-Logic" class="headerlink" title="TASK4: Main Task: Building the Game Logic"></a>TASK4: Main Task: Building the Game Logic</h2><p>最主要的逻辑部分。主要实现了根据不同方向进行<code>move</code>操作，使得数字向指定方向移动并合并。<br>主要规则：  </p><ul><li>在一次整体移动中，如果两个数合并过了，那么就不能和其他数字进行合并。</li><li>每一次合并得到的值也是玩家得到的分数。</li></ul><p><strong>解决方案：</strong>  </p><ol><li>分四个方向进行，先完成<code>NORTH</code>方向的移动，其他方向照猫画虎即可。</li><li>根据移动方向选择遍历的次序，如向上移动，我们需要从最上方一行进行遍历，移动后保证最上方没有空格子出现。</li><li>对于已经合并的位置进行标记，用<code>merge[][]</code>进行了标记。</li><li>对于每个已经移动的方块，要及时<code>break</code>退出</li><li>由于向指定方向移动的时候只有在搜索到有数字的格子才进行判断并移动，用<code>nullTileRow</code>和<code>nullTileCol</code>进行记录空格子的位置，防止格子的指定方向上只有空格子的方向而没有进行移动的情况发生。</li><li>每当<code>move</code>执行都要更改<code>changed</code>为<code>true</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Tilt the board toward SIDE. Return true iff this changes the board.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. If two Tile objects are adjacent in the direction of motion and have</span></span><br><span class="line"><span class="comment"> *    the same value, they are merged into one Tile of twice the original</span></span><br><span class="line"><span class="comment"> *    value and that new value is added to the score instance variable</span></span><br><span class="line"><span class="comment"> * 2. A tile that is the result of a merge will not merge again on that</span></span><br><span class="line"><span class="comment"> *    tilt. So each move, every tile will only ever be part of at most one</span></span><br><span class="line"><span class="comment"> *    merge (perhaps zero).</span></span><br><span class="line"><span class="comment"> * 3. When three adjacent tiles in the direction of motion have the same</span></span><br><span class="line"><span class="comment"> *    value, then the leading two tiles in the direction of motion merge,</span></span><br><span class="line"><span class="comment"> *    and the trailing tile does not.</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tilt</span><span class="params">(Side side)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> changed;</span><br><span class="line">    changed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Modify this.board (and perhaps this.score) to account</span></span><br><span class="line">    <span class="comment">// for the tilt to the Side SIDE. If the board changed, set the</span></span><br><span class="line">    <span class="comment">// changed local variable to true.</span></span><br><span class="line">    <span class="type">boolean</span>[][] merge = <span class="keyword">new</span> <span class="title class_">boolean</span>[board.size()][board.size()];</span><br><span class="line">    <span class="keyword">if</span>(side==Side.NORTH)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; board.size(); col++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> board.size()-<span class="number">1</span>; row &gt;= <span class="number">0</span>; row--)&#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);</span><br><span class="line">                <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> nullTileRow=row;</span><br><span class="line">                    <span class="type">boolean</span> tchanged=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> row+<span class="number">1</span>; k &lt;=<span class="number">3</span>; k++)&#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">above</span> <span class="operator">=</span> board.tile(col, k);</span><br><span class="line">                        <span class="keyword">if</span>(above==<span class="literal">null</span>)&#123;</span><br><span class="line">                            nullTileRow = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(above.value()!=t.value()||merge[col][k])&#123;</span><br><span class="line">                                <span class="keyword">if</span>(k-<span class="number">1</span>!=row)&#123;</span><br><span class="line">                                    board.move(col,k-<span class="number">1</span>,t);</span><br><span class="line">                                    changed = <span class="literal">true</span>;</span><br><span class="line">                                    tchanged=<span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                board.move(col,k,t);</span><br><span class="line">                                merge[col][k]=<span class="literal">true</span>;</span><br><span class="line">                                <span class="built_in">this</span>.score += t.value()*<span class="number">2</span>;</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                tchanged=<span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!tchanged)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nullTileRow!=row) &#123;</span><br><span class="line">                            board.move(col,nullTileRow,t);</span><br><span class="line">                            changed = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(side==Side.SOUTH)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; board.size(); col++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; board.size(); row++)&#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);</span><br><span class="line">                <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> nullTileRow=row;</span><br><span class="line">                    <span class="type">boolean</span> tchanged=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> row-<span class="number">1</span>; k &gt;=<span class="number">0</span>; k--)&#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">above</span> <span class="operator">=</span> board.tile(col, k);</span><br><span class="line">                        <span class="keyword">if</span>(above==<span class="literal">null</span>)&#123;</span><br><span class="line">                            nullTileRow = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(above.value()!=t.value()||merge[col][k])&#123;</span><br><span class="line">                                <span class="keyword">if</span>(k+<span class="number">1</span>!=row)&#123;</span><br><span class="line">                                    board.move(col,k+<span class="number">1</span>,t);</span><br><span class="line">                                    changed = <span class="literal">true</span>;</span><br><span class="line">                                    tchanged=<span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                board.move(col,k,t);</span><br><span class="line">                                merge[col][k]=<span class="literal">true</span>;</span><br><span class="line">                                <span class="built_in">this</span>.score += t.value()*<span class="number">2</span>;</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                tchanged=<span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!tchanged)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nullTileRow!=row) &#123;</span><br><span class="line">                            board.move(col,nullTileRow,t);</span><br><span class="line">                            changed = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(side==Side.WEST)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; board.size(); col++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> board.size()-<span class="number">1</span>; row &gt;= <span class="number">0</span>; row--)&#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);</span><br><span class="line">                <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> nullTileCol=col;</span><br><span class="line">                    <span class="type">boolean</span> tchanged=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> col-<span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">above</span> <span class="operator">=</span> board.tile(k, row);</span><br><span class="line">                        <span class="keyword">if</span>(above==<span class="literal">null</span>)&#123;</span><br><span class="line">                            nullTileCol = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(above.value()!=t.value()||merge[k][row])&#123;</span><br><span class="line">                                <span class="keyword">if</span>(k+<span class="number">1</span>!=col)&#123;</span><br><span class="line">                                    board.move(k+<span class="number">1</span>,row,t);</span><br><span class="line">                                    changed = <span class="literal">true</span>;</span><br><span class="line">                                    tchanged=<span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                board.move(k,row,t);</span><br><span class="line">                                merge[k][row]=<span class="literal">true</span>;</span><br><span class="line">                                <span class="built_in">this</span>.score += t.value()*<span class="number">2</span>;</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                tchanged=<span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!tchanged)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nullTileCol!=col) &#123;</span><br><span class="line">                            board.move(nullTileCol,row,t);</span><br><span class="line">                            changed = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(side==Side.EAST)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> board.size()-<span class="number">1</span>; col &gt;= <span class="number">0</span>; col--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> board.size()-<span class="number">1</span>; row &gt;= <span class="number">0</span>; row--)&#123;</span><br><span class="line">                <span class="type">Tile</span> <span class="variable">t</span> <span class="operator">=</span> board.tile(col, row);</span><br><span class="line">                <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> nullTileCol=col;</span><br><span class="line">                    <span class="type">boolean</span> tchanged=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> col+<span class="number">1</span>; k &lt; board.size(); k++)&#123;</span><br><span class="line">                        <span class="type">Tile</span> <span class="variable">above</span> <span class="operator">=</span> board.tile(k, row);</span><br><span class="line">                        <span class="keyword">if</span>(above==<span class="literal">null</span>)&#123;</span><br><span class="line">                            nullTileCol = k;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(above.value()!=t.value()||merge[k][row])&#123;</span><br><span class="line">                                <span class="keyword">if</span>(k-<span class="number">1</span>!=col)&#123;</span><br><span class="line">                                    board.move(k-<span class="number">1</span>,row,t);</span><br><span class="line">                                    changed = <span class="literal">true</span>;</span><br><span class="line">                                    tchanged=<span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                board.move(k,row,t);</span><br><span class="line">                                merge[k][row]=<span class="literal">true</span>;</span><br><span class="line">                                <span class="built_in">this</span>.score += t.value()*<span class="number">2</span>;</span><br><span class="line">                                changed = <span class="literal">true</span>;</span><br><span class="line">                                tchanged=<span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!tchanged)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nullTileCol!=col) &#123;</span><br><span class="line">                            board.move(nullTileCol,row,t);</span><br><span class="line">                            changed = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    checkGameOver();</span><br><span class="line">    <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">        setChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这是CS61B 21sp的第0个project，正如老师说的那样，思考过程的重要性是大于代码编写的。我完成这个项目也是花了几个小时的时间（从一开始看描述到完成，估计得6个多小时）。2048作为<code>Oier</code>们喜闻乐见的游戏，没想到我也能进行亲手编写。很期待接下来的project。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS61B 21sp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 相关</title>
      <link href="/2024/04/16/shell-%E7%9B%B8%E5%85%B3/"/>
      <url>/2024/04/16/shell-%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://youtu.be/Z56Jmr9Z34Q?si=_VH1jttQRmA_-t82">Lecture 1: Course Overview + The Shell (2020)</a><br><a href="https://missing-semester-cn.github.io/2020/course-shell/">对应中文网站</a></p><ul><li><p><code>date</code> 查看时间</p></li><li><p><code>echo Hello\ World</code> 输出Hello World</p></li><li><p><code>echo $path</code>  查看电脑有哪些路径</p></li><li><p><code>which echo</code>  查看echo命令会执行哪里的文件</p></li><li><p><code>pwd</code> Print Working Directory，即打印当前工作目录</p></li><li><p><code>cd ./home</code>  打开当前目录下home文件夹</p></li><li><p><code>ls</code> “list” 的缩写，表示列出目录中的文件和子目录</p></li><li><p><code>cd</code> ||<code>cd ~</code>  take you home </p></li><li><p><code>cd -</code>  返回刚才所在文件夹，常用于cd ~ 后</p></li><li><p><code>ls -l</code> 长格式显示目录内容,包括文件权限、所有者、文件大小、最后修改时间等</p></li><li><p><code>mv file.txt newfile.txt</code> 重新命名文件</p></li><li><p><code>mv file.txt directory/</code> 移动文件到指定目录中</p></li><li><p><code>cp file.txt directory/</code> 复制文件到指定文件夹</p></li><li><p><code>cp file.txt directory/newfile.txt</code> 复制文件到指定文件夹并重命名</p></li><li><p><code>rm file.txt</code> 删除指定文件，不能删除文件夹及里面的内容</p></li><li><p><code>rm -r directory</code> 删除指定文件夹及其内容，能进行递归删除</p></li><li><p><code>rmdir</code> 仅能删除空文件夹</p></li><li><p><code>mkdir My\ Photos</code> 创建My Photos文件夹，或者用双引号包围带空格的名称</p><ul><li><code>mkdir My Photos</code> 创建My文件夹和Photos文件夹</li></ul></li><li><p><code>ctrl</code>+<code>l</code> clear your terminal and go back to the top</p></li><li><p><code>&gt; file</code>和<code>&lt; file</code><br>  <code>&gt; file</code> 和 <code>&lt;file</code> 重定向符号，用于输入和输出文件。</p><ul><li><p><code>&gt;</code> 符号用于将命令的输出重定向到一个文件中。例如，<code>ls &gt; file.txt</code> 将 <code>ls</code> 命令的输出写入到 <code>file.txt</code> 文件中，如果文件不存在则创建，如果文件已经存在则覆盖原有内容。</p></li><li><p><code>&lt;</code> 符号用于将一个文件的内容作为输入提供给命令。例如，<code>cat &lt; file.txt</code> 将 <code>file.txt</code> 文件的内容作为 <code>cat</code> 命令的输入，<code>cat</code> 命令会将文件的内容输出到终端上。</p></li></ul></li><li><p><code>cat filename</code> 显示一个文件的内容。  </p><ul><li><code>cat</code> 命令还有一些常用的选项，例如 <code>-n</code> 选项用于显示行号，<code>-b</code> 选项用于显示非空行的行号，<code>-E</code> 选项用于在每行的末尾显示一个 <code>$</code> 符号等。</li><li><code>cat &lt; hello.txt &gt; hello2.txt</code> 将<code>hello.txt</code>的内容覆盖写入<code>hello2.txt</code><br>  -<code>cat &lt; hello.txt &gt;&gt; hello2.txt</code> 将内容append到<code>hello2.txt</code></li></ul></li><li><p><code>ls -l | tail -n1</code> 其中 <code>|</code> 组成命令行管道，用于将一个命令的输出作为另一个命令的输入</p></li><li><p><code>sudo su</code> 切换为root用户</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tarjan算法</title>
      <link href="/2024/04/15/tarjan%E7%AE%97%E6%B3%95/"/>
      <url>/2024/04/15/tarjan%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="tarjan-算法（Tarjan’s-strongly-connected-components-algorithm）"><a href="#tarjan-算法（Tarjan’s-strongly-connected-components-algorithm）" class="headerlink" title="tarjan 算法（Tarjan’s strongly connected components algorithm）"></a>tarjan 算法（Tarjan’s strongly connected components algorithm）</h1><p><a href="https://youtu.be/wUgWX0nc4NY?si=pbuZzimi3Nep-z36">很棒的解释视频</a></p><h2 id="简述算法"><a href="#简述算法" class="headerlink" title="简述算法"></a>简述算法</h2><p>Tarjan 算法是一种用于查找图中强连通分量的算法，由 Robert Tarjan 在 1972 年提出。强连通分量是指在有向图中，如果从顶点 u 到顶点 v 以及从顶点 v 到顶点 u 都存在一条路径，那么顶点 u 和顶点 v 是强连通的。</p><p>Tarjan 算法的核心思想是通过深度优先搜索（DFS）遍历图，并使用堆栈来追踪搜索过程中的顶点。在遍历的过程中，对每个顶点进行标记，记录其在搜索树中的深度和最小后向边的深度。如果发现某个顶点的后继节点指向了一个已经被访问过的顶点，那么这个顶点及其所有后继节点构成一个强连通分量。</p><p>Tarjan 算法的关键点在于维护一个栈，用来保存正在搜索的节点。当 DFS 遍历过程中发现一个节点的所有后继节点已经搜索完毕，并且该节点是当前 DFS 搜索树中的根节点时，可以将该节点以及其所有后继节点弹出栈，并将它们标记为一个强连通分量。</p><p>Tarjan 算法的时间复杂度为 O(V + E)，其中 V 表示图中的顶点数，E 表示图中的边数。由于只需要一次 DFS 遍历即可找到所有的强连通分量，因此 Tarjan 算法是一种高效的强连通分量查找算法。</p><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>首先什么是<strong>强连通分量</strong>。就是有向图中一些点，如果每两个点之间互相都有一条到达对方的道路，那么这些点就组成了强连通分量（Strongly Connected Component，简称 SCC）。  </p><p>我们可以想象为每一个SCC就是一个家庭，如果送报纸的话只需要给家庭中任意一个人就行了，因为他们每个人都可以在看完报纸后递给另一个家人。显然我们可以进行<strong>缩点</strong>了。从之前人与人之间的联系上升到家庭与家庭之间的关系。但是因为是有向图，SCC之间可能有边相连，但是是单向的，所以家庭之间并不能合并为同一个SCC。但是在一个家庭所有成员读完报纸后可以委托一个有出边的人去把报纸给邻居（另一个SCC）。  </p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>在此并不证明算法的正确性。现在只聊一聊算法是怎么实现的。  </p><p>首先就是<code>dfn[]</code>和<code>low[]</code>数组。对于图的遍历选择dfs（Depth-First Search）。<code>dfn[]</code>数组记录遍历点的次序。通常为每遍历到一个点，计数器+1，此点的<code>dfn</code>值即为计数器的值。而<code>low[]</code>数组则为记录该点以及其子节点最小的<code>dfn</code>值。  </p><p>如果我们想要知道每个SCC中成员都有谁，那么我们需要在遍历点的同时再将点压入栈<code>stack s</code>内。同时我们需要知道该点是否在栈内，定义一个记录数组<code>onStack[]</code>,如果节点<code>i</code>在栈内，那么<code>onStack[i]=1</code>。如果点的标值不是从<code>1~n</code>连续的，可能需要<code>hash</code>处理。</p><p>那么我们在回过头讨论<code>dfn</code>和<code>low</code>。对于不在栈内的节点，我们直接<code>low[u]=min(low[u],low[v])</code>进行更新。其中<code>u</code>为当前节点，<code>v</code>为<code>u</code>的子节点。对于已经在栈内的子节点，我们通过<code>low[u]=min(low[u],dfn[v])</code>更新。我们可以想象有向图中边一直往前冲，突然有一个边是往回走的，这样就会连接到刚才已经遍历过的点（可能形成一个环），但是这种边我们需要判断是否连接到了另一个SCC，所以我们需要记录点是否在栈内，如果在栈内说明两个点属于同一个SCC，所以可以更新，如果不在，就不能更新当前点的<code>low</code>值。  </p><p><strong>数据出栈</strong>。对于遍历完所有子节点的点来说，如果<code>dfn[u]==low[u]</code>那么说明这是一个SCC。栈内点一个个出栈直到当前点出栈，出栈的所有点即为一个SCC的所有点。定义<code>sccs[]</code>数组记录点所属于的SCC。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p><a href="https://github.com/williamfiset/Algorithms/blob/da50861a53fc2f6642cfc7d82c285166f41d03e2/src/main/java/com/williamfiset/algorithms/graphtheory/TarjanSccSolverAdjacencyList.java">摘自github</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An implementation of Tarjan&#x27;s Strongly Connected Components algorithm using an adjacency list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Verified against:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt;https://open.kattis.com/problems/equivalences</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt;https://open.kattis.com/problems/runningmom</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt;https://www.hackerearth.com/practice/algorithms/graphs/strongly-connected-components/tutorial</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Time complexity: O(V+E)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> William Fiset, william.alexandre.fiset@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.williamfiset.algorithms.graphtheory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.min;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TarjanSccSolverAdjacencyList</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line">  <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; graph;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> solved;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> sccCount, id;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span>[] visited;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span>[] ids, low, sccs;</span><br><span class="line">  <span class="keyword">private</span> Deque&lt;Integer&gt; stack;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNVISITED</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">TarjanSccSolverAdjacencyList</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; graph)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (graph == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Graph cannot be null.&quot;</span>);</span><br><span class="line">    n = graph.size();</span><br><span class="line">    <span class="built_in">this</span>.graph = graph;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Returns the number of strongly connected components in the graph.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sccCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!solved) solve();</span><br><span class="line">    <span class="keyword">return</span> sccCount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the connected components of this graph. If two indexes</span></span><br><span class="line">  <span class="comment">// have the same value then they&#x27;re in the same SCC.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span>[] getSccs() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!solved) solve();</span><br><span class="line">    <span class="keyword">return</span> sccs;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (solved) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    ids = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    low = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    sccs = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    Arrays.fill(ids, UNVISITED);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ids[i] == UNVISITED) &#123;</span><br><span class="line">        dfs(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    solved = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> at)</span> &#123;</span><br><span class="line">    ids[at] = low[at] = id++;</span><br><span class="line">    stack.push(at);</span><br><span class="line">    visited[at] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> to : graph.get(at)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ids[to] == UNVISITED) &#123;</span><br><span class="line">        dfs(to);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (visited[to]) &#123;</span><br><span class="line">        low[at] = min(low[at], low[to]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       TODO(william): investigate whether the proper way to update the lowlinks</span></span><br><span class="line"><span class="comment">       is the following bit of code. From my experience this doesn&#x27;t seem to</span></span><br><span class="line"><span class="comment">       matter if the output is placed in a separate output array, but this needs</span></span><br><span class="line"><span class="comment">       further investigation.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       if (ids[to] == UNVISITED) &#123;</span></span><br><span class="line"><span class="comment">         dfs(to);</span></span><br><span class="line"><span class="comment">         low[at] = min(low[at], low[to]);</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">       if (visited[to]) &#123;</span></span><br><span class="line"><span class="comment">         low[at] = min(low[at], ids[to]);</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// On recursive callback, if we&#x27;re at the root node (start of SCC)</span></span><br><span class="line">    <span class="comment">// empty the seen stack until back to root.</span></span><br><span class="line">    <span class="keyword">if</span> (ids[at] == low[at]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">node</span> <span class="operator">=</span> stack.pop(); ; node = stack.pop()) &#123;</span><br><span class="line">        visited[node] = <span class="literal">false</span>;</span><br><span class="line">        sccs[node] = sccCount;</span><br><span class="line">        <span class="keyword">if</span> (node == at) <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      sccCount++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initializes adjacency list with n nodes.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">createGraph</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) graph.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adds a directed edge from node &#x27;from&#x27; to node &#x27;to&#x27;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; graph, <span class="type">int</span> from, <span class="type">int</span> to)</span> &#123;</span><br><span class="line">    graph.get(from).add(to);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Example usage: */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arg)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; graph = createGraph(n);</span><br><span class="line"></span><br><span class="line">    addEdge(graph, <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">    addEdge(graph, <span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    addEdge(graph, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    addEdge(graph, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">    addEdge(graph, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    addEdge(graph, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    addEdge(graph, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    addEdge(graph, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    addEdge(graph, <span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">    addEdge(graph, <span class="number">7</span>, <span class="number">5</span>);</span><br><span class="line">    addEdge(graph, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    addEdge(graph, <span class="number">7</span>, <span class="number">3</span>);</span><br><span class="line">    addEdge(graph, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">TarjanSccSolverAdjacencyList</span> <span class="variable">solver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TarjanSccSolverAdjacencyList</span>(graph);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] sccs = solver.getSccs();</span><br><span class="line">    Map&lt;Integer, List&lt;Integer&gt;&gt; multimap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!multimap.containsKey(sccs[i])) multimap.put(sccs[i], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">      multimap.get(sccs[i]).add(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prints:</span></span><br><span class="line">    <span class="comment">// Number of Strongly Connected Components: 3</span></span><br><span class="line">    <span class="comment">// Nodes: [0, 1, 2] form a Strongly Connected Component.</span></span><br><span class="line">    <span class="comment">// Nodes: [3, 7] form a Strongly Connected Component.</span></span><br><span class="line">    <span class="comment">// Nodes: [4, 5, 6] form a Strongly Connected Component.</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;Number of Strongly Connected Components: %d\n&quot;</span>, solver.sccCount());</span><br><span class="line">    <span class="keyword">for</span> (List&lt;Integer&gt; scc : multimap.values()) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Nodes: &quot;</span> + scc + <span class="string">&quot; form a Strongly Connected Component.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p><a href="https://www.luogu.com.cn/problem/P2002">对应洛谷题目</a><br>如果SCC之间有边相邻，只需通知一个SCC即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mxlen = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> pre[mxlen],last[mxlen/<span class="number">5</span>],other[mxlen],l;</span><br><span class="line"><span class="type">int</span> cnt,sccCount;</span><br><span class="line"><span class="type">int</span> dfn[mxlen/<span class="number">5</span>],low[mxlen/<span class="number">5</span>],onStack[mxlen/<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> sccFlags[mxlen/<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> sccIndice[mxlen/<span class="number">5</span>];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    l++;</span><br><span class="line">    pre[l]=last[x];</span><br><span class="line">    last[x]=l;</span><br><span class="line">    other[l]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    dfn[x]=low[x]=cnt;</span><br><span class="line">    onStack[x]=<span class="number">1</span>;</span><br><span class="line">    s.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p=last[x];p;p=pre[p])&#123;</span><br><span class="line">        <span class="type">int</span> y=other[p];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[y])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(y);</span><br><span class="line">            low[x]=<span class="built_in">min</span>(low[x],low[y]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(onStack[y])&#123;</span><br><span class="line">            low[x]=<span class="built_in">min</span>(low[x],dfn[y]);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[x]==low[x])&#123;</span><br><span class="line">        sccCount++;</span><br><span class="line">        <span class="keyword">while</span>(s.<span class="built_in">top</span>()!=x)&#123;</span><br><span class="line">            sccIndice[s.<span class="built_in">top</span>()]=sccCount;</span><br><span class="line">            onStack[s.<span class="built_in">top</span>()]=<span class="number">0</span>;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        sccIndice[x]=sccCount;</span><br><span class="line">        onStack[x]=<span class="number">0</span>;</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkPropagation</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p=last[i];p;p=pre[p])&#123;</span><br><span class="line">            <span class="type">int</span> y=other[p];</span><br><span class="line">            <span class="keyword">if</span>(sccIndice[i]!=sccIndice[y])&#123;</span><br><span class="line">                sccFlags[sccIndice[y]]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">checkPropagation</span>();</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=sccCount;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!sccFlags[i]) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verbal advantage level 2 1-20</title>
      <link href="/2024/04/14/verbal-advantage-level-2-1-20/"/>
      <url>/2024/04/14/verbal-advantage-level-2-1-20/</url>
      
        <content type="html"><![CDATA[<h1 id="word-1-10"><a href="#word-1-10" class="headerlink" title="word 1-10"></a>word 1-10</h1><h2 id="word-1-advocate-提倡，拥护，主张"><a href="#word-1-advocate-提倡，拥护，主张" class="headerlink" title="word 1: advocate 提倡，拥护，主张"></a>word 1: <strong>advocate</strong> 提倡，拥护，主张</h2><p>Similarly, many are now aware of this polarized notion of the field and some have begun to advocate possible alternatives.</p><h2 id="word-2-delegate-委托，托付"><a href="#word-2-delegate-委托，托付" class="headerlink" title="word 2: delegate 委托，托付"></a>word 2: <strong>delegate</strong> 委托，托付</h2><p>However, these delegates saw their efforts as serving purposes beyond profit generation.</p><h2 id="word-3-unprecedented-前所未有的，史无前例的"><a href="#word-3-unprecedented-前所未有的，史无前例的" class="headerlink" title="word 3: unprecedented 前所未有的，史无前例的"></a>word 3: <strong>unprecedented</strong> 前所未有的，史无前例的</h2><p>With the surge of population and economic activity during the past two generations or so, the environment has come under unprecedented stress.</p><h2 id="word-4-poignant-尖锐的，强烈的，酸楚的"><a href="#word-4-poignant-尖锐的，强烈的，酸楚的" class="headerlink" title="word 4: poignant 尖锐的，强烈的，酸楚的"></a>word 4: <strong>poignant</strong> 尖锐的，强烈的，酸楚的</h2><p>The women’s stories are at once poignant and remarkable.</p><h2 id="word-5-nebulous-朦胧的，模糊的"><a href="#word-5-nebulous-朦胧的，模糊的" class="headerlink" title="word 5: nebulous 朦胧的，模糊的"></a>word 5: <strong>nebulous</strong> 朦胧的，模糊的</h2><p>The authors admit that their subject matter is nebulous and its meanings ambiguous.</p><h2 id="word-6-clandestine-秘密的，暗中的"><a href="#word-6-clandestine-秘密的，暗中的" class="headerlink" title="word 6: clandestine 秘密的，暗中的"></a>word 6: <strong>clandestine</strong> 秘密的，暗中的</h2><p>They have wanted war, they have been waging it upon us for three years, but in a clandestine, hypocritical, roundabout manner.</p><h2 id="word-7-tirade-（激烈的）长篇演说"><a href="#word-7-tirade-（激烈的）长篇演说" class="headerlink" title="word 7: tirade （激烈的）长篇演说"></a>word 7: <strong>tirade</strong> （激烈的）长篇演说</h2><p>The whole of his speech has been directed as a tirade against and an attack upon trade unionism.</p><h2 id="word-8-recur-重现"><a href="#word-8-recur-重现" class="headerlink" title="word 8: recur 重现"></a>word 8: <strong>recur</strong> 重现</h2><p>Yet in the midst of this diversity, at least four themes recur.</p><h2 id="word-9-tacit-缄默的，默许的"><a href="#word-9-tacit-缄默的，默许的" class="headerlink" title="word 9: tacit 缄默的，默许的"></a>word 9: <strong>tacit</strong> 缄默的，默许的</h2><p>There is a tacit but quite unjustified assumption in traditional grammar that nouns can appear in adjunct function only when accompanied by an explicit dependent.</p><h2 id="word-10-allegation-宣称，断言，指控"><a href="#word-10-allegation-宣称，断言，指控" class="headerlink" title="word 10: allegation 宣称，断言，指控"></a>word 10: <strong>allegation</strong> 宣称，断言，指控</h2><p>Surprisingly, the source for this serious allegation is not identified.</p><h1 id="word-11-20"><a href="#word-11-20" class="headerlink" title="word 11-20"></a>word 11-20</h1><h2 id="word-11-gullible-轻信的，易受骗的"><a href="#word-11-gullible-轻信的，易受骗的" class="headerlink" title="word 11: gullible 轻信的，易受骗的"></a>word 11: <strong>gullible</strong> 轻信的，易受骗的</h2><p>Not only are the public often assumed to be a trifle gullible, they are also portrayed as empty vessels.</p><h2 id="word-12-benign-和蔼的，良性的，吉利的"><a href="#word-12-benign-和蔼的，良性的，吉利的" class="headerlink" title="word 12: benign 和蔼的，良性的，吉利的"></a>word 12: <strong>benign</strong> 和蔼的，良性的，吉利的</h2><p>The chance of malignant degeneration in a benign papillioma is not well understood.</p><h2 id="word-13-peripheral-外围的，不重要的"><a href="#word-13-peripheral-外围的，不重要的" class="headerlink" title="word 13: peripheral 外围的，不重要的"></a>word 13: <strong>peripheral</strong> 外围的，不重要的</h2><p>The book contains a great deal of peripheral detail.</p><h2 id="word-14-rebuff-断然拒绝，回绝"><a href="#word-14-rebuff-断然拒绝，回绝" class="headerlink" title="word 14: rebuff 断然拒绝，回绝"></a>word 14: <strong>rebuff</strong> 断然拒绝，回绝</h2><p>She rebuffed all suggestions that she should resign.</p><h2 id="word-15-animosity-敌意，仇恨"><a href="#word-15-animosity-敌意，仇恨" class="headerlink" title="word 15: animosity 敌意，仇恨"></a>word 15: <strong>animosity</strong> 敌意，仇恨</h2><p>Of course we’re competitive, but there’s no personal animosity between us.</p><h2 id="word-16-tenuous-纤细的，脆弱的"><a href="#word-16-tenuous-纤细的，脆弱的" class="headerlink" title="word 16: tenuous 纤细的，脆弱的"></a>word 16: <strong>tenuous</strong> 纤细的，脆弱的</h2><p>The police have only found a tenuous connection between the two robberies.</p><h2 id="word-17-complacent-自满的，沾沾自喜的"><a href="#word-17-complacent-自满的，沾沾自喜的" class="headerlink" title="word 17: complacent 自满的，沾沾自喜的"></a>word 17: <strong>complacent</strong> 自满的，沾沾自喜的</h2><p>We can’t afford to become complacent about any of our products.</p><h2 id="word-18-acme-顶端，最高点"><a href="#word-18-acme-顶端，最高点" class="headerlink" title="word 18: acme 顶端，最高点"></a>word 18: <strong>acme</strong> 顶端，最高点</h2><p>To act on this world-famous stage is surely the acme of any actor’s career.</p><h2 id="word-19-defunct-失效的，不在世的"><a href="#word-19-defunct-失效的，不在世的" class="headerlink" title="word 19: defunct 失效的，不在世的"></a>word 19: <strong>defunct</strong> 失效的，不在世的</h2><p>(humorous) I think this TV is defunct!</p><h2 id="word-20-abet-支持，煽动，教唆"><a href="#word-20-abet-支持，煽动，教唆" class="headerlink" title="word 20: abet 支持，煽动，教唆"></a>word 20: <strong>abet</strong> 支持，煽动，教唆</h2><p>His accountant had aided and abetted him in the fraud.</p>]]></content>
      
      
      <categories>
          
          <category> VERBAL ADVANTAGE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac电脑vscode的c++运行配置</title>
      <link href="/2024/04/13/mac%E7%94%B5%E8%84%91vscode%E7%9A%84c-%E8%BF%90%E8%A1%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/04/13/mac%E7%94%B5%E8%84%91vscode%E7%9A%84c-%E8%BF%90%E8%A1%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>最近换了电脑，vscode的环境是重新配的，遇到了些许问题。</p><h1 id="1-Code-Runner-对于C-的一些函数不识别"><a href="#1-Code-Runner-对于C-的一些函数不识别" class="headerlink" title="1. Code Runner 对于C++的一些函数不识别"></a>1. Code Runner 对于C++的一些函数不识别</h1><p>这是因为code runner默认执行命令里没有添加c++17的选项。<br>解决方案：  </p><ol><li>打开vscode设置，搜索<code>code runner</code>，找到<code>Code-runner: Executor Map</code>，点击<code>edit in settings.json</code>。</li><li>Find the <code>cpp</code> and add <code>-std=c++17</code> after <code>cd $dir &amp;&amp; g++</code> Like this <code>&quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ -std=c++17 $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</code></li></ol><h1 id="2-Code-Runner-运行C-是在OUTPUT里运行的，不能通过键盘输入数据"><a href="#2-Code-Runner-运行C-是在OUTPUT里运行的，不能通过键盘输入数据" class="headerlink" title="2. Code Runner 运行C++是在OUTPUT里运行的，不能通过键盘输入数据"></a>2. Code Runner 运行C++是在OUTPUT里运行的，不能通过键盘输入数据</h1><p>解决方案：<br>打开vscode设置，搜索<code>code runner</code>，勾选<code>Code-runner: Run In Terminal</code></p><h1 id="3-vscode-不识别-include"><a href="#3-vscode-不识别-include" class="headerlink" title="3. vscode 不识别#include&lt;bits/stdc++.h&gt;"></a>3. vscode 不识别<code>#include&lt;bits/stdc++.h&gt;</code></h1><h2 id="我有问过chatgpt关于为什么mac没有这个库，回答是这样的："><a href="#我有问过chatgpt关于为什么mac没有这个库，回答是这样的：" class="headerlink" title="我有问过chatgpt关于为什么mac没有这个库，回答是这样的："></a>我有问过chatgpt关于为什么mac没有这个库，回答是这样的：</h2><p><code>#include&lt;bits/stdc++.h&gt;</code> 是一个常用的 C++ 头文件，它包含了常用的标准库和一些常见的标准头文件。在一些编译器和环境中，这个头文件是存在的，但并不是所有的环境都支持它。</p><p>在 macOS 上，通常使用的是 <strong>Clang</strong> 或者 GNU 编译器集合中的 Clang。Clang 是一个优秀的 C++ 编译器，它支持大多数 C++11、C++14、C++17 和部分 C++20 特性，但并不提供 <code>#include&lt;bits/stdc++.h&gt;</code> 这个头文件。</p><p>这个头文件通常出现在一些 Windows 平台上的编译器（比如 MinGW 和 Visual C++）中，用于方便包含所有标准库的头文件。但是在其他平台，比如 macOS 上，通常需要明确地包含所需的标准库头文件，例如 <code>&lt;iostream&gt;</code>, <code>&lt;vector&gt;</code>, <code>&lt;algorithm&gt;</code> 等。</p><p>所以，在 macOS 上编写 C++ 代码时，你需要根据具体需要，显式地包含你需要的标准库头文件，而不依赖于 <code>#include&lt;bits/stdc++.h&gt;</code>。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>实际上万能头不就是把所有库都import一遍而已。解决方案我看的这一篇<a href="https://www.cnblogs.com/lipoicyclic/p/14623307.html">博客</a>。我在此基础上优化了一部分步骤，更加简洁。</p><ol><li>终端中输入<code>echo | g++ -v -x c++ -E -</code>, 其中<code>/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include</code> 即为我们要找的路径。</li><li>修改include文件夹的访问权限为读写。<code>sudo chmod 777 /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include</code> </li><li>直接<code>cd /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include</code></li><li>创建<code>bits</code>文件夹并进入。<code>mkdir bits</code>,<code>cd bits/</code></li><li>创建’stdc++.h’，<code>touch stdc++.h</code> </li><li>打开刚刚创建的文件，<code>open stdc++.h</code>，这时应该是默认vscode进行打开的。进行编辑：  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ includes used for precompiling -*- C++ -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Copyright (C) 2003-2014 Free Software Foundation, Inc.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This file is part of the GNU ISO C++ Library.  This library is free</span></span><br><span class="line"><span class="comment">// software; you can redistribute it and/or modify it under the</span></span><br><span class="line"><span class="comment">// terms of the GNU General Public License as published by the</span></span><br><span class="line"><span class="comment">// Free Software Foundation; either version 3, or (at your option)</span></span><br><span class="line"><span class="comment">// any later version.</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// This library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">// GNU General Public License for more details.</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Under Section 7 of GPL version 3, you are granted additional</span></span><br><span class="line"><span class="comment">// permissions described in the GCC Runtime Library Exception, version</span></span><br><span class="line"><span class="comment">// 3.1, as published by the Free Software Foundation.</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// You should have received a copy of the GNU General Public License and</span></span><br><span class="line"><span class="comment">// a copy of the GCC Runtime Library Exception along with this program;</span></span><br><span class="line"><span class="comment">// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see</span></span><br><span class="line"><span class="comment">// &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/** @file stdc++.h</span></span><br><span class="line"><span class="comment"> *  This is an implementation file for a precompiled header.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 17.4.1.2 Headers</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ciso646&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// C++</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;istream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;streambuf&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>最后保存退出即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> mac </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试准备整理(二)</title>
      <link href="/2024/04/11/java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E6%95%B4%E7%90%86-%E4%BA%8C/"/>
      <url>/2024/04/11/java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E6%95%B4%E7%90%86-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-缓存雪崩、缓存穿透、缓存击穿在实际中如何处理"><a href="#1-缓存雪崩、缓存穿透、缓存击穿在实际中如何处理" class="headerlink" title="1. 缓存雪崩、缓存穿透、缓存击穿在实际中如何处理"></a>1. 缓存雪崩、缓存穿透、缓存击穿在实际中如何处理</h2><p>名词解释：  </p><ol><li><p><strong>缓存雪崩（Cache Avalanche）</strong>：指在缓存中大量的缓存条目在同一时间段内失效或者过期，导致大量请求直接访问底层存储系统（如数据库），从而造成系统性能急剧下降或者崩溃的现象。</p></li><li><p><strong>缓存穿透（Cache Penetration）</strong>：指恶意或者非法的请求直接穿过缓存层，访问底层存储系统，因为缓存层无法命中任何缓存数据。通常是由于查询不存在的数据或者恶意构造的查询条件导致。</p></li><li><p><strong>缓存击穿（Cache Breakdown）</strong>：指在缓存中存在的数据，在即将过期或者失效时，被大量的请求同时访问，导致缓存失效，直接击穿缓存层，访问底层存储系统。</p></li></ol><p>如何处理这些问题：</p><ul><li><p><strong>缓存雪崩处理方法</strong>：</p><ul><li>设置合理的缓存失效时间，避免所有缓存同时失效。</li><li>实现缓存预热，在缓存失效前提前加载数据到缓存中。</li><li>使用多级缓存架构，如本地缓存和分布式缓存，降低单点故障风险。</li><li>引入缓存锁定机制，在缓存失效时只允许一个请求重新加载缓存数据，其他请求等待。</li></ul></li><li><p><strong>缓存穿透处理方法</strong>：</p><ul><li>对于查询数据库中不存在的数据，也将其缓存，但是设置一个较短的过期时间，避免攻击者频繁查询不存在的数据导致大量请求直接击穿缓存到达数据库。</li><li>使用布隆过滤器等技术对请求参数进行校验，过滤掉明显无效的请求。</li></ul></li><li><p><strong>缓存击穿处理方法</strong>：</p><ul><li>对于热点数据或者频繁访问的数据，可以设置永不过期，或者通过手动更新缓存来确保数据不会过期。</li><li>引入互斥锁或者分布式锁，保证在缓存失效时只有一个请求能够重新加载数据，其他请求等待。</li></ul></li></ul><p>以上处理方法可以根据具体场景和需求进行组合使用，以尽可能地减少缓存相关问题对系统稳定性和性能的影响。</p><h2 id="2-Mysql-的隔离级别有哪些？"><a href="#2-Mysql-的隔离级别有哪些？" class="headerlink" title="2. Mysql 的隔离级别有哪些？"></a>2. Mysql 的隔离级别有哪些？</h2><p>MySQL支持四种隔离级别，分别是：</p><ol><li><p><strong>读未提交（Read Uncommitted）</strong>：最低的隔离级别。在这个级别下，一个事务可以看到其他事务未提交的数据修改。这意味着其他事务对数据的修改可能会导致脏读（Dirty Read）问题。</p></li><li><p><strong>读已提交（Read Committed）</strong>：这是MySQL默认的隔离级别。在这个级别下，一个事务只能看到已经提交的数据修改。其他事务对数据的修改不会被当前事务看到，这可以避免脏读问题，但是可能导致不可重复读（Non-repeatable Read）问题。</p></li><li><p><strong>可重复读（Repeatable Read）</strong>：在这个级别下，一个事务在执行期间多次读取同一行数据时，得到的结果是一致的。即使其他事务对数据进行了修改，当前事务在同一事务内读取数据时也不会看到其他事务对数据的修改。这可以避免不可重复读问题，但是可能导致幻读（Phantom Read）问题。</p></li><li><p><strong>串行化（Serializable）</strong>：这是最高的隔离级别。在这个级别下，每个事务都会在一个独立的时间段内执行，彼此之间不会相互干扰。这可以避免脏读、不可重复读和幻读等所有并发问题，但是会降低并发性能，因为事务需要串行执行。</p></li></ol><p>选择合适的隔离级别取决于应用的需求以及对并发性能和数据一致性的要求。</p><h2 id="3-mysql的复制原理是什么？"><a href="#3-mysql的复制原理是什么？" class="headerlink" title="3. mysql的复制原理是什么？"></a>3. mysql的复制原理是什么？</h2><p>MySQL的复制是指将一个MySQL数据库的数据复制到另一个MySQL实例上的过程，其基本原理如下：</p><ol><li><p><strong>主从复制架构</strong>：MySQL复制基于主从（Master-Slave）架构。在这种架构中，一个MySQL实例作为主服务器（Master），负责接收客户端的写操作（INSERT、UPDATE、DELETE等），而其他MySQL实例作为从服务器（Slave），负责接收主服务器的写操作并复制其数据。</p></li><li><p><strong>二进制日志（Binary Log）</strong>：主服务器上的数据更改操作会被记录到二进制日志中，这些日志记录了对数据的所有修改操作，包括对数据的增、删、改等。二进制日志是主从复制的关键，从服务器通过读取主服务器上的二进制日志来获取需要复制的数据变更。</p></li><li><p><strong>复制线程</strong>：从服务器上会启动一个复制线程（Replication Thread），该线程负责连接到主服务器，并获取主服务器上的二进制日志。从服务器上的复制线程会解析主服务器上的二进制日志，并将其中的数据变更操作应用到自己的数据库中，从而保持与主服务器上相同的数据状态。</p></li><li><p><strong>复制过程</strong>：复制过程分为两个阶段。首先是复制的初始化阶段，从服务器连接到主服务器并请求二进制日志的位置，然后从服务器根据主服务器上的二进制日志位置开始复制数据。其次是复制的持续阶段，从服务器持续地读取主服务器上的二进制日志，将数据变更操作应用到自己的数据库中，保持与主服务器数据的一致性。</p></li></ol><p>通过以上原理，MySQL的复制实现了数据在不同MySQL实例之间的同步，从而提供了数据的备份、负载均衡以及故障恢复等功能。</p><h2 id="4-mysql聚簇和非聚簇索引的区别是什么"><a href="#4-mysql聚簇和非聚簇索引的区别是什么" class="headerlink" title="4. mysql聚簇和非聚簇索引的区别是什么"></a>4. mysql聚簇和非聚簇索引的区别是什么</h2><p>在MySQL中，聚簇索引和非聚簇索引是两种不同类型的索引结构，它们在数据存储和访问方式上有着显著的区别。</p><ol><li><p><strong>聚簇索引（Clustered Index）</strong>：</p><ul><li>聚簇索引中，索引和数据行存储在同一个B树（或B+树）结构中，也就是说索引的叶子节点包含了实际的数据行。在MySQL中，InnoDB存储引擎的主键索引就是一个聚簇索引。</li><li>由于<strong>数据行和索引在物理上存储在一起</strong>，因此通过聚簇索引进行数据检索时，可以直接定位到数据所在的磁盘页，减少了额外的IO操作，因此查询效率更高。</li><li>聚簇索引的缺点是，当表中的数据行被频繁更新时，可能导致数据页的分裂和重新组织，增加了维护索引的成本。</li></ul></li><li><p><strong>非聚簇索引（Non-Clustered Index）</strong>：</p><ul><li>非聚簇索引中，<strong>索引和数据行是分开存储的</strong>。索引的叶子节点包含了指向对应数据行的指针（或者叫引用），而数据行存储在另外的位置。在MySQL中，InnoDB存储引擎的普通索引（非主键索引）就是非聚簇索引。</li><li>当使用非聚簇索引进行数据检索时，首先通过索引找到对应数据行的指针，然后再根据指针访问实际的数据行，因此需要多一次IO操作，相比于聚簇索引来说，查询效率较低。</li><li>非聚簇索引的优点是，由于索引和数据行分开存储，当数据行发生更新时，不会影响到索引的结构，因此维护索引的成本相对较低。</li></ul></li></ol><p>总的来说，聚簇索引和非聚簇索引在数据存储和访问方式上有着明显的区别，选择合适的索引类型取决于应用的需求和查询模式。</p><h2 id="5-mysql索引的基本原理"><a href="#5-mysql索引的基本原理" class="headerlink" title="5. mysql索引的基本原理"></a>5. mysql索引的基本原理</h2><p>MySQL索引的基本原理是通过创建索引数据结构来加快数据库的查询速度。索引是一种特殊的数据结构，它存储了列值和这些列值对应的行的位置，使得数据库系统可以更快地定位和检索数据。</p><p>以下是MySQL索引的基本原理：</p><ol><li><p><strong>B-Tree索引</strong>：MySQL通常使用B-Tree（平衡树）索引来实现索引。B-Tree是一种多路搜索树，它能够快速地定位到指定值。B-Tree索引将数据按照排序规则存储在树结构中，使得每个节点都包含有序的键值对。这样一来，MySQL可以通过这个树结构快速地定位到所需的数据。</p></li><li><p><strong>唯一性</strong>：索引可以是唯一的或非唯一的。唯一索引确保索引列中的值是唯一的，这意味着在查询时可以通过索引快速定位到唯一的行。非唯一索引允许索引列中存在重复值，但同样可以加速查询。</p></li><li><p><strong>覆盖索引</strong>：当查询的列都包含在索引中时，MySQL可以直接从索引中获取所需的数据，而无需再去查找数据行。这样的索引称为覆盖索引，可以大大减少数据库访问的次数，从而提高查询性能。</p></li><li><p><strong>索引选择性</strong>：索引的选择性是指索引列中不同值的个数与表中记录总数的比值。选择性越高，意味着索引越能准确地过滤数据，从而提高查询效率。通常情况下，选择性在30%到70%之间是比较理想的。</p></li><li><p><strong>索引优化</strong>：对于大型表和频繁查询的列，建立索引可以显著提高查询性能。但过多的索引可能会增加插入、更新和删除操作的成本，因为每次修改数据都需要更新索引。因此，在建立索引时需要权衡查询性能和数据修改成本。</p></li></ol><p>综上所述，MySQL索引的基本原理是利用B-Tree等数据结构来加速数据的定位和检索，从而提高数据库的查询性能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| Storage Engine | Permitted Indexes   |</span><br><span class="line">|----------------|----------------------|</span><br><span class="line">| Aria           | BTREE, RTREE         |</span><br><span class="line">| MyISAM         | BTREE, RTREE         |</span><br><span class="line">| InnoDB         | BTREE                |</span><br><span class="line">| MEMORY/HEAP    | HASH, BTREE          |</span><br></pre></td></tr></table></figure><p><strong>InnoDB存储引擎默认B+Tree索引</strong><br><strong>Memory存储引擎默认Hash索引</strong><br>MySQL支持多种存储引擎，每种引擎都有其自己的特点、优势和适用场景。以下是MySQL常见的几种存储引擎：</p><ol><li><p><strong>InnoDB</strong>：InnoDB是MySQL的默认存储引擎，也是最常用的存储引擎之一。它支持事务、行级锁定和外键约束，提供了较高的数据完整性和并发性能。InnoDB适用于需要较高并发性和数据完整性的应用场景，例如在线交易处理（OLTP）系统。</p></li><li><p><strong>MyISAM</strong>：MyISAM是MySQL的另一种常用存储引擎，它具有较高的插入和查询速度，适用于读密集型应用。但是，MyISAM不支持事务和行级锁定，并且在崩溃时数据恢复能力较差。因此，它适用于对数据完整性要求不高、读操作频繁、写操作较少的场景，例如数据仓库或日志分析系统。</p></li><li><p>**MEMORY (HEAP)**：MEMORY存储引擎将表数据存储在内存中，因此具有非常高的读写速度。但是，由于数据存储在内存中，因此在重启服务器或关闭MySQL时，数据会丢失。MEMORY存储引擎适用于临时表、缓存表和需要快速访问的临时数据存储场景。</p></li><li><p><strong>CSV</strong>：CSV存储引擎将数据存储在逗号分隔值（CSV）格式的文件中，适用于数据交换和导入导出操作。</p></li><li><p><strong>Archive</strong>：Archive存储引擎用于存储大量历史数据，它采用压缩算法对数据进行压缩，从而节省存储空间。Archive存储引擎适用于只需偶尔访问的归档数据存储场景。</p></li><li><p><strong>NDB Cluster</strong>：NDB Cluster存储引擎是MySQL Cluster的一部分，它提供了高可用性、高性能和分布式存储的特性。NDB Cluster适用于需要分布式数据库和实时数据访问的应用场景，如电话网络、网络游戏等。</p></li></ol><p>每种存储引擎都有其独特的优势和适用场景，选择合适的存储引擎需要根据应用的需求和特点进行综合考虑。</p><h2 id="6-B-树在实现索引上的优势以及过程"><a href="#6-B-树在实现索引上的优势以及过程" class="headerlink" title="6. B+树在实现索引上的优势以及过程"></a>6. B+树在实现索引上的优势以及过程</h2><p>B+树是一种常用的数据结构，用于实现索引，特别是在数据库系统中。它具有以下优势：</p><ol><li><p><strong>高效的查找操作：</strong> B+树的结构使得在其中进行查找、插入和删除等操作的时间复杂度为O(log n)，其中n是数据的数量。这意味着无论数据量多大，操作的时间复杂度都是可控的，并且随着数据量增长的增长速率很慢。</p></li><li><p><strong>有序性：</strong> B+树是一种有序树，因此在范围查询时非常高效。例如，如果需要在一个有序的数据集合中查找所有在某个范围内的元素，那么B+树可以迅速定位到该范围内的所有数据。</p></li><li><p><strong>可预测的IO访问：</strong> B+树的结构使得在磁盘上进行IO访问时，访问的次数可预测且较少。这是因为B+树的节点通常大小固定，并且树的高度相对较低，这减少了需要在磁盘上进行的IO次数。</p></li><li><p><strong>支持范围查询和排序：</strong> 由于B+树是有序的，因此支持在范围内查询和排序操作。这对于数据库系统中许多类型的查询非常重要。</p></li></ol><p>B+树的实现过程通常分为插入、删除和查找等基本操作。下面是B+树的基本实现过程：</p><ol><li><p><strong>插入操作：</strong></p><ul><li>从根节点开始，沿着树向下遍历，找到合适的叶子节点。</li><li>如果叶子节点没有满，则将新元素插入其中，然后对树进行必要的调整以保持B+树的性质。</li><li>如果叶子节点已满，则进行分裂操作，将节点一分为二，并将中间值提升到父节点中。然后对树进行必要的调整以保持B+树的性质。</li></ul></li><li><p><strong>删除操作：</strong></p><ul><li>从根节点开始，沿着树向下遍历，找到要删除的元素所在的叶子节点。</li><li>如果叶子节点中存在要删除的元素，则删除该元素，并对树进行必要的调整以保持B+树的性质。</li><li>如果删除元素后，节点的元素个数小于某个阈值，则进行合并或者借用兄弟节点的操作，以保持树的平衡。</li></ul></li><li><p><strong>查找操作：</strong></p><ul><li>从根节点开始，沿着树向下遍历，根据节点中的键值进行比较，确定要查找的元素位于哪个子树中。</li><li>如果查找的元素位于叶子节点中，则直接在叶子节点中查找。</li><li>如果查找的元素不在叶子节点中，则继续向下遍历。</li></ul></li></ol><p>通过这些基本操作，B+树可以保持其有序性和平衡性，从而提供高效的索引支持。</p><h2 id="7-mysql锁的类型有哪些"><a href="#7-mysql锁的类型有哪些" class="headerlink" title="7. mysql锁的类型有哪些"></a>7. mysql锁的类型有哪些</h2><p><a href="https://juejin.cn/post/6931752749545553933">https://juejin.cn/post/6931752749545553933</a></p><h2 id="8-mysql为什么需要主从同步"><a href="#8-mysql为什么需要主从同步" class="headerlink" title="8. mysql为什么需要主从同步"></a>8. mysql为什么需要主从同步</h2><p>MySQL主从同步是一种数据库复制技术，通过在主数据库上的更改同步到一个或多个从数据库上，以确保数据的冗余备份、提高系统可用性、增加读取性能、以及提供灾难恢复能力。以下是主从同步的一些重要用途和原因：</p><ol><li><p><strong>数据备份和冗余：</strong> 主从同步可以在从数据库上创建主数据库的副本，从而实现数据的冗余备份。如果主数据库发生故障，从数据库可以快速接管服务，保证系统的可用性和数据的安全。</p></li><li><p><strong>读写分离：</strong> 主从同步允许在从数据库上进行读操作，从而分担主数据库的读取负载。这样可以提高系统的读取性能和并发处理能力。</p></li><li><p><strong>灾难恢复：</strong> 如果主数据库发生故障或数据丢失，从数据库可以作为备份数据源，用于灾难恢复和数据修复。</p></li><li><p><strong>分布式数据处理：</strong> 主从同步可以用于分布式数据处理，允许在不同地理位置或网络环境下的数据库之间同步数据，从而实现分布式计算和数据分析。</p></li><li><p><strong>数据库升级和迁移：</strong> 主从同步可以在数据库升级或迁移过程中保持数据的一致性，降低系统停机时间和风险。</p></li><li><p><strong>数据分发：</strong> 主从同步可以用于将数据分发到多个地理位置或不同的应用系统中，实现数据共享和数据集成。</p></li></ol><p>总之，MySQL主从同步是一种重要的数据库复制技术，可以提高系统的可用性、可靠性和性能，同时也可以为数据管理和应用开发提供更多的灵活性和便利性。</p><h2 id="9-mysql执行计划怎么看"><a href="#9-mysql执行计划怎么看" class="headerlink" title="9. mysql执行计划怎么看"></a>9. mysql执行计划怎么看</h2><p>在MySQL中，你可以使用<code>EXPLAIN</code>语句来查看查询的执行计划。执行计划是MySQL查询优化器根据表结构、索引情况等信息，预估的查询执行过程。通过执行计划，你可以了解查询是如何执行的，以及MySQL是如何选择使用索引、连接方式等来执行查询的。</p><p>下面是使用<code>EXPLAIN</code>语句查看执行计划的基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table <span class="keyword">WHERE</span> your_condition;</span><br></pre></td></tr></table></figure><p>其中，<code>your_table</code>是要查询的表名，<code>your_condition</code>是查询条件。</p><p>执行该<code>EXPLAIN</code>语句后，MySQL会返回一张查询计划表，其中包含了查询的执行步骤、使用的索引、每一步的估算行数等信息。以下是一些常见的执行计划字段含义：</p><ul><li><code>id</code>: 查询执行步骤的顺序，从上到下递增。</li><li><code>select_type</code>: 查询的类型，如<code>SIMPLE</code>、<code>PRIMARY</code>、<code>SUBQUERY</code>等。</li><li><code>table</code>: 此行正在访问的表。</li><li><code>type</code>: 表示查询的访问类型，如<code>ALL</code>、<code>INDEX</code>、<code>RANGE</code>、<code>REF</code>等。访问类型的好坏决定了查询的性能。</li><li><code>possible_keys</code>: 可能用到的索引。</li><li><code>key</code>: 实际用到的索引。</li><li><code>key_len</code>: 索引的长度。</li><li><code>ref</code>: 表示哪个列或常量与索引一起使用。</li><li><code>rows</code>: 估计检索出的行数。</li><li><code>Extra</code>: 额外信息，如<code>Using where</code>、<code>Using index</code>等。</li></ul><p>通过分析执行计划，你可以评估查询的性能，优化查询语句以提高数据库的性能。通常的优化方式包括创建合适的索引、优化查询语句等。</p><h2 id="10-GC如何判断对象可以被回收"><a href="#10-GC如何判断对象可以被回收" class="headerlink" title="10. GC如何判断对象可以被回收"></a>10. GC如何判断对象可以被回收</h2><p>在Java中，垃圾收集器（Garbage Collector，GC）通过一些策略来判断对象是否可以被回收。下面是一些常见的判断对象是否可回收的条件：</p><ol><li><p><strong>引用计数法（Reference Counting）：</strong> 该方法并不常用，但是它是一种简单的垃圾回收算法。对象被分配一定数量的引用计数，当引用计数为零时，说明对象不再被引用，可以被回收。但这种方法不能解决循环引用问题。</p></li><li><p><strong>可达性分析（Reachability Analysis）：</strong> Java的主要垃圾收集器使用这种方式。可达性分析是基于“GC Roots”对象作为起始点，然后通过一系列的引用链（对象之间的引用关系）来判断对象是否可以被访问。如果对象不可通过任何引用链与“GC Roots”对象连接，那么它就是不可达的，可以被回收。</p></li><li><p><strong>标记-清除算法（Mark and Sweep）：</strong> 这是一种基于可达性分析的垃圾回收算法。在标记阶段，垃圾收集器标记所有与“GC Roots”对象直接或间接相连的对象。在清除阶段，垃圾收集器清除所有未标记的对象，即不可达的对象。</p></li><li><p><strong>复制算法（Copying）和标记-整理算法（Mark and Compact）：</strong> 这两种算法通常用于新生代和老年代的垃圾回收，其基本思想与标记-清除算法类似，但实现方式不同。复制算法将内存空间分为两部分，每次只使用其中一部分，当该部分内存满时，将存活对象复制到另一部分中，并清除非存活对象。标记-整理算法则是在标记-清除的基础上，将存活对象整理到内存的一端，以减少内存碎片。</p></li></ol><p>总的来说，GC判断对象是否可被回收的主要依据是对象是否可以被访问到，即对象是否可达。通过分析对象之间的引用关系，GC可以确定哪些对象不再被引用，从而将它们回收释放内存。</p><h2 id="11-JVM8为什么要增加元空间"><a href="#11-JVM8为什么要增加元空间" class="headerlink" title="11. JVM8为什么要增加元空间"></a>11. JVM8为什么要增加元空间</h2><p>Java 8 引入了元空间（Metaspace）以替代永久代（PermGen），主要出于以下几个原因：</p><ol><li><p><strong>解决永久代的限制：</strong> 永久代的大小在运行时是固定的，并且由于它是 JVM 内存中的一部分，因此其大小受到整个 JVM 堆大小的限制。这导致了在某些情况下永久代可能会发生内存溢出的问题，特别是在动态生成大量类或者字符串的场景下。</p></li><li><p><strong>更好的内存管理：</strong> 元空间不再是 JVM 内存的一部分，而是使用本地内存来存储类的元数据。这使得元空间的大小可以根据需要动态调整，而不受 JVM 堆大小的限制。这样可以更好地适应不同应用程序的内存需求。</p></li><li><p><strong>提高性能：</strong> 元空间的管理相比于永久代更为简单高效。在永久代中，类的元数据会被频繁地加载和卸载，而元空间采用了基于指针的内存分配方式，减少了垃圾回收的次数，提高了性能。</p></li><li><p><strong>避免永久代内存泄漏问题：</strong> 在永久代中，由于类的元数据存储在堆中，如果出现类加载器内存泄漏或者不正确使用 <code>ClassLoader</code>，容易导致永久代内存泄漏。而元空间将类的元数据存储在本地内存中，避免了这些问题。</p></li><li><p><strong>更好的垃圾回收机制：</strong> 元空间采用了与 Java 堆相同的垃圾回收机制，如并发标记-清除、并发标记-整理等，这使得垃圾回收更加灵活和高效。</p></li></ol><p>综上所述，引入元空间主要是为了解决永久代的限制，提高内存管理的灵活性和效率，从而提升 Java 应用程序的性能和稳定性。</p><h2 id="12-JVM内存模型如何分配的"><a href="#12-JVM内存模型如何分配的" class="headerlink" title="12. JVM内存模型如何分配的"></a>12. JVM内存模型如何分配的</h2><p>Java 虚拟机（JVM）内存模型包括了多个不同的区域，用于存储不同类型的数据和执行不同的操作。下面是 JVM 内存模型的主要分配区域：</p><ol><li><p><strong>堆（Heap）：</strong> 堆是 JVM 中最大的一块内存区域，用于存储对象实例和数组。堆是由所有线程共享的内存区域，在 JVM 启动时就被创建。堆的大小可以通过 JVM 参数进行调整，通常被划分为新生代和老年代。新生代包括了 Eden 空间和两个 Survivor 空间，而老年代则用于存放长期存活的对象。</p></li><li><p><strong>方法区（Method Area）：</strong> 方法区也被称为永久代（PermGen，Java 8 后被替代为元空间 Metaspace），用于存储类的结构信息、静态变量、常量池等数据。方法区是所有线程共享的内存区域，当类加载器加载类时，类的结构信息会被存储在方法区中。</p></li><li><p><strong>虚拟机栈（VM Stack）：</strong> 每个线程都有自己的虚拟机栈，用于存储方法调用的栈帧。栈帧包括了局部变量表、操作数栈、动态链接、方法返回地址等信息。虚拟机栈中的栈帧随着方法的调用和返回而动态地压栈和弹栈。</p></li><li><p><strong>本地方法栈（Native Method Stack）：</strong> 本地方法栈与虚拟机栈类似，用于执行本地方法（Native Method）的栈帧。与虚拟机栈不同的是，本地方法栈用于执行本地方法，而虚拟机栈用于执行 Java 方法。</p></li><li><p><strong>程序计数器（Program Counter Register）：</strong> 程序计数器是每个线程私有的，用于存储当前线程正在执行的 Java 字节码指令地址。在线程执行 Java 方法时，程序计数器会记录下一条需要执行的指令地址，当线程被切换时，程序计数器用于恢复线程执行状态。</p></li></ol><p>以上是 JVM 内存模型中的主要分配区域，不同的区域用于存储不同类型的数据和执行不同的操作。这些区域的内存分配和回收由 JVM 运行时系统自动管理，开发人员一般不需要显式地管理这些内存区域。</p><h2 id="13-JVM性能调优概述"><a href="#13-JVM性能调优概述" class="headerlink" title="13. JVM性能调优概述"></a>13. JVM性能调优概述</h2><p>JVM（Java虚拟机）性能调优是优化Java应用程序的性能，使其在吞吐量、响应时间、资源利用率等方面达到最佳状态的一系列操作。以下是对JVM性能调优的概述：</p><ol><li><p><strong>内存管理：</strong></p><ul><li>调整堆大小：根据应用程序的内存需求和性能目标，通过设置-Xms和-Xmx参数来调整堆大小，避免内存不足或过度使用内存的情况。</li><li>选择垃圾收集器：根据应用程序的特点和性能需求，选择合适的垃圾收集器，如串行收集器、并行收集器、CMS收集器、G1收集器等。</li><li>设置垃圾收集器参数：根据应用程序的特点和性能需求，通过设置垃圾收集器相关参数来调整垃圾收集器的行为，如堆大小、垃圾收集策略、线程数量等。</li></ul></li><li><p><strong>线程管理：</strong></p><ul><li>优化线程池配置：合理配置线程池的大小、队列大小、线程存活时间等参数，以提高线程的利用率和性能。</li><li>减少线程竞争：避免过度使用同步机制，减少线程之间的竞争，提高并发性能。</li></ul></li><li><p><strong>类加载优化：</strong></p><ul><li>预加载类：通过-Xbootclasspath参数预加载常用的类，加快类加载速度。</li><li>避免动态类加载：减少或避免使用反射和动态代理等动态类加载技术，以提高类加载性能。</li></ul></li><li><p><strong>代码优化：</strong></p><ul><li>减少对象创建：避免频繁创建和销毁对象，重用对象或者使用对象池来减少内存分配和垃圾回收开销。</li><li>使用高效的数据结构和算法：选择合适的数据结构和算法来提高程序的性能，如使用ArrayList代替LinkedList，使用HashMap代替Hashtable等。</li></ul></li><li><p><strong>I&#x2F;O优化：</strong></p><ul><li>使用NIO代替传统的IO操作：使用Java的NIO（New I&#x2F;O）提供的非阻塞IO功能来提高IO操作的性能。</li><li>使用缓冲流：使用缓冲流来减少IO操作的次数，提高IO操作的效率。</li></ul></li><li><p><strong>监控与调优：</strong></p><ul><li>使用JVM监控工具：使用JVisualVM、JConsole、VisualVM等监控工具来监控JVM的运行状态和性能指标，及时发现和解决性能瓶颈。</li><li>基准测试和性能分析：通过基准测试和性能分析工具来评估应用程序的性能，并找出影响性能的关键因素，进行针对性的调优。</li></ul></li></ol><p>综上所述，JVM性能调优涉及到多个方面，包括内存管理、线程管理、类加载优化、代码优化、I&#x2F;O优化等，通过合理的调优措施可以提高Java应用程序的性能和稳定性。</p><h2 id="14-JVM有哪些垃圾回收器？实际中如何选择？"><a href="#14-JVM有哪些垃圾回收器？实际中如何选择？" class="headerlink" title="14. JVM有哪些垃圾回收器？实际中如何选择？"></a>14. JVM有哪些垃圾回收器？实际中如何选择？</h2><p>Java虚拟机（JVM）中有多种垃圾回收器，每种垃圾回收器都有不同的优缺点，适用于不同类型的应用场景。以下是常见的JVM垃圾回收器：</p><ol><li><p><strong>串行垃圾收集器（Serial Garbage Collector）：</strong> 串行垃圾收集器是最基本的垃圾收集器，它使用单个线程进行垃圾收集，适用于小型应用或者开发调试阶段。</p></li><li><p><strong>并行垃圾收集器（Parallel Garbage Collector）：</strong> 并行垃圾收集器也被称为吞吐量优先收集器，它使用多个线程进行垃圾收集，适用于多核服务器和多线程应用，以最大化吞吐量。</p></li><li><p><strong>并发标记清除收集器（Concurrent Mark-Sweep Garbage Collector，CMS GC）：</strong> CMS GC是一种低延迟垃圾收集器，它在尽量减少停顿时间的同时，还要保持较高的吞吐量，适用于对响应时间要求较高的应用。</p></li><li><p><strong>G1垃圾收集器（Garbage-First Garbage Collector）：</strong> G1垃圾收集器是一种面向服务器的垃圾收集器，它在尽量减少停顿时间的同时，还能在不同内存区域之间进行垃圾回收，适用于大内存、多核服务器环境。</p></li></ol><p>在实际中，选择垃圾回收器应考虑以下几个方面：</p><ol><li><p><strong>应用需求：</strong> 不同的应用对垃圾回收器的要求不同。例如，对于对响应时间要求较高的应用，应选择低延迟的垃圾收集器，如CMS GC或G1 GC；而对于对吞吐量要求较高的应用，应选择吞吐量优先的垃圾收集器，如Parallel GC。</p></li><li><p><strong>硬件环境：</strong> 垃圾收集器的性能受到硬件环境的影响。例如，并行垃圾收集器在多核服务器上表现更好，而G1垃圾收集器适用于大内存服务器环境。</p></li><li><p><strong>内存配置：</strong> 垃圾收集器的性能与内存配置有关。例如，CMS GC和G1 GC更适用于大内存配置，而串行垃圾收集器和并行垃圾收集器适用于小内存配置。</p></li><li><p><strong>JDK版本：</strong> 不同版本的JDK可能会引入新的垃圾收集器或优化现有的垃圾收集器，因此选择垃圾收集器时应考虑JDK的版本。</p></li></ol><p>综上所述，选择垃圾收集器应综合考虑应用需求、硬件环境、内存配置和JDK版本等因素，根据具体情况进行选择。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试准备整理(一)</title>
      <link href="/2024/04/07/java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E6%95%B4%E7%90%86-%E4%B8%80/"/>
      <url>/2024/04/07/java%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E6%95%B4%E7%90%86-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-java面向对象有哪些特征"><a href="#1-java面向对象有哪些特征" class="headerlink" title="1. java面向对象有哪些特征"></a>1. java面向对象有哪些特征</h2><p>面向对象的三大特征：<strong>封装、继承、多态</strong></p><h2 id="2-ArrayList和LinkedList的区别"><a href="#2-ArrayList和LinkedList的区别" class="headerlink" title="2. ArrayList和LinkedList的区别"></a>2. ArrayList和LinkedList的区别</h2><p>都实现了<code>List</code>接口。<br><code>ArrayList</code>是基于索引的数据接口，底层是数组。<br><code>LinkedList</code>(链表)是以元素列表的形式存储数据。</p><h2 id="3-高并发中的集合有哪些问题"><a href="#3-高并发中的集合有哪些问题" class="headerlink" title="3. 高并发中的集合有哪些问题"></a>3. 高并发中的集合有哪些问题</h2><h3 id="1-第一代线程安全集合类"><a href="#1-第一代线程安全集合类" class="headerlink" title="1. 第一代线程安全集合类"></a>1. 第一代线程安全集合类</h3><p><code>Vector</code>、<code>Hashtable</code>。使用<code>synchronized</code>。效率低下。</p><h3 id="2-第二代"><a href="#2-第二代" class="headerlink" title="2. 第二代"></a>2. 第二代</h3><p><code>ArrayList</code>、<code>HashMap</code>。使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collections.synchronizedList(list);</span><br><span class="line">Collections.synchronizedMap(m);</span><br></pre></td></tr></table></figure><h3 id="3-第三代"><a href="#3-第三代" class="headerlink" title="3. 第三代"></a>3. 第三代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.util.concurrent.*</span><br><span class="line">ConcurrentHashMap</span><br><span class="line">CopyOnWriteArrayList</span><br><span class="line">CopyOnWriteArraySet</span><br></pre></td></tr></table></figure><p>Java 中的高并发环境下使用集合可能会遇到以下问题：</p><ol><li><p><strong>线程安全性问题</strong>：Java 中的大多数集合类（如 <code>ArrayList</code>、<code>HashMap</code> 等）在多线程环境下不是线程安全的，因此可能会导致数据不一致或者其他意外行为。</p></li><li><p><strong>性能问题</strong>：在高并发环境下，如果使用线程安全的集合类（如 <code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code> 等），可能会引入额外的性能开销，因为它们通常会使用同步或者复制等机制来保证线程安全。</p></li><li><p><strong>迭代器失效问题</strong>：在使用迭代器遍历集合时，如果其他线程对集合进行了修改，可能会导致迭代器失效，抛出 <code>ConcurrentModificationException</code> 异常。</p></li><li><p><strong>死锁问题</strong>：如果在高并发环境下不正确地使用集合，可能会出现死锁问题，例如两个线程分别持有集合中的不同锁，并试图获取对方持有的锁。</p></li><li><p><strong>内存泄漏问题</strong>：如果不正确地使用集合，可能会导致内存泄漏问题，例如在高并发环境下频繁地向集合中添加元素但未及时删除，可能会导致集合持有过多的引用而无法被及时回收。</p></li></ol><p>为了解决这些问题，可以采用以下方法：</p><ul><li>使用线程安全的集合类，如 <code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code> 等。</li><li>使用同步机制来保证多线程访问的安全性，例如使用 <code>synchronized</code> 关键字或者 <code>ReentrantLock</code> 类。</li><li>避免在迭代集合时对集合进行修改，可以使用迭代器的安全删除操作或者将集合复制一份后再进行操作。</li><li>注意合理设计并发访问的逻辑，避免死锁等并发问题的发生。</li><li>注意集合的内存使用情况，避免内存泄漏问题的发生。</li></ul><h2 id="4-JDK1-8的新特性有哪些"><a href="#4-JDK1-8的新特性有哪些" class="headerlink" title="4. JDK1.8的新特性有哪些"></a>4. JDK1.8的新特性有哪些</h2><p>由于要兼容Lambda表达式，接口里实现了默认方法，接口中带了实现。<br>函数式接口<br>支持了多重注解<br>Java 8 引入了许多重要的新特性，其中一些最显着的包括：</p><ol><li><p><strong>Lambda 表达式</strong>：Lambda 表达式是一种匿名函数，它可以作为参数传递给方法或者作为函数式接口的实例使用，极大地简化了代码的编写和阅读。</p></li><li><p><strong>Stream API</strong>：Stream API 提供了一种声明式的方式来操作集合，可以轻松地进行过滤、映射、排序、聚合等操作，大大提高了代码的简洁性和可读性。</p></li><li><p><strong>函数式接口</strong>：Java 8 引入了 <code>@FunctionalInterface</code> 注解，用于标识函数式接口，即只包含一个抽象方法的接口。这种接口可以被 Lambda 表达式直接实现，使得函数式编程更加方便。</p></li><li><p><strong>方法引用</strong>：方法引用允许通过方法的名字来引用方法，而不需要像 Lambda 表达式那样提供方法的完整定义，可以进一步简化代码。</p></li><li><p><strong>默认方法</strong>：接口中可以定义默认方法，这些方法可以在接口中提供默认的实现，从而在接口的实现类中直接使用，而无需重新实现。</p></li><li><p><strong>Optional 类</strong>：Optional 类是一个容器对象，用于包装可能为 null 的值，可以避免空指针异常，并提供了一些便利的方法来处理可能为 null 的值。</p></li><li><p><strong>新的日期和时间 API</strong>：Java 8 引入了 <code>java.time</code> 包，提供了全新的日期和时间 API，解决了旧的 <code>java.util.Date</code> 和 <code>java.util.Calendar</code> API 的许多问题，例如线程安全性和易用性。</p></li><li><p><strong>CompletableFuture 类</strong>：CompletableFuture 类提供了一种便利的方式来进行异步编程，可以轻松地处理异步任务的完成和组合。</p></li></ol><p>这些新特性使得 Java 8 成为一个重要的版本，为 Java 编程带来了许多新的可能性和优势。</p><h2 id="5-Java接口和抽象类有哪些区别"><a href="#5-Java接口和抽象类有哪些区别" class="headerlink" title="5. Java接口和抽象类有哪些区别"></a>5. Java接口和抽象类有哪些区别</h2><p>语法的区别<br>语义的区别：什么时候用接口，什么时候用抽象类。<br>抽象类面对的是一个概念，动物，哺乳动物，植物，有具体概念的建议用抽象类去实现。<br>接口描述的是某些共同特征，比如flyable</p><h2 id="6-hashcode和equals如何使用"><a href="#6-hashcode和equals如何使用" class="headerlink" title="6. hashcode和equals如何使用"></a>6. hashcode和equals如何使用</h2><p>在Java中，<code>hashCode()</code>和<code>equals()</code>方法是用于处理对象相等性和哈希值计算的两个重要方法。</p><ol><li><p><code>hashCode()</code>方法：</p><ul><li><code>hashCode()</code>方法用于返回对象的哈希码（hash code），它是一个32位的整数。</li><li>哈希码用于快速定位对象在哈希表中的位置，因此它对于实现高效的数据结构如HashMap、HashSet等非常重要。</li><li>在实现<code>hashCode()</code>方法时，通常需要遵循以下约定：<ul><li>如果两个对象根据<code>equals()</code>方法相等，则它们的哈希码必须相等。</li><li>但是，两个对象的哈希码相等并不意味着它们相等，即对于不同的对象，哈希码可能相同（哈希冲突）。</li></ul></li><li>如果重写了<code>equals()</code>方法，则通常也需要重写<code>hashCode()</code>方法，以保持对象相等性和哈希码一致。</li></ul></li><li><p><code>equals()</code>方法：</p><ul><li><code>equals()</code>方法用于比较两个对象是否相等。在Java中，默认的<code>equals()</code>方法实现是比较对象的引用是否相同（即比较内存地址）。</li><li>通常需要重写<code>equals()</code>方法来定义对象相等的规则。重写<code>equals()</code>方法时，需要遵循以下约定：<ul><li>自反性：对于任何非空引用值<code>x</code>，<code>x.equals(x)</code>必须返回<code>true</code>。</li><li>对称性：对于任何非空引用值<code>x</code>和<code>y</code>，如果<code>x.equals(y)</code>返回<code>true</code>，则<code>y.equals(x)</code>也必须返回<code>true</code>。</li><li>传递性：对于任何非空引用值<code>x</code>、<code>y</code>和<code>z</code>，如果<code>x.equals(y)</code>返回<code>true</code>，<code>y.equals(z)</code>返回<code>true</code>，则<code>x.equals(z)</code>也必须返回<code>true</code>。</li><li>一致性：对于任何非空引用值<code>x</code>和<code>y</code>，如果对象中的信息没有改变，多次调用<code>x.equals(y)</code>应该始终返回相同的结果。</li><li>对于任何非空引用值<code>x</code>，<code>x.equals(null)</code>必须返回<code>false</code>。</li></ul></li><li>重写<code>equals()</code>方法时，需要确保与<code>hashCode()</code>方法一致，即如果两个对象根据<code>equals()</code>方法相等，则它们的哈希码也必须相等。</li></ul></li></ol><p>综上所述，<code>hashCode()</code>和<code>equals()</code>方法在Java中常用于实现对象的相等性比较和哈希值计算，这对于在集合中存储对象、使用哈希表等数据结构非常重要。</p><h2 id="7-java代理的几种实现方式"><a href="#7-java代理的几种实现方式" class="headerlink" title="7. java代理的几种实现方式"></a>7. java代理的几种实现方式</h2><p>静态代理<br>两种动态代理<br>在Java中，代理是一种常见的设计模式，用于控制对其他对象的访问。代理可以在访问对象时添加额外的逻辑，例如日志记录、性能监控、安全控制等。Java中实现代理的几种方式包括：</p><ol><li><p>静态代理：</p><ul><li>静态代理是在编译时确定代理类和被代理类的关系。代理类和被代理类在编译期间就已经确定，代理类通常实现与被代理类相同的接口或者继承相同的父类。</li><li>静态代理的实现比较简单，可以直接在代理类中调用被代理类的方法，并在方法前后添加额外的逻辑。</li></ul></li><li><p>动态代理（JDK动态代理）：</p><ul><li>JDK动态代理是在运行时动态生成代理类的方式。它是通过Java反射机制实现的，在运行时创建代理对象并动态处理对被代理方法的调用。</li><li>JDK动态代理要求被代理的类必须实现接口，代理类通过实现<code>InvocationHandler</code>接口来处理被代理方法的调用。</li></ul></li><li><p>CGLIB代理：</p><ul><li>CGLIB代理是针对类的代理，它通过动态生成被代理类的子类来实现代理。因此，被代理类不需要实现接口，而是通过继承来实现代理。</li><li>CGLIB代理通过字节码技术在运行时创建代理类的子类，并重写其中的方法，在方法前后添加额外的逻辑。</li></ul></li><li><p>Java动态代理与CGLIB代理的比较：</p><ul><li>Java动态代理适用于接口代理，要求被代理的类必须实现接口，因此更加灵活，但是无法对类的非接口方法进行代理。</li><li>CGLIB代理适用于类的代理，不要求被代理的类实现接口，因此更加灵活，可以代理类的任何方法，但是无法代理<code>final</code>方法和<code>private</code>方法。</li></ul></li></ol><p>总的来说，静态代理、JDK动态代理和CGLIB代理是Java中常用的代理实现方式，它们各自具有不同的特点和适用场景，可以根据具体需求选择合适的代理方式。</p><h2 id="8-java中-和-equals-有哪些区别"><a href="#8-java中-和-equals-有哪些区别" class="headerlink" title="8. java中 &#x3D;&#x3D; 和 equals 有哪些区别"></a>8. java中 &#x3D;&#x3D; 和 equals 有哪些区别</h2><p><code>==</code> 基本数据类型比较值，引用数据类型比较的地址。<br><code>equals</code> 比较两个对象的内容是否相等</p><h2 id="9-java中异常处理机制是什么"><a href="#9-java中异常处理机制是什么" class="headerlink" title="9. java中异常处理机制是什么"></a>9. java中异常处理机制是什么</h2><p>抛出异常 throw<br>捕获异常 try catch finally<br>声明异常 throws</p><h2 id="10-java中重写和重载有哪些区别"><a href="#10-java中重写和重载有哪些区别" class="headerlink" title="10. java中重写和重载有哪些区别"></a>10. java中重写和重载有哪些区别</h2><p>重载overload：同一个类中，参数不同的<br>重写override：子类和父类中，重写的方法和被重写的方法</p><h2 id="11-String、StringBuffer、StringBuilder区别及使用场景"><a href="#11-String、StringBuffer、StringBuilder区别及使用场景" class="headerlink" title="11. String、StringBuffer、StringBuilder区别及使用场景"></a>11. String、StringBuffer、StringBuilder区别及使用场景</h2><p>String是只读字符串<br><code>String</code>、<code>StringBuffer</code>和<code>StringBuilder</code>是Java中用于处理字符串的三个类，它们在设计和使用上有一些区别，适用于不同的场景：</p><ol><li><p><code>String</code>：</p><ul><li><code>String</code>是不可变的（immutable）类，一旦创建就不能被修改。这意味着每次对<code>String</code>进行修改时，都会创建一个新的<code>String</code>对象，旧的对象会被丢弃，这样会导致性能开销和内存浪费。</li><li>由于<code>String</code>是不可变的，因此它是线程安全的，可以被多个线程安全地共享。</li></ul></li><li><p><code>StringBuffer</code>：</p><ul><li><code>StringBuffer</code>是可变的（mutable）类，它提供了对字符串进行修改的方法，例如<code>append()</code>、<code>insert()</code>、<code>delete()</code>等。因此，对于频繁的字符串拼接或者修改操作，使用<code>StringBuffer</code>会比直接使用<code>String</code>更高效。</li><li><code>StringBuffer</code>是线程安全的，它的方法都是同步的，适用于多线程环境。</li></ul></li><li><p><code>StringBuilder</code>：</p><ul><li><code>StringBuilder</code>与<code>StringBuffer</code>类似，也是可变的字符串序列。但是，与<code>StringBuffer</code>不同的是，<code>StringBuilder</code>的方法都是非同步的，因此在单线程环境下性能更好。</li><li>由于<code>StringBuilder</code>的方法不是同步的，因此它不适用于多线程环境。</li></ul></li></ol><p>使用场景：</p><ul><li>当需要处理不可变的字符串时，例如字符串常量，可以使用<code>String</code>类。</li><li>当需要在单线程环境下进行频繁的字符串操作时，例如字符串拼接、修改等，可以使用<code>StringBuilder</code>。</li><li>当需要在多线程环境下进行字符串操作时，可以使用<code>StringBuffer</code>，因为它是线程安全的，但是性能相对较低，如果不需要线程安全的话，也可以使用<code>StringBuilder</code>。</li></ul><p>综上所述，根据具体需求和线程安全性要求，可以选择使用<code>String</code>、<code>StringBuffer</code>或者<code>StringBuilder</code>来处理字符串。</p><h2 id="12-怎样声明一个类不会被继承，什么场景下会用"><a href="#12-怎样声明一个类不会被继承，什么场景下会用" class="headerlink" title="12. 怎样声明一个类不会被继承，什么场景下会用"></a>12. 怎样声明一个类不会被继承，什么场景下会用</h2><p>用final修饰。例如Math类</p><h2 id="13-自定义异常在生产中如何应用"><a href="#13-自定义异常在生产中如何应用" class="headerlink" title="13. 自定义异常在生产中如何应用"></a>13. 自定义异常在生产中如何应用</h2><p>自定义异常在生产环境中的应用可以提高代码的健壮性、可维护性和可读性，使得异常处理更加规范和易于管理。合理地使用自定义异常可以有效地提高系统的稳定性和可靠性，从而提升用户体验和系统性能。<br>继承合适的父类：自定义异常类应当继承自Exception类或者其子类，例如RuntimeException，以便在异常处理时能够统一处理或者捕获。</p><h2 id="14-Redis线程模型有哪些，单线程为什么快"><a href="#14-Redis线程模型有哪些，单线程为什么快" class="headerlink" title="14. Redis线程模型有哪些，单线程为什么快"></a>14. Redis线程模型有哪些，单线程为什么快</h2><p>Redis的线程模型主要有单线程模型和多线程模型两种。</p><ol><li><p>单线程模型：</p><ul><li>Redis最初采用的是单线程模型。单线程模型指的是Redis服务器在一个线程中顺序地处理所有请求，所有的命令都在一个事件循环中执行。</li><li>单线程模型的优势在于简单高效，因为不需要考虑线程同步和线程切换的开销，避免了多线程并发访问共享数据可能引发的竞态条件和死锁问题。</li><li>Redis单线程模型适用于大多数情况下的数据存储和处理，特别是在单个CPU核心的情况下，单线程模型的性能表现通常比较优秀。</li></ul></li><li><p>多线程模型：</p><ul><li>Redis 6.0 版本引入了多线程模型（Redis主从分离模式），可以充分利用多核CPU的性能，提升服务器的吞吐量和并发处理能力。</li><li>多线程模型将网络IO、命令处理和数据读写等操作分配给多个工作线程处理，可以提高系统的并发处理能力，适用于高并发的场景。</li></ul></li></ol><p>为什么单线程模型在某些情况下会比多线程模型快呢？</p><ol><li><p>线程切换开销：在多线程模型中，由于涉及到线程的创建、销毁和切换，会产生额外的开销，而单线程模型避免了这些开销。</p></li><li><p>CPU缓存优化：单线程模型可以更好地利用CPU缓存，因为数据和指令都在同一个线程中执行，避免了多线程中频繁的数据共享和同步操作可能引发的缓存失效问题。</p></li><li><p>线程同步和锁竞争：在多线程模型中，由于涉及到多个线程对共享资源的访问和修改，需要进行线程同步和锁竞争，而单线程模型避免了这些问题。</p></li></ol><p>虽然单线程模型在某些情况下性能优于多线程模型，但是对于高并发、大规模的应用场景，多线程模型能够更好地利用多核CPU的性能，提高系统的并发处理能力。因此，选择合适的线程模型需要根据具体的应用场景和需求进行权衡和选择。</p><h2 id="15-Redis持久化机制：RDB和AOF"><a href="#15-Redis持久化机制：RDB和AOF" class="headerlink" title="15. Redis持久化机制：RDB和AOF"></a>15. Redis持久化机制：RDB和AOF</h2><p>Redis（远程字典服务器）是一种流行的内存数据库，它支持多种持久化机制来保证数据的安全性和可靠性。两种主要的持久化机制是RDB（Redis Database）和AOF（Append-Only File）。</p><ol><li><p><strong>RDB（Redis Database）</strong>：</p><ul><li>RDB 是 Redis 的一种快照持久化方式，它周期性地将 Redis 在内存中的数据以快照的形式保存到硬盘上的一个文件中。</li><li>生成 RDB 文件的时机可以通过配置文件中的保存条件来设置，比如在一定的时间间隔内或者在达到一定数量的写操作后。</li><li>由于 RDB 是将整个数据集保存到文件中，因此它的恢复速度比较快，适用于对数据一致性要求不是很高、需要定期备份或者迁移数据的场景。</li></ul></li><li><p><strong>AOF（Append-Only File）</strong>：</p><ul><li>AOF 是通过将 Redis 的写操作以追加的方式记录到一个文件中来实现持久化的机制。</li><li>AOF 文件记录了 Redis 服务器接收到的所有写命令，通过重放这些命令可以恢复数据。</li><li>AOF 文件的内容是可读的，因此在故障发生时可以比较容易地手动修复，但相对于 RDB，AOF 文件通常会更大一些。</li><li>AOF 提供了不同的同步选项，可以在性能和数据安全之间进行权衡，比如可以选择每个命令都同步到磁盘，或者每秒同步一次等。</li></ul></li></ol><p>在实际应用中，可以根据业务需求和对数据一致性、恢复速度等方面的要求选择适合的持久化机制，甚至可以同时使用 RDB 和 AOF 来提高数据的安全性。</p><h2 id="16-redis的过期键有哪些删除策略"><a href="#16-redis的过期键有哪些删除策略" class="headerlink" title="16. redis的过期键有哪些删除策略"></a>16. redis的过期键有哪些删除策略</h2><p>Redis 中有几种删除过期键的策略，它们分别是：</p><ol><li><p><strong>定期删除（定时任务）</strong>：<br>Redis 默认会每秒检查一定数量的过期键，然后删除其中已过期的键。这个数量可以通过配置文件中的 <code>hz</code> 参数进行设置，默认为 10。</p></li><li><p><strong>惰性删除</strong>：<br>当客户端尝试访问某个键时，Redis 会先检查该键是否过期，如果过期则会立即删除。这种方式称为惰性删除。</p></li><li><p><strong>定期删除 + 惰性删除结合</strong>：<br>定期删除和惰性删除可以结合使用，定期删除确保过期键不会一直占据内存，而惰性删除则保证了内存的及时回收。</p></li><li><p><strong>过期键删除策略配置</strong>：<br>在 Redis 的配置文件中，可以通过设置 <code>maxmemory-policy</code> 参数来调整过期键的删除策略。常见的策略包括：</p><ul><li><code>volatile-lru</code>：从已设置过期时间的键中挑选最近最少使用的键进行删除。</li><li><code>volatile-ttl</code>：从已设置过期时间的键中挑选即将过期的键进行删除。</li><li><code>volatile-random</code>：从已设置过期时间的键中随机选择键进行删除。</li><li><code>allkeys-lru</code>：从所有键中挑选最近最少使用的键进行删除，包括设置过期时间和未设置过期时间的键。</li><li><code>allkeys-random</code>：从所有键中随机选择键进行删除。</li><li><code>noeviction</code>：禁止删除任何键，当内存用完时，所有写操作都会返回错误。</li></ul></li></ol><p>通过选择合适的删除策略，可以根据实际需求来平衡内存使用和数据可用性。</p><h2 id="17-redis缓存如何回收"><a href="#17-redis缓存如何回收" class="headerlink" title="17. redis缓存如何回收"></a>17. redis缓存如何回收</h2><p>Redis 中的缓存回收通常是指对内存的回收，以确保 Redis 不会因为内存占用过高而导致性能下降或者服务不可用。主要的缓存回收方法包括：</p><ol><li><p><strong>内存淘汰策略</strong>：<br>Redis 提供了多种内存淘汰策略，用于在内存达到最大限制时选择要移除的键。常见的淘汰策略包括：</p><ul><li>LRU（最近最少使用）：移除最近最少使用的键。</li><li>LFU（最少频繁使用）：移除最少频繁使用的键。</li><li>TTL（过期时间）：移除最早过期的键。</li></ul></li><li><p><strong>设置内存最大限制</strong>：<br>可以在 Redis 配置文件中设置 <code>maxmemory</code> 参数，限制 Redis 实例使用的最大内存量。当达到这个限制时，Redis 将会根据配置的内存淘汰策略来回收内存。</p></li><li><p><strong>手动删除</strong>：<br>可以通过手动删除键来释放内存。当某些键不再需要缓存时，可以通过 <code>DEL</code> 命令删除这些键。</p></li><li><p><strong>持久化策略</strong>：<br>使用持久化机制（如 RDB 或 AOF）时，可以通过合理的设置持久化策略来控制数据的持久化频率，从而间接地控制内存的占用。</p></li><li><p><strong>过期键自动删除</strong>：<br>Redis 中的键可以设置过期时间，一旦过期时间到达，Redis 将自动删除这些键以释放内存空间。</p></li><li><p><strong>内存优化</strong>：<br>可以通过一些优化策略来减少 Redis 实例的内存占用，比如使用数据结构优化、压缩数据、分片数据等方式。</p></li></ol><p>综合利用这些方法，可以有效地管理 Redis 的内存使用，确保其在高性能的同时不会因为内存溢出而导致服务不可用。</p><h2 id="18-redis集群方案有哪些"><a href="#18-redis集群方案有哪些" class="headerlink" title="18. redis集群方案有哪些"></a>18. redis集群方案有哪些</h2><p>在搭建 Redis 集群时，有几种常见的方案：</p><ol><li><p><strong>Redis Sentinel</strong>：<br>Redis Sentinel 是 Redis 官方提供的高可用性解决方案，它可以监控 Redis 实例的健康状态，并在主节点宕机时自动将从节点提升为主节点，以保证系统的可用性。但是 Redis Sentinel 本身并不支持数据分片，只能用于高可用性方案。</p></li><li><p><strong>Redis Cluster</strong>：<br>Redis Cluster 是 Redis 官方提供的分布式方案，它将数据分片存储在多个节点上，并提供了自动数据分片和数据复制等功能，可以实现水平扩展和高可用性。Redis Cluster 在设计上遵循了主从复制、数据分片和节点互相通信等原则，提供了一套完整的分布式解决方案。</p></li><li><p><strong>第三方方案</strong>：<br>除了官方提供的解决方案之外，还有一些第三方工具和方案可以实现 Redis 的集群化，比如 Twemproxy、Codis 等。这些方案可能会提供一些额外的功能或者更加灵活的配置选项，但也可能会增加系统的复杂度和维护成本。</p></li></ol><p>在选择适合自己的 Redis 集群方案时，需要考虑到系统的需求、性能要求、高可用性要求以及团队的技术栈和维护成本等因素。</p><h2 id="19-redis事务是怎么实现的"><a href="#19-redis事务是怎么实现的" class="headerlink" title="19. redis事务是怎么实现的"></a>19. redis事务是怎么实现的</h2><p>Redis 的事务是通过 MULTI&#x2F;EXEC 命令组合来实现的，具体过程如下：</p><ol><li><p><strong>MULTI 命令</strong>：<br>客户端发送 MULTI 命令给 Redis 服务器，表示开始一个事务。Redis 服务器收到 MULTI 命令后，会将当前客户端设置为事务状态，并将后续的命令都放入一个队列中，等待执行。</p></li><li><p><strong>命令入队</strong>：<br>在 MULTI 和 EXEC 之间的所有命令都会被放入事务队列中，而不是立即执行。这些命令不会立即改变数据库状态，而是暂时保存在队列中。</p></li><li><p><strong>命令执行</strong>：<br>客户端发送 EXEC 命令给 Redis 服务器，表示执行事务中的所有命令。Redis 服务器收到 EXEC 命令后，会按照命令入队的顺序，逐个执行事务队列中的命令。</p></li><li><p><strong>事务原子性</strong>：<br>在执行事务期间，Redis 会将这些命令作为一个整体进行执行，要么全部执行成功，要么全部执行失败。这保证了事务的原子性，即要么所有命令都成功执行，要么都不执行。</p></li><li><p><strong>执行结果返回</strong>：<br>执行事务队列中的命令后，Redis 会将每个命令的执行结果按照顺序返回给客户端。如果在执行事务过程中出现了错误，Redis 会返回一个错误给客户端，同时回滚之前已执行的命令。</p></li></ol><p>通过这种方式，Redis 的事务可以确保一系列命令的原子性执行，但需要注意的是，Redis 的事务并不支持回滚操作，因此在发生错误时，需要由客户端自行处理错误并进行补偿操作。</p><h2 id="20-redis-主从复制的原理"><a href="#20-redis-主从复制的原理" class="headerlink" title="20. redis 主从复制的原理"></a>20. redis 主从复制的原理</h2><p>Redis 主从复制是一种常用的高可用性和读写分离方案，它的原理如下：</p><ol><li><p><strong>建立连接</strong>：<br>首先，从节点（Slave）会向主节点（Master）发送一个 PSYNC 或 SYNC 命令，请求建立复制连接。</p></li><li><p><strong>同步数据</strong>：<br>一旦连接建立成功，主节点会将自己的数据发送给从节点，从节点会接收并保存这些数据。如果是首次进行复制，主节点会发送整个数据集；如果是增量复制，主节点会发送从上次复制点之后的数据变化。</p></li><li><p><strong>增量复制</strong>：<br>在初始同步完成后，主节点会继续将所有写命令发送给从节点，从节点会根据这些写命令来更新自己的数据集。这样，从节点就能保持和主节点一样的数据状态。</p></li><li><p><strong>持续连接和同步</strong>：<br>一旦复制建立，主从节点之间会维持一个持久的连接。主节点会持续地将写命令发送给从节点，确保从节点始终与主节点保持同步。</p></li><li><p><strong>主从切换</strong>：<br>当主节点宕机或者不可用时，可以手动或自动地将从节点提升为主节点，以保证系统的高可用性。在自动故障转移中，Redis Sentinel 或其他监控工具会监测主节点的状态，并在主节点不可用时自动将某个从节点升级为主节点。</p></li></ol><p>通过主从复制，Redis 实现了数据的备份和读写分离，提高了系统的可用性和性能。从节点可以处理读请求，分担主节点的压力，同时在主节点故障时可以快速接管，保证服务的连续性。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verbal advantage level 1 41-50</title>
      <link href="/2024/04/07/verbal-advantage-level-1-41-50/"/>
      <url>/2024/04/07/verbal-advantage-level-1-41-50/</url>
      
        <content type="html"><![CDATA[<h1 id="word-41-50"><a href="#word-41-50" class="headerlink" title="word 41-50"></a>word 41-50</h1><h2 id="word-41-cantankerous-脾气坏的，爱争吵的"><a href="#word-41-cantankerous-脾气坏的，爱争吵的" class="headerlink" title="word 41: cantankerous 脾气坏的，爱争吵的"></a>word 41: <strong>cantankerous</strong> 脾气坏的，爱争吵的</h2><p>They are often obstinate and cantankerous, and as a result they are unwanted by their relations.</p><h2 id="word-42-flippant-轻率的，无礼的"><a href="#word-42-flippant-轻率的，无礼的" class="headerlink" title="word 42: flippant 轻率的，无礼的"></a>word 42: <strong>flippant</strong> 轻率的，无礼的</h2><p>He was very flippant in parts of his speech and completely callous in other parts of it.</p><h2 id="word-43-subjugate-征服，镇压"><a href="#word-43-subjugate-征服，镇压" class="headerlink" title="word 43: subjugate 征服，镇压"></a>word 43: <strong>subjugate</strong> 征服，镇压</h2><p>Nearly 1, 000 years have passed since we were conquered or subjugated by external force.</p><h2 id="word-44-wry-扭曲的，歪斜的"><a href="#word-44-wry-扭曲的，歪斜的" class="headerlink" title="word 44: wry 扭曲的，歪斜的"></a>word 44: <strong>wry</strong> 扭曲的，歪斜的</h2><p>It is characterized by a lot of wry humour, some of which had me spontaneously laughing aloud.</p><h2 id="word-45-urbane-温文尔雅的，彬彬有礼的"><a href="#word-45-urbane-温文尔雅的，彬彬有礼的" class="headerlink" title="word 45: urbane 温文尔雅的，彬彬有礼的"></a>word 45: <strong>urbane</strong> 温文尔雅的，彬彬有礼的</h2><p>Yet he proves to be far from the urbane wealthy gentleman they were expecting.</p><h2 id="word-46-jargon-行话，术语"><a href="#word-46-jargon-行话，术语" class="headerlink" title="word 46: jargon 行话，术语"></a>word 46: <strong>jargon</strong> 行话，术语</h2><p>To sum up, this book is very clearly written and presented throughout, and refreshingly free of jargon and conceptual obfuscation.</p><h2 id="word-47-prudent-谨慎的，节俭的"><a href="#word-47-prudent-谨慎的，节俭的" class="headerlink" title="word 47: prudent 谨慎的，节俭的"></a>word 47: <strong>prudent</strong> 谨慎的，节俭的</h2><p>In other words, democratic responsibility requires that policy decisions are clearly defensible as being prudent and in the public interest.</p><h2 id="word-48-inviolable-不可侵犯的，不可违返的"><a href="#word-48-inviolable-不可侵犯的，不可违返的" class="headerlink" title="word 48: inviolable 不可侵犯的，不可违返的"></a>word 48: <strong>inviolable</strong> 不可侵犯的，不可违返的</h2><p>The condition would be inviolable, because every candidate would have the property.</p><h2 id="word-49-commodious-宽敞的"><a href="#word-49-commodious-宽敞的" class="headerlink" title="word 49: commodious 宽敞的"></a>word 49: <strong>commodious</strong> 宽敞的</h2><p>More commodious quarters increased in cost.</p><h2 id="word-50-proximity-接近，附近"><a href="#word-50-proximity-接近，附近" class="headerlink" title="word 50: proximity 接近，附近"></a>word 50: <strong>proximity</strong> 接近，附近</h2><p>He visited rural villages and witnessed how the different groups lived in close proximity to one another.</p>]]></content>
      
      
      <categories>
          
          <category> VERBAL ADVANTAGE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1655 斯特灵数java</title>
      <link href="/2024/04/05/%E6%B4%9B%E8%B0%B7P1655-%E6%96%AF%E7%89%B9%E7%81%B5%E6%95%B0java/"/>
      <url>/2024/04/05/%E6%B4%9B%E8%B0%B7P1655-%E6%96%AF%E7%89%B9%E7%81%B5%E6%95%B0java/</url>
      
        <content type="html"><![CDATA[<h1 id="小朋友的球"><a href="#小朋友的球" class="headerlink" title="小朋友的球"></a>小朋友的球</h1><p><a href="https://www.luogu.com.cn/problem/P1655">题目链接</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>@发源于 小朋友最近特别喜欢球。有一天他脑子抽了，从口袋里拿出了 $N$ 个不同的球，想把它们放到 $M$ 个相同的盒子里，并且要求每个盒子中至少要有一个球，他好奇有几种放法，于是尝试编程实现，但由于他天天不好好学习，只会上 B 站看游泳教练，于是他向你求助。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>多组数据，每行两个数 $N,M$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>每组数据一行，表示方案数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>对于 $20%$ 的数据，满足 $N,M \leq 10$；</li><li>对于 $100%$ 的数据，满足 $1 \leq N,M \leq 100$，一个测试文件最多有 $10$ 组测试数据。</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><a href="https://zh.wikipedia.org/wiki/%E6%96%AF%E7%89%B9%E7%81%B5%E6%95%B0">斯特灵数</a></p><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><p>因为实在不想写C++高精，或者说我已经不用写C++高精了，所以选择java或者python去解决问题更明智一些。<br>简单记录一下java中BigInteger的使用方法。<br><strong>在 Java 中，<code>BigInteger</code> 是不可变的类，这意味着一旦创建了一个 BigInteger 对象，它的值就不能被改变。</strong><br>BigInteger 类是 Java 中用来表示任意精度整数的类。由于它可以处理比 long 类型更大范围的整数，因此在需要处理大整数计算时非常有用。以下是一些 BigInteger 类的常见用法：</p><ol><li><p><strong>创建 BigInteger 对象</strong>：可以通过构造函数或静态工厂方法来创建 BigInteger 对象。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;12345678901234567890&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">num2</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">98765432109876543210L</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>常用方法</strong>：</p><ul><li>加法：<code>add(BigInteger val)</code></li><li>减法：<code>subtract(BigInteger val)</code></li><li>乘法：<code>multiply(BigInteger val)</code></li><li>除法：<code>divide(BigInteger val)</code></li><li>取余：<code>remainder(BigInteger val)</code></li><li>绝对值：<code>abs()</code></li><li>比较：<code>compareTo(BigInteger val)</code></li><li>转换为 long 类型：<code>longValue()</code></li><li>转换为字符串：<code>toString()</code></li></ul></li><li><p><strong>与原始数据类型的转换</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> num1.intValue();</span><br><span class="line"><span class="type">long</span> <span class="variable">longValue</span> <span class="operator">=</span> num1.longValue();</span><br><span class="line"><span class="type">double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> num1.doubleValue();</span><br></pre></td></tr></table></figure></li><li><p><strong>比较两个 BigInteger</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (num1.compareTo(num2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// num1 大于 num2</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1.compareTo(num2) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// num1 小于 num2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// num1 等于 num2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>BigInteger 的不可变性</strong>：BigInteger 对象的值是不可变的，因此任何数学运算都会产生一个新的 BigInteger 对象。所以，进行数学运算后，原始的 BigInteger 对象不会改变。</p></li><li><p><strong>BigInteger 的位运算</strong>：BigInteger 类也支持位运算方法，比如 <code>and()</code>、<code>or()</code>、<code>xor()</code> 和 <code>shiftLeft()</code>、<code>shiftRight()</code> 等方法。</p></li></ol><p>以上是一些常见的 BigInteger 类的用法，可以根据具体的需求选择合适的方法来操作 BigInteger 对象。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> BigInteger[][] S = <span class="keyword">new</span> <span class="title class_">BigInteger</span>[MAX][MAX];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initS</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;MAX;i++)&#123;</span><br><span class="line">            S[i][i]=BigInteger.ONE;</span><br><span class="line">            S[i][<span class="number">1</span>]=BigInteger.ONE;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;i;j++)&#123;</span><br><span class="line">                S[i][j]=S[i-<span class="number">1</span>][j-<span class="number">1</span>].add(S[i-<span class="number">1</span>][j].multiply(BigInteger.valueOf(j)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        initS();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(sc.hasNextInt())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(n&lt;m) System.out.println(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span> System.out.println(S[n][m]);</span><br><span class="line">        &#125;</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verbal advantage level 1 21-40</title>
      <link href="/2024/04/05/verbal-advantage-level-1-21-40/"/>
      <url>/2024/04/05/verbal-advantage-level-1-21-40/</url>
      
        <content type="html"><![CDATA[<h1 id="word-21-30"><a href="#word-21-30" class="headerlink" title="word 21-30"></a>word 21-30</h1><h2 id="word-21-creed-信条，信仰"><a href="#word-21-creed-信条，信仰" class="headerlink" title="word 21: creed 信条，信仰"></a>word 21: <strong>creed</strong> 信条，信仰</h2><p>It takes in anybody regardless of religion, colour, or creed.</p><h2 id="word-22-tawdry-廉价而花哨的，俗艳的"><a href="#word-22-tawdry-廉价而花哨的，俗艳的" class="headerlink" title="word 22: tawdry 廉价而花哨的，俗艳的"></a>word 22: <strong>tawdry</strong> 廉价而花哨的，俗艳的</h2><p>A person may wear tawdry clothing or have a tawdry reputation.</p><h2 id="word-23-peevish-易怒的，坏脾气的"><a href="#word-23-peevish-易怒的，坏脾气的" class="headerlink" title="word 23: peevish 易怒的，坏脾气的"></a>word 23: <strong>peevish</strong> 易怒的，坏脾气的</h2><p>She glared down at me with a peevish expression on her face.</p><h2 id="word-24-arduous-费力的，艰难的"><a href="#word-24-arduous-费力的，艰难的" class="headerlink" title="word 24: arduous 费力的，艰难的"></a>word 24: <strong>arduous</strong> 费力的，艰难的</h2><p>We must have patience in doing arduous work.</p><h2 id="word-25-personable-英俊的，漂亮的，好看的"><a href="#word-25-personable-英俊的，漂亮的，好看的" class="headerlink" title="word 25: personable 英俊的，漂亮的，好看的"></a>word 25: <strong>personable</strong> 英俊的，漂亮的，好看的</h2><p>Jeremy excepted, the men seemed personable.</p><h2 id="word-26-resolute-坚决的，果断的"><a href="#word-26-resolute-坚决的，果断的" class="headerlink" title="word 26: resolute 坚决的，果断的"></a>word 26: <strong>resolute</strong> 坚决的，果断的</h2><p>Voters perceive him as a decisive and resolute international leader.</p><h2 id="word-27-supposition-假定，推测"><a href="#word-27-supposition-假定，推测" class="headerlink" title="word 27: supposition 假定，推测"></a>word 27: <strong>supposition</strong> 假定，推测</h2><p>The report is based entirely on supposition.</p><h2 id="word-28-arbitrary-武断的，主观的"><a href="#word-28-arbitrary-武断的，主观的" class="headerlink" title="word 28: arbitrary 武断的，主观的"></a>word 28: <strong>arbitrary</strong> 武断的，主观的</h2><p>He makes unpredictable, arbitrary decisions.</p><h2 id="word-29-monotonous-单调的，无变化的"><a href="#word-29-monotonous-单调的，无变化的" class="headerlink" title="word 29: monotonous 单调的，无变化的"></a>word 29: <strong>monotonous</strong> 单调的，无变化的</h2><p>It’s monotonous work, like most factory jobs.</p><h2 id="word-30-legacy-遗产，遗赠"><a href="#word-30-legacy-遗产，遗赠" class="headerlink" title="word 30: legacy 遗产，遗赠"></a>word 30: <strong>legacy</strong> 遗产，遗赠</h2><p>They each received a legacy of $5 000.</p><h1 id="word-31-40"><a href="#word-31-40" class="headerlink" title="word 31-40"></a>word 31-40</h1><h2 id="word-31：manifold-各种各样的，多方面的"><a href="#word-31：manifold-各种各样的，多方面的" class="headerlink" title="word 31：manifold 各种各样的，多方面的"></a>word 31：<strong>manifold</strong> 各种各样的，多方面的</h2><p>The possibilities were manifold.</p><h2 id="word-32-pliant-柔韧的，可塑的-能适应的，易受影响的"><a href="#word-32-pliant-柔韧的，可塑的-能适应的，易受影响的" class="headerlink" title="word 32: pliant 柔韧的，可塑的 &#x2F; 能适应的，易受影响的"></a>word 32: <strong>pliant</strong> 柔韧的，可塑的 &#x2F; 能适应的，易受影响的</h2><p>She lay pliant in his arms.</p><h2 id="word-33-retort-反驳，回嘴"><a href="#word-33-retort-反驳，回嘴" class="headerlink" title="word 33: retort 反驳，回嘴"></a>word 33: <strong>retort</strong> 反驳，回嘴</h2><p>His sharp retort clearly made an impact.</p><h2 id="word-34-obstinate-固执的，倔强的"><a href="#word-34-obstinate-固执的，倔强的" class="headerlink" title="word 34: obstinate 固执的，倔强的"></a>word 34: <strong>obstinate</strong> 固执的，倔强的</h2><p>He is obstinate and determined and will not give up.</p><h2 id="word-35-lacerate-撕裂，割破"><a href="#word-35-lacerate-撕裂，割破" class="headerlink" title="word 35: lacerate 撕裂，割破"></a>word 35: <strong>lacerate</strong> 撕裂，割破</h2><p>Her husband’s vicious retort lacerated her pride and made her burst into tears.</p><h2 id="word-36-omnipotent-全能的，有无限权力的"><a href="#word-36-omnipotent-全能的，有无限权力的" class="headerlink" title="word 36: omnipotent 全能的，有无限权力的"></a>word 36: <strong>omnipotent</strong> 全能的，有无限权力的</h2><p>Doug lived in the shadow of his seemingly omnipotent father.</p><h2 id="word-37-unscrupulous-不道德的，无耻的"><a href="#word-37-unscrupulous-不道德的，无耻的" class="headerlink" title="word 37: unscrupulous 不道德的，无耻的"></a>word 37: <strong>unscrupulous</strong> 不道德的，无耻的</h2><p>These kids are being exploited by very unscrupulous people.</p><h2 id="word-38-renaissance-复兴，再生"><a href="#word-38-renaissance-复兴，再生" class="headerlink" title="word 38: renaissance 复兴，再生"></a>word 38: <strong>renaissance</strong> 复兴，再生</h2><p>Popular art is experiencing a renaissance.</p><h2 id="word-39-genesis-开创，起源"><a href="#word-39-genesis-开创，起源" class="headerlink" title="word 39: genesis 开创，起源"></a>word 39: <strong>genesis</strong> 开创，起源</h2><p>It’s the story of Ziusudra, and it’s very similar to the Genesis flood story of Noah.</p><h2 id="word-40-warrant-成为……的依据，保证，担保"><a href="#word-40-warrant-成为……的依据，保证，担保" class="headerlink" title="word 40: warrant 成为……的依据，保证，担保"></a>word 40: <strong>warrant</strong> 成为……的依据，保证，担保</h2><p>There is no warrant for such criticism.</p>]]></content>
      
      
      <categories>
          
          <category> VERBAL ADVANTAGE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verbal advantage level 1 1-20</title>
      <link href="/2024/04/03/verbal-advantage-level-1-1-20/"/>
      <url>/2024/04/03/verbal-advantage-level-1-1-20/</url>
      
        <content type="html"><![CDATA[<h1 id="word-1-10"><a href="#word-1-10" class="headerlink" title="word 1-10"></a>word 1-10</h1><h2 id="word-1-paraphrase-改写，重说"><a href="#word-1-paraphrase-改写，重说" class="headerlink" title="word 1: paraphrase 改写，重说"></a>word 1: <strong>paraphrase</strong> 改写，重说</h2><p>Try to paraphrase the question before you answer it.</p><h2 id="word-2-ostensible-表面的，假装的"><a href="#word-2-ostensible-表面的，假装的" class="headerlink" title="word 2: ostensible 表面的，假装的"></a>word 2: <strong>ostensible</strong> 表面的，假装的</h2><p>The ostensible reason for his absence was illness.</p><h2 id="word-3-digress-偏离，离题"><a href="#word-3-digress-偏离，离题" class="headerlink" title="word 3: digress 偏离，离题"></a>word 3: <strong>digress</strong> 偏离，离题</h2><p>His essay digress from the main subject.</p><h2 id="word-4-uncanny-神秘的，离奇的"><a href="#word-4-uncanny-神秘的，离奇的" class="headerlink" title="word 4: uncanny 神秘的，离奇的"></a>word 4: <strong>uncanny</strong> 神秘的，离奇的</h2><p>She bears an uncanny resemblance to Dido.</p><h2 id="word-5-candor-坦诚，直率"><a href="#word-5-candor-坦诚，直率" class="headerlink" title="word 5: candor 坦诚，直率"></a>word 5: <strong>candor</strong> 坦诚，直率</h2><p>I was surprised at his candor.</p><h2 id="word-6-morose-郁闷的，坏脾气的"><a href="#word-6-morose-郁闷的，坏脾气的" class="headerlink" title="word 6: morose 郁闷的，坏脾气的"></a>word 6: <strong>morose</strong> 郁闷的，坏脾气的</h2><p>After weeks of futile job-hunting, he became morose.</p><h2 id="word-7-adept-熟练的，擅长的"><a href="#word-7-adept-熟练的，擅长的" class="headerlink" title="word 7: adept 熟练的，擅长的"></a>word 7: <strong>adept</strong> 熟练的，擅长的</h2><p>As a composer he proved himself adept at large dramatic forms.</p><h2 id="word-8-saturated-饱和的，湿透的"><a href="#word-8-saturated-饱和的，湿透的" class="headerlink" title="word 8: saturated 饱和的，湿透的"></a>word 8: <strong>saturated</strong> 饱和的，湿透的</h2><p>The snack food market is largely saturated, and to grow.</p><h2 id="word-9-pragmatic-实际的，实用主义的"><a href="#word-9-pragmatic-实际的，实用主义的" class="headerlink" title="word 9: pragmatic 实际的，实用主义的"></a>word 9: <strong>pragmatic</strong> 实际的，实用主义的</h2><p>Robin took a pragmatic look at her situation.</p><h2 id="word-10-congenial-意气相投的，性格相似的"><a href="#word-10-congenial-意气相投的，性格相似的" class="headerlink" title="word 10: congenial 意气相投的，性格相似的"></a>word 10: <strong>congenial</strong> 意气相投的，性格相似的</h2><p>He is back in more congenial company.</p><h1 id="word-11-20"><a href="#word-11-20" class="headerlink" title="word 11-20"></a>word 11-20</h1><h2 id="word-11：capricious-善变的，任性的"><a href="#word-11：capricious-善变的，任性的" class="headerlink" title="word 11：capricious 善变的，任性的"></a>word 11：<strong>capricious</strong> 善变的，任性的</h2><p>He was accused of being capricious and undemocratic.</p><h2 id="word-12-blatant-喧嚣的，公然的"><a href="#word-12-blatant-喧嚣的，公然的" class="headerlink" title="word 12: blatant 喧嚣的，公然的"></a>word 12: <strong>blatant</strong> 喧嚣的，公然的</h2><p>It was a blatant lie.</p><h2 id="word-13-obligatory-必须的，要求的"><a href="#word-13-obligatory-必须的，要求的" class="headerlink" title="word 13: obligatory 必须的，要求的"></a>word 13: <strong>obligatory</strong> 必须的，要求的</h2><p>It is obligatory for all employees to wear protective clothing.</p><h2 id="word-14-negligible-微不足道的"><a href="#word-14-negligible-微不足道的" class="headerlink" title="word 14: negligible 微不足道的"></a>word 14: <strong>negligible</strong> 微不足道的</h2><p>The cost was negligible.</p><h2 id="word-15-adamant-坚定不移的，固执的"><a href="#word-15-adamant-坚定不移的，固执的" class="headerlink" title="word 15: adamant 坚定不移的，固执的"></a>word 15: <strong>adamant</strong> 坚定不移的，固执的</h2><p>Eva was adamant that she would not come.</p><h2 id="word-16-sporadic-零星的，分散的"><a href="#word-16-sporadic-零星的，分散的" class="headerlink" title="word 16: sporadic 零星的，分散的"></a>word 16: <strong>sporadic</strong> 零星的，分散的</h2><p>Her attendance in school was sporadic.</p><h2 id="word-17-vanguard-先锋，先驱"><a href="#word-17-vanguard-先锋，先驱" class="headerlink" title="word 17: vanguard 先锋，先驱"></a>word 17: <strong>vanguard</strong> 先锋，先驱</h2><p>Students and intellectuals have been in the vanguard of revolutionary change in China.</p><h2 id="word-18-concur-同意，一致"><a href="#word-18-concur-同意，一致" class="headerlink" title="word 18: concur 同意，一致"></a>word 18: <strong>concur</strong> 同意，一致</h2><p>Local feeling does not necessarily concur with the press.</p><h2 id="word-19-precociousness-早熟，提前成熟"><a href="#word-19-precociousness-早熟，提前成熟" class="headerlink" title="word 19: precociousness 早熟，提前成熟"></a>word 19: <strong>precociousness</strong> 早熟，提前成熟</h2><p>Precociousness in a child may be a sign of above-average intelligence.</p><h2 id="word-20-aloof-冷淡的，疏远的"><a href="#word-20-aloof-冷淡的，疏远的" class="headerlink" title="word 20: aloof 冷淡的，疏远的"></a>word 20: <strong>aloof</strong> 冷淡的，疏远的</h2><p>The Emperor kept himself aloof from the people.</p>]]></content>
      
      
      <categories>
          
          <category> VERBAL ADVANTAGE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Docs导出pdf中文很难看，粗体不显示的问题</title>
      <link href="/2024/03/26/Google-Docs%E5%AF%BC%E5%87%BApdf%E4%B8%AD%E6%96%87%E5%BE%88%E9%9A%BE%E7%9C%8B%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/26/Google-Docs%E5%AF%BC%E5%87%BApdf%E4%B8%AD%E6%96%87%E5%BE%88%E9%9A%BE%E7%9C%8B%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Google-Docs-导出-pdf-中文很难看，粗体不显示的问题"><a href="#Google-Docs-导出-pdf-中文很难看，粗体不显示的问题" class="headerlink" title="Google Docs 导出 pdf 中文很难看，粗体不显示的问题"></a>Google Docs 导出 pdf 中文很难看，粗体不显示的问题</h1><p>最近在用 Google Docs 写简历，但是在导出 pdf 的时候发现中文字体并没有像编辑一样美观，变得非常扭曲和丑陋。而且粗体也没有显示。</p><h2 id="1-如何选择华文宋体"><a href="#1-如何选择华文宋体" class="headerlink" title="1. 如何选择华文宋体"></a>1. 如何选择华文宋体</h2><p>点击左上角<code>File</code>， <code>language</code>选项中选择<code>中文（中国）</code>就可以在字体栏看到华文宋体。<br><img src="/images/GoogleDocs/choseChinese.jpg" alt="chooseChinese"><br><img src="/images/GoogleDocs/song.jpg" alt="Fontsong"></p><h2 id="2-选择您的设备"><a href="#2-选择您的设备" class="headerlink" title="2. 选择您的设备"></a>2. 选择您的设备</h2><p><strong>一定一定要用电脑打开 Google Docs 网页版</strong>，实测 ipad（air 5）打开的网页里面并不能看见宋体字体选项，而且在预览打印里也不能正确渲染字体。</p><h2 id="3-预览打印"><a href="#3-预览打印" class="headerlink" title="3. 预览打印"></a>3. 预览打印</h2><p>点击左上角<code>File</code>，然后选择<code>Print</code>,会出现预览界面。<br><img src="/images/GoogleDocs/print.jpg" alt="Print"><br>然后点击保存，所见即所得。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ul><li>使用电脑打开网页</li><li>语言选择中文</li><li>预览打印</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google Docs </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1789【Mc 生存】插火把</title>
      <link href="/2024/03/25/%E6%B4%9B%E8%B0%B7P1789/"/>
      <url>/2024/03/25/%E6%B4%9B%E8%B0%B7P1789/</url>
      
        <content type="html"><![CDATA[<h1 id="【Mc-生存】插火把"><a href="#【Mc-生存】插火把" class="headerlink" title="【Mc 生存】插火把"></a>【Mc 生存】插火把</h1><p><a href="https://www.luogu.com.cn/problem/P1789">题目链接</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>话说有一天 linyorson 在“我的世界”开了一个 $n \times n$ 的方阵，现在他有 $m$ 个火把和 $k$ 个萤石，分别放在 $(x_1, y_1) \sim (x_m, y_m)$ 和 $(o_1, p_1) \sim (o_k, p_k)$ 的位置，没有光并且没放东西的地方会生成怪物。请问在这个方阵中有几个点会生成怪物？</p><p>P.S. 火把的照亮范围是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|暗|暗| 光 |暗|暗|</span><br><span class="line">|暗|光| 光 |光|暗|</span><br><span class="line">|光|光|火把|光|光|</span><br><span class="line">|暗|光| 光 |光|暗|</span><br><span class="line">|暗|暗| 光 |暗|暗|</span><br></pre></td></tr></table></figure><p>萤石：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|光|光| 光 |光|光|</span><br><span class="line">|光|光| 光 |光|光|</span><br><span class="line">|光|光|萤石|光|光|</span><br><span class="line">|光|光| 光 |光|光|</span><br><span class="line">|光|光| 光 |光|光|</span><br></pre></td></tr></table></figure><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入共 $m + k + 1$ 行。<br>第一行为 $n, m, k$。<br>第 $2$ 到第 $m + 1$ 行分别是火把的位置 $x_i, y_i$。<br>第 $m + 2$ 到第 $m + k + 1$ 行分别是萤石的位置 $o_i, p_i$。</p><p>注：可能没有萤石，但一定有火把。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>有几个点会生出怪物。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 1 0</span><br><span class="line">3 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>数据保证，$1 \le n \le 100$，$1 \leq m+k \leq 25$，$1 \leq m \leq 25$，$0 \leq k \leq 5$。</p><hr><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="1-第一次尝试"><a href="#1-第一次尝试" class="headerlink" title="1. 第一次尝试"></a>1. 第一次尝试</h2><p>非常简单的模拟，只需要开一个 mcMap[][] 二维数组，记录哪里有火把哪里有石头就可以了。遍历一遍有火把或者石头就更新光亮。有光亮的就直接跳过。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fire 2, stone 3, light 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(McMap[i][j] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (McMap[i][j] == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">fireLight</span>(i, j);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (McMap[i][j] == <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">stoneLight</span>(i, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有四十分。。。<br><strong>很显然因为只有一个数组，在更新的时候会覆盖火把或者石头</strong></p><h2 id="2-第二次尝试"><a href="#2-第二次尝试" class="headerlink" title="2. 第二次尝试"></a>2. 第二次尝试</h2><p>既然只需要不被光亮覆盖，再开一个 flag[][]单独存储火把和石头的位置就可以了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(McMap[i][j] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag[i][j] == <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">fireLight</span>(i, j);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (flag[i][j] == <span class="number">3</span>)</span><br><span class="line">                <span class="built_in">stoneLight</span>(i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>还是只有四十分。。。<br>怎么回事！下载了错误的测试样例后发现了问题还是出在上面的二重循环中，本想着在有光亮的的地方就直接跳过剪枝了，没想到直接剪到大动脉上了，<code>if(McMap[i][j] == 1) continue;</code> ，因为火把或石头的位置可能被其他地方的光源照亮，如果直接跳过这个位置就会跳过更新光亮的 flag 判断语句，造成光亮更新失误。</p><h2 id="3-最后一次提交"><a href="#3-最后一次提交" class="headerlink" title="3. 最后一次提交"></a>3. 最后一次提交</h2><p>只需要删除那句话即可。<br>最后代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> mcMap[<span class="number">115</span>][<span class="number">115</span>];</span><br><span class="line"><span class="type">int</span> flag[<span class="number">115</span>][<span class="number">115</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fireLight</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mcMap[x][y] = <span class="number">1</span>;</span><br><span class="line">    mcMap[<span class="built_in">max</span>(<span class="number">1</span>, x - <span class="number">1</span>)][y] = <span class="number">1</span>;</span><br><span class="line">    mcMap[<span class="built_in">max</span>(<span class="number">1</span>, x - <span class="number">2</span>)][y] = <span class="number">1</span>;</span><br><span class="line">    mcMap[<span class="built_in">max</span>(<span class="number">1</span>, x - <span class="number">1</span>)][<span class="built_in">max</span>(<span class="number">1</span>, y - <span class="number">1</span>)] = <span class="number">1</span>;</span><br><span class="line">    mcMap[x][<span class="built_in">max</span>(<span class="number">1</span>, y - <span class="number">1</span>)] = <span class="number">1</span>;</span><br><span class="line">    mcMap[x][<span class="built_in">max</span>(<span class="number">1</span>, y - <span class="number">2</span>)] = <span class="number">1</span>;</span><br><span class="line">    mcMap[<span class="built_in">min</span>(n, x + <span class="number">1</span>)][y] = <span class="number">1</span>;</span><br><span class="line">    mcMap[<span class="built_in">min</span>(n, x + <span class="number">2</span>)][y] = <span class="number">1</span>;</span><br><span class="line">    mcMap[<span class="built_in">min</span>(n, x + <span class="number">1</span>)][<span class="built_in">max</span>(<span class="number">1</span>, y - <span class="number">1</span>)] = <span class="number">1</span>;</span><br><span class="line">    mcMap[x][<span class="built_in">min</span>(n, y + <span class="number">1</span>)] = <span class="number">1</span>;</span><br><span class="line">    mcMap[x][<span class="built_in">min</span>(n, y + <span class="number">2</span>)] = <span class="number">1</span>;</span><br><span class="line">    mcMap[<span class="built_in">max</span>(<span class="number">1</span>, x - <span class="number">1</span>)][<span class="built_in">min</span>(n, y + <span class="number">1</span>)] = <span class="number">1</span>;</span><br><span class="line">    mcMap[<span class="built_in">min</span>(n, x + <span class="number">1</span>)][<span class="built_in">min</span>(n, y + <span class="number">1</span>)] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stoneLight</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mcMap[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">max</span>(<span class="number">1</span>, x - <span class="number">2</span>); i &lt;= <span class="built_in">min</span>(n, x + <span class="number">2</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="built_in">max</span>(<span class="number">1</span>, y - <span class="number">2</span>); j &lt;= <span class="built_in">min</span>(n, y + <span class="number">2</span>); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            mcMap[i][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="comment">// fire 2, stone 3, light 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        flag[x][y] = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        flag[x][y] = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag[i][j] == <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">fireLight</span>(i, j);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (flag[i][j] == <span class="number">3</span>)</span><br><span class="line">                <span class="built_in">stoneLight</span>(i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mcMap[i][j])</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><del>能 AC 的代码就是好代码</del>。可以明显地看到我那个丑陋地 fireLight 函数，十二个位置直接暴力更新，实际上这是很容易犯错误地写法，如果写错了然后去找错误将是极大地麻烦。在 Github Copilot 地带领下很幸运我一次性写对了。正确地比较稳妥地方式是开<code>dx[]</code>和<code>dy[]</code>数组，将所有坐标一次性写出来，然后 for 循环去更新。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dx1[<span class="number">13</span>]=&#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">-2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">    dy1[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">-2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>对于数组越界问题解决方案</strong>：</p><ol><li>像我一样用 min，max 判断</li><li>直接把(3,3)当原点避免数组下标为负数</li><li>自定义函数判断是负数就返回零</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker learn</title>
      <link href="/2024/03/22/Docker-learn-1/"/>
      <url>/2024/03/22/Docker-learn-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Learn-1"><a href="#Docker-Learn-1" class="headerlink" title="Docker Learn 1"></a>Docker Learn 1</h1><p>summary of <a href="https://www.docker.com/101-tutorial/">https://www.docker.com/101-tutorial/</a></p><h2 id="The-command-you-should-run"><a href="#The-command-you-should-run" class="headerlink" title="The command you should run"></a>The command you should run</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 docker/getting-started</span><br></pre></td></tr></table></figure><p>then Open your browser to <a href="http://localhost/">http://localhost</a></p><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><h2 id="Building-the-App’s-Container-Image"><a href="#Building-the-App’s-Container-Image" class="headerlink" title="Building the App’s Container Image"></a>Building the App’s Container Image</h2><ol><li>Create a Dockerfile</li><li>run command <code>docker build -t getting-started .</code> “-t” is to tag the image and “getting-started” is the name of the image. The “.” means to find Dockerfile in current directory.</li></ol><h2 id="Starting-an-App-Container"><a href="#Starting-an-App-Container" class="headerlink" title="Starting an App Container"></a>Starting an App Container</h2><ol><li>run <code>docker run -dp 3000:3000 getting-started</code> “-d” means “detached” mode. “-p” means creating a mapping between the host’s port 3000 to the container’s port 3000.</li></ol><h2 id="Updating-our-App"><a href="#Updating-our-App" class="headerlink" title="Updating our App"></a>Updating our App</h2><ol><li>if you have updated the source code, you need to build the updated version of the image.<br>run <code>docker build -t getting-started .</code></li><li>And have to start a new container using the updated code.<br>run <code>docker run -dp 3000:3000 getting-started</code>, then you will get an Error response.<del>(WT…F)</del></li></ol><h2 id="Replacing-our-Old-Container"><a href="#Replacing-our-Old-Container" class="headerlink" title="Replacing our Old Container"></a>Replacing our Old Container</h2><ol><li><code>docker ps</code> （find the old container ID）</li><li><code>docker stop &lt;the-container-id&gt;</code> （stop it！）</li><li><code>docker rm &lt;the-container-id&gt;</code> （delete it）</li><li>you can also use <code>docker rm -f &lt;the-container-id&gt;</code> to stop and delete the container in one command.</li></ol><h3 id="the-run-docker-run-dp-3000-3000-getting-started-again"><a href="#the-run-docker-run-dp-3000-3000-getting-started-again" class="headerlink" title="the run docker run -dp 3000:3000 getting-started again."></a>the run <code>docker run -dp 3000:3000 getting-started</code> again.</h3><h2 id="Sharing-our-App"><a href="#Sharing-our-App" class="headerlink" title="Sharing our App"></a>Sharing our App</h2><h3 id="Create-a-Repo"><a href="#Create-a-Repo" class="headerlink" title="Create a Repo"></a>Create a Repo</h3><ol><li><p>go to <a href="https://hub.docker.com/">https://hub.docker.com/</a> to create one.</p></li><li><p>Use the docker tag command to give the getting-started image a new name. Be sure to swap out YOUR-USER-NAME with your Docker ID.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag getting-started YOUR-USER-NAME/getting-started</span><br></pre></td></tr></table></figure></li><li><p>then push it. <code>docker push YOUR-USER-NAME/getting-started</code><br><strong>remember to login to Docker Desktop</strong></p></li><li><p>open <a href="https://labs.play-with-docker.com/">https://labs.play-with-docker.com/</a> ,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 YOUR-USER-NAME/getting-started</span><br></pre></td></tr></table></figure></li></ol><h2 id="Container-Volumes"><a href="#Container-Volumes" class="headerlink" title="Container Volumes"></a>Container Volumes</h2><ol><li>create a volume<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create todo-db</span><br></pre></td></tr></table></figure></li><li>stop the to-do app<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker stop &lt;the-container-id&gt;</span><br></pre></td></tr></table></figure></li><li>start the to-do app with <code>-v</code> flag<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started</span><br></pre></td></tr></table></figure>then open <a href="http://localhost:3000/">http://localhost:3000/</a> again and add some values.</li><li>remove the container<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker rm -f &lt;container-id&gt;</span><br></pre></td></tr></table></figure></li><li>Start a new container and open the app.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started</span><br></pre></td></tr></table></figure>the items in list should still there.</li></ol><h2 id="Starting-a-Dev-Mode-Container"><a href="#Starting-a-Dev-Mode-Container" class="headerlink" title="Starting a Dev-Mode Container"></a>Starting a Dev-Mode Container</h2><ol><li><p>Make sure you don’t have any of your own <code>getting-started</code> containers running (only the tutorial itself should be running).</p></li><li><p>get in the path of ‘app’</p></li><li><p>use powershell.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 `</span><br><span class="line">   -w /app -v &quot;$(pwd):/app&quot; `</span><br><span class="line">   node:18-alpine `</span><br><span class="line">   sh -c &quot;yarn install &amp;&amp; yarn run dev&quot;</span><br></pre></td></tr></table></figure><ul><li>-dp 3000:3000 - same as before. Run in detached (background) mode and create a port mapping</li><li>-w &#x2F;app - sets the container’s present working directory where the command will run from</li><li>-v “$(pwd):&#x2F;app” - bind mount (link) the host’s present getting-started&#x2F;app directory to the container’s &#x2F;app directory. Note: Docker requires absolute paths for binding mounts, so in this example we use pwd for printing the absolute path of the working directory, i.e. the app directory, instead of typing it manually</li><li>node:18-alpine - the image to use. Note that this is the base image for our app from the Dockerfile</li><li>sh -c “yarn install &amp;&amp; yarn run dev” - the command. We’re starting a shell using sh (alpine doesn’t have bash) and running yarn install to install all dependencies and then running yarn run dev. If we look in the package.json, we’ll see that the dev script is starting nodemon.<br>if you see some error message like this:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker: Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:3000 -&gt; 0.0.0.0:0: listen tcp 0.0.0.0:3000: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</span><br></pre></td></tr></table></figure><p>please Open powershell with administrator rights，and restart winnat.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net stop winnat</span><br><span class="line">net start winnat</span><br></pre></td></tr></table></figure></li><li><p>build your new image using <code>docker build -t getting-started .</code><br>you properly may see an error.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=&gt; CANCELED [internal] load build context</span><br><span class="line">=&gt; =&gt; transferring context: 558B</span><br><span class="line">ERROR: failed to solve: Canceled: context canceled</span><br></pre></td></tr></table></figure><p>you need to create a <code>.dockerignore</code> file in the path of <code>app</code>,and add <code>node_modules/</code> in it.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Vscode 连不上服务器的问题</title>
      <link href="/2024/03/18/%E5%85%B3%E4%BA%8E-Vscode-%E8%BF%9E%E4%B8%8D%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/18/%E5%85%B3%E4%BA%8E-Vscode-%E8%BF%9E%E4%B8%8D%E4%B8%8A%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="关于-Vscode-连不上服务器的问题"><a href="#关于-Vscode-连不上服务器的问题" class="headerlink" title="关于 Vscode 连不上服务器的问题"></a>关于 Vscode 连不上服务器的问题</h1><p>在网络中找了好多方法都不管用，具体问题是 XShell 能够通过 ssh 连接云服务器的，但是 vscode 一直连不上，会显示“连接的管道不存在”，我解决问题的方法是打开 ssh 的 config 所在的目录，具体是<code>C:\Users\user\.ssh</code>，里面有一个文件叫<code>known_hosts</code>，把里边的关于云服务器公网 ip 那一行删掉就行了。<br>具体原因应该是我更换过很多次服务器的系统，然后那边的这个信息重置了，但是 vscode 在使用第一次下载的东西连接，所以导致连接不上。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql更改角色权限并实现备份</title>
      <link href="/2024/03/18/mysql%E6%9B%B4%E6%94%B9%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%A4%87%E4%BB%BD/"/>
      <url>/2024/03/18/mysql%E6%9B%B4%E6%94%B9%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<p>接上一篇接着写如何更改角色权限并实现备份。<br>如果你在备份 mysql 时遇到这个报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump: Error: &#x27;Access denied; you need (at least one of) the PROCESS privilege(s) for this operation&#x27; when trying to dump tablespaces</span><br></pre></td></tr></table></figure><p>并且知道 mysql root 的密码，</p><ol><li><strong>登录 mysql root 账号</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>更改角色权限</strong>。这里的单引号不能删除，只需要把 user1 改成需要的用户名就行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT PROCESS ON *.* TO &#x27;user1&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>备份数据库</strong>。这里需要退出 mysql 在根目录里执行。username 换成自己角色名，dbname 换成需要备份的数据库名称。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u username -p dbname &gt; backup.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 备份 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重置 mysql root 密码</title>
      <link href="/2024/03/18/%E9%87%8D%E7%BD%AE-mysql-root-%E5%AF%86%E7%A0%81/"/>
      <url>/2024/03/18/%E9%87%8D%E7%BD%AE-mysql-root-%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="重置-mysql-root-密码"><a href="#重置-mysql-root-密码" class="headerlink" title="重置 mysql root 密码"></a>重置 mysql root 密码</h1><p>这可能是建站以来遇见的最大的一次困难了，因为建站的时候直接使用了宝塔然后一键部署，我今天突发奇想既然网站已经搭建好，我已经不需要宝塔了，然后就进行了宝塔的卸载。这就是噩梦的开始。<br>显然仅卸载宝塔对网站没有任何影响。但是之前我用到过宝塔的数据库备份功能，所以我打算重新去写数据库备份的脚本。就当我兴致冲冲去运行脚本的时候，mysql 就报错了，说我的角色权限不足，不能备份数据库里的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump: Error: &#x27;Access denied; you need (at least one of) the PROCESS privilege(s) for this operation&#x27; when trying to dump tablespaces</span><br></pre></td></tr></table></figure><hr><p>这里提到为什么我不知道 root 密码，因为一键部署的话他是会给你创一个新的角色然后去使用数据库，这就导致了他在给我数据库密码的时候只给了我这个角色的名称和密码，具体 root 的密码我在网上查说是面板里可以看，但是我这时候已经卸载了，而且这个面板只支持纯净系统里安装。</p><hr><p>回归正题，感谢 chatgpt。这次真的是幸运，因为网上搜的杂七杂八的，有的连 markdown 都不写，运行语句都连在一起，也不知道哪里应该替换成自己的，索性去问了 chatgpt，最开始我是怀疑它给出的方案的，因为里面的语句和我查到了别人博客里写的不太一样。但是最终还是成功了，所以我不敢保证我这里的方法对你们是否有用，起码思路应该是正确的。<br>这里提示以下我的系统是 ubuntu2204，mysql5.7。</p><hr><p>如果你忘记了 MySQL root 用户的密码，你可以通过以下步骤重置密码：</p><ol><li><p><strong>停止 MySQL 服务</strong>：首先，停止 MySQL 服务以确保没有活动的数据库连接。你可以使用以下命令停止 MySQL 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop mysql</span><br></pre></td></tr></table></figure><p>或者，如果你使用的是旧版本的 Ubuntu，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure></li><li><p><strong>启动 MySQL 服务，并跳过权限验证</strong>：使用以下命令启动 MySQL 服务，但跳过权限验证，这样你就可以在不知道密码的情况下登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysqld_safe --skip-grant-tables --skip-networking &amp;</span><br></pre></td></tr></table></figure></li><li><p><strong>登录到 MySQL 服务器</strong>：现在你可以使用以下命令登录到 MySQL 服务器，不需要密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure></li><li><p><strong>重置密码</strong>：在 MySQL 命令行中，执行以下命令来重置 root 用户的密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;new_password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>将 <code>&#39;new_password&#39;</code> 替换为你想要设置的新密码。</p></li><li><p><strong>退出 MySQL 并重新启动服务</strong>：退出 MySQL 命令行界面，并重新启动 MySQL 服务以使更改生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></li></ol><p>现在，你应该可以使用新密码登录到 MySQL 服务器了。</p><hr><p><strong>值得一提的是，如果 mysql 卡死不能执行命令的时候，<code>ctrl+d</code> 可以强制退出 mysql 回到 linux</strong></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 备份 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="/2024/03/18/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2024/03/18/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="简单记录一下博客搭建过程"><a href="#简单记录一下博客搭建过程" class="headerlink" title="简单记录一下博客搭建过程"></a>简单记录一下博客搭建过程</h1><p>&nbsp;&nbsp;很早以前就有了搭建博客的想法，也有用过 react 写过博客前端页面，但是很快我就知道了这不是短时间工程。所以我去寻找现成的模板。<br>&nbsp;&nbsp;显然我需要一个服务器。我去搜了并且决定是阿里云服务器，因为大学生使用很长时间几乎是免费（<del>这不是广告</del>）。试错了很多，也跟着教程做了几个实验，基本是熟悉了服务器的操作。<br>&nbsp;&nbsp;虽然但是，我还是使用了 AWS（<del>也是白嫖</del>）。具体申请条件就请去官网看吧，毕竟时时都在变化。<br>&nbsp;&nbsp;总之我会继续完善这个博客的，毕竟现在的时间实在是太宝贵了。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Pragmatic Programmer</title>
      <link href="/2024/03/18/The-Pragmatic-Programmer/"/>
      <url>/2024/03/18/The-Pragmatic-Programmer/</url>
      
        <content type="html"><![CDATA[<p>Programming is a craft. At its simplest, it comes down to getting a computer to do what you want it to do (or what your user wants it to do). As a programmer, you are part listener, part advisor, part interpreter, and part dictator.You try to capture elusive requirements and find a way of expressing them so that a mere machine can do them justice. You try to document your work so that others can understand it, and you try to engineer your work so that others can build on it. What’s more, you try to do all this against the relentless ticking of the project clock. You work small miracles every day.</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POV of Oppenheimer</title>
      <link href="/2024/03/13/POV-of-Oppenheimer/"/>
      <url>/2024/03/13/POV-of-Oppenheimer/</url>
      
        <content type="html"><![CDATA[<h1 id="Oppenheimer-film"><a href="#Oppenheimer-film" class="headerlink" title="Oppenheimer (film)"></a>Oppenheimer (film)</h1><p>After watching the Oppenheimer, I can’t tell that what I am feeling. First of all, it must be clear that the conversation I will talk is not about any country, any government, any things in reality. What I will talk is just about the film.<br>&ensp;&ensp; Yes, the film is extremely good. The sound, the actors, the music. I found that some Oppenheimer’s personality is just the same as mine. We both pursue the high end technology, think about how to change the world. I don’t deny that I like the learning atmosphere abroad. But I can feel the responsibility on his shoulder is becoming heavier. Yes, succeed in technical field, too successful to explosion. Because of it, so many people died. They have the right to invent it, but no right to decide whether use it or not. There is no true or false. Just one way they have is just going down. Not everyone want to know the truth, but there’s someone known the truth. It’s completely the hell. Oppenheimer is smart, he really want to take all the responsibilities on his own. It’s unfair, but understandable.<br>&ensp;&ensp; However, we go to a movie for the art, not for solving the problem that even Oppenheimer can’t solve. Few things can be more exciting than build a town and some bombs by spending 2 billion dollars. At the end, let me criticism subtitle group. The translation is so bad that I even wonder if you just use the tools to translate instead of their stupid brain. ( Forgive my rudeness! )<br>&ensp;&ensp; PS: Cillian Murphy, I like him so much. I began to know him by watching the Peaky Blinders. Perfect actors!</p>]]></content>
      
      
      <categories>
          
          <category> 有感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
            <tag> 奥本海默 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
